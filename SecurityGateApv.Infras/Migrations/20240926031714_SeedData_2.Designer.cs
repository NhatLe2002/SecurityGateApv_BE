// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SecurityGateApv.Infras.DBContext;

#nullable disable

namespace SecurityGateApv.Infras.Migrations
{
    [DbContext(typeof(SecurityGateApvDbContext))]
    [Migration("20240926031714_SeedData_2")]
    partial class SeedData_2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SecurityGateApv.Domain.Models.CredentialCardType", b =>
                {
                    b.Property<int>("CredentialCardTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CredentialCardTypeId"));

                    b.Property<string>("CredentialCardTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CredentialCardTypeId");

                    b.ToTable("CredentialCardTypes");

                    b.HasData(
                        new
                        {
                            CredentialCardTypeId = 1,
                            CredentialCardTypeName = "Giấy phép lái xe"
                        },
                        new
                        {
                            CredentialCardTypeId = 2,
                            CredentialCardTypeName = "Giấy phép lái xe"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<int>("AcceptLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            AcceptLevel = 2,
                            CreateDate = new DateTime(2024, 9, 9, 1, 37, 3, 694, DateTimeKind.Utc).AddTicks(7483),
                            DepartmentName = "Phòng Kinh doanh",
                            Description = "Sit itaque laboriosam odio et.",
                            UpdatedDate = new DateTime(2024, 9, 9, 1, 37, 3, 694, DateTimeKind.Utc).AddTicks(7483)
                        },
                        new
                        {
                            DepartmentId = 2,
                            AcceptLevel = 3,
                            CreateDate = new DateTime(2024, 9, 22, 19, 52, 21, 411, DateTimeKind.Utc).AddTicks(6258),
                            DepartmentName = "Phòng Chăm sóc khách hàng",
                            Description = "Expedita hic sed vel qui ratione sit quis.",
                            UpdatedDate = new DateTime(2024, 9, 22, 19, 52, 21, 411, DateTimeKind.Utc).AddTicks(6258)
                        },
                        new
                        {
                            DepartmentId = 3,
                            AcceptLevel = 4,
                            CreateDate = new DateTime(2024, 9, 15, 20, 45, 49, 236, DateTimeKind.Utc).AddTicks(3413),
                            DepartmentName = "Phòng Pháp chế",
                            Description = "Nihil nam sit suscipit.",
                            UpdatedDate = new DateTime(2024, 9, 15, 20, 45, 49, 236, DateTimeKind.Utc).AddTicks(3413)
                        },
                        new
                        {
                            DepartmentId = 4,
                            AcceptLevel = 4,
                            CreateDate = new DateTime(2024, 9, 4, 13, 44, 16, 969, DateTimeKind.Utc).AddTicks(976),
                            DepartmentName = "Phòng Chăm sóc khách hàng",
                            Description = "Modi eum veritatis sit doloremque odit earum facilis sint praesentium.",
                            UpdatedDate = new DateTime(2024, 9, 4, 13, 44, 16, 969, DateTimeKind.Utc).AddTicks(976)
                        },
                        new
                        {
                            DepartmentId = 5,
                            AcceptLevel = 5,
                            CreateDate = new DateTime(2024, 9, 5, 19, 27, 7, 453, DateTimeKind.Utc).AddTicks(8225),
                            DepartmentName = "Phòng Pháp chế",
                            Description = "Voluptas architecto ut eum consequatur veritatis omnis natus consequatur voluptatem.",
                            UpdatedDate = new DateTime(2024, 9, 5, 19, 27, 7, 453, DateTimeKind.Utc).AddTicks(8225)
                        },
                        new
                        {
                            DepartmentId = 6,
                            AcceptLevel = 1,
                            CreateDate = new DateTime(2024, 9, 12, 20, 16, 46, 431, DateTimeKind.Utc).AddTicks(3011),
                            DepartmentName = "Phòng Pháp chế",
                            Description = "Aperiam voluptas voluptas sed deserunt natus fuga nihil dolores.",
                            UpdatedDate = new DateTime(2024, 9, 12, 20, 16, 46, 431, DateTimeKind.Utc).AddTicks(3011)
                        },
                        new
                        {
                            DepartmentId = 7,
                            AcceptLevel = 4,
                            CreateDate = new DateTime(2024, 9, 11, 21, 14, 1, 460, DateTimeKind.Utc).AddTicks(8567),
                            DepartmentName = "Phòng Nhân sự",
                            Description = "Quis facere ex et est veritatis accusamus.",
                            UpdatedDate = new DateTime(2024, 9, 11, 21, 14, 1, 460, DateTimeKind.Utc).AddTicks(8567)
                        },
                        new
                        {
                            DepartmentId = 8,
                            AcceptLevel = 5,
                            CreateDate = new DateTime(2024, 9, 11, 15, 14, 56, 694, DateTimeKind.Utc).AddTicks(8462),
                            DepartmentName = "Phòng Hành chính",
                            Description = "Nobis ut quisquam nesciunt in qui voluptatem quasi.",
                            UpdatedDate = new DateTime(2024, 9, 11, 15, 14, 56, 694, DateTimeKind.Utc).AddTicks(8462)
                        },
                        new
                        {
                            DepartmentId = 9,
                            AcceptLevel = 1,
                            CreateDate = new DateTime(2024, 9, 14, 19, 27, 28, 659, DateTimeKind.Utc).AddTicks(4207),
                            DepartmentName = "Phòng Kế toán",
                            Description = "Harum aut saepe quaerat expedita natus illum impedit sit fugiat.",
                            UpdatedDate = new DateTime(2024, 9, 14, 19, 27, 28, 659, DateTimeKind.Utc).AddTicks(4207)
                        },
                        new
                        {
                            DepartmentId = 10,
                            AcceptLevel = 2,
                            CreateDate = new DateTime(2024, 9, 20, 1, 7, 44, 959, DateTimeKind.Utc).AddTicks(4003),
                            DepartmentName = "Phòng R&D",
                            Description = "Pariatur quasi in tempore aut velit animi necessitatibus.",
                            UpdatedDate = new DateTime(2024, 9, 20, 1, 7, 44, 959, DateTimeKind.Utc).AddTicks(4003)
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Gate", b =>
                {
                    b.Property<int>("GateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GateId"));

                    b.Property<string>("GateCoordinate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GateId");

                    b.ToTable("Gates");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.NotificationUsers", b =>
                {
                    b.Property<int>("NotificationUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationUserID"));

                    b.Property<int>("NotificationID")
                        .HasColumnType("int");

                    b.Property<bool>("ReadStatus")
                        .HasColumnType("bit");

                    b.Property<int>("ReceiverID")
                        .HasColumnType("int");

                    b.Property<int>("SenderID")
                        .HasColumnType("int");

                    b.HasKey("NotificationUserID");

                    b.HasIndex("NotificationID");

                    b.HasIndex("ReceiverID");

                    b.HasIndex("SenderID");

                    b.ToTable("NotificationUsers");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Process", b =>
                {
                    b.Property<int>("ProcessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProcessId"));

                    b.Property<int>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("VisitTypeId")
                        .HasColumnType("int");

                    b.HasKey("ProcessId");

                    b.HasIndex("CreateBy");

                    b.HasIndex("VisitTypeId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            ProcessId = 1,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 24, 3, 17, 14, 145, DateTimeKind.Utc).AddTicks(4163),
                            Description = "",
                            ProcessName = "Handcrafted Cotton Cheese",
                            Status = true,
                            VisitTypeId = 1
                        },
                        new
                        {
                            ProcessId = 2,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 24, 3, 17, 14, 145, DateTimeKind.Utc).AddTicks(6771),
                            Description = "",
                            ProcessName = "Incredible Fresh Bacon",
                            Status = true,
                            VisitTypeId = 1
                        },
                        new
                        {
                            ProcessId = 3,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 24, 3, 17, 14, 145, DateTimeKind.Utc).AddTicks(6799),
                            Description = "",
                            ProcessName = "Awesome Cotton Shirt",
                            Status = true,
                            VisitTypeId = 1
                        },
                        new
                        {
                            ProcessId = 4,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 24, 3, 17, 14, 145, DateTimeKind.Utc).AddTicks(6817),
                            Description = "",
                            ProcessName = "Practical Soft Shirt",
                            Status = true,
                            VisitTypeId = 1
                        },
                        new
                        {
                            ProcessId = 5,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 24, 3, 17, 14, 145, DateTimeKind.Utc).AddTicks(6835),
                            Description = "",
                            ProcessName = "Practical Rubber Table",
                            Status = false,
                            VisitTypeId = 1
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.Property<int>("QRCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardId"));

                    b.Property<Guid>("CardGuidId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastCancelDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QRCardStatusId")
                        .HasColumnType("int");

                    b.Property<int>("QRCardTypeId")
                        .HasColumnType("int");

                    b.HasKey("QRCardId");

                    b.HasIndex("QRCardStatusId");

                    b.HasIndex("QRCardTypeId");

                    b.ToTable("QRCards");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardStatus", b =>
                {
                    b.Property<int>("QRCardStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardStatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusNumber")
                        .HasColumnType("int");

                    b.HasKey("QRCardStatusId");

                    b.ToTable("QRCardStatus");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardType", b =>
                {
                    b.Property<int>("QRCardTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardTypeId"));

                    b.Property<string>("CardTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QRCardTypeId");

                    b.ToTable("QRCardType");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Description = "Quản lý toàn bộ hệ thống",
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            Description = "Quản lý toàn bộ công ty",
                            RoleName = "Manager"
                        },
                        new
                        {
                            RoleId = 3,
                            Description = "Quản lý toàn bộ phòng ban",
                            RoleName = "DepartmentManaager"
                        },
                        new
                        {
                            RoleId = 4,
                            Description = "Tạo và quản lý khách ra vào của phòng ban",
                            RoleName = "Staff"
                        },
                        new
                        {
                            RoleId = 5,
                            Description = "Quản lý khách ra vào tại cổng",
                            RoleName = "Security"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedDate = new DateTime(2024, 3, 26, 3, 17, 14, 132, DateTimeKind.Utc).AddTicks(3171),
                            Email = "admin1@example.com",
                            FullName = "Admin One",
                            Password = "123",
                            PhoneNumber = "0123456789",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 3, 17, 14, 132, DateTimeKind.Utc).AddTicks(3180),
                            UserName = "admin1"
                        },
                        new
                        {
                            UserId = 2,
                            CreatedDate = new DateTime(2024, 6, 26, 3, 17, 14, 132, DateTimeKind.Utc).AddTicks(3183),
                            Email = "manager1@example.com",
                            FullName = "Manager One",
                            Password = "123",
                            PhoneNumber = "0987654321",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 3, 17, 14, 132, DateTimeKind.Utc).AddTicks(3184),
                            UserName = "manager1"
                        },
                        new
                        {
                            UserId = 3,
                            CreatedDate = new DateTime(2024, 7, 26, 3, 17, 14, 132, DateTimeKind.Utc).AddTicks(3185),
                            Email = "employee1@example.com",
                            FullName = "Department Manager One",
                            Password = "123",
                            PhoneNumber = "0112223334",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 3, 17, 14, 132, DateTimeKind.Utc).AddTicks(3186),
                            UserName = "DM1"
                        },
                        new
                        {
                            UserId = 4,
                            CreatedDate = new DateTime(2024, 8, 26, 3, 17, 14, 132, DateTimeKind.Utc).AddTicks(3188),
                            Email = "hr1@example.com",
                            FullName = "Staff One",
                            Password = "123",
                            PhoneNumber = "0223334445",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 3, 17, 14, 132, DateTimeKind.Utc).AddTicks(3188),
                            UserName = "Staff1"
                        },
                        new
                        {
                            UserId = 5,
                            CreatedDate = new DateTime(2024, 5, 26, 3, 17, 14, 132, DateTimeKind.Utc).AddTicks(3190),
                            Email = "it1@example.com",
                            FullName = "Security One",
                            Password = "123",
                            PhoneNumber = "0334445556",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 3, 17, 14, 132, DateTimeKind.Utc).AddTicks(3190),
                            UserName = "Security1"
                        },
                        new
                        {
                            UserId = 6,
                            CreatedDate = new DateTime(2024, 9, 19, 2, 59, 45, 245, DateTimeKind.Unspecified).AddTicks(9850),
                            Email = "gmail.com.Bahringer@hotmail.com",
                            FullName = "Rubye Kuphal",
                            Password = "f2noko",
                            PhoneNumber = "0959250823",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 19, 2, 59, 45, 245, DateTimeKind.Unspecified).AddTicks(9850),
                            UserName = "Ruthe.Gorczany18"
                        },
                        new
                        {
                            UserId = 7,
                            CreatedDate = new DateTime(2024, 9, 15, 3, 4, 55, 526, DateTimeKind.Unspecified).AddTicks(2367),
                            Email = "gmail.com.Tremblay72@yahoo.com",
                            FullName = "Anabel Baumbach",
                            Password = "6i0h9q",
                            PhoneNumber = "0648248532",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 15, 3, 4, 55, 526, DateTimeKind.Unspecified).AddTicks(2367),
                            UserName = "Skylar.Zulauf"
                        },
                        new
                        {
                            UserId = 8,
                            CreatedDate = new DateTime(2024, 9, 19, 10, 7, 6, 103, DateTimeKind.Unspecified).AddTicks(7610),
                            Email = "gmail.com.Robel@yahoo.com",
                            FullName = "Leon Jones",
                            Password = "kk6vsa",
                            PhoneNumber = "0884744236",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 19, 10, 7, 6, 103, DateTimeKind.Unspecified).AddTicks(7610),
                            UserName = "Patience.Kassulke"
                        },
                        new
                        {
                            UserId = 9,
                            CreatedDate = new DateTime(2024, 9, 1, 11, 29, 29, 663, DateTimeKind.Unspecified).AddTicks(2909),
                            Email = "gmail.com61@yahoo.com",
                            FullName = "Carley Stark",
                            Password = "vojr8c",
                            PhoneNumber = "0669391328",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 1, 11, 29, 29, 663, DateTimeKind.Unspecified).AddTicks(2909),
                            UserName = "Lucinda63"
                        },
                        new
                        {
                            UserId = 10,
                            CreatedDate = new DateTime(2024, 9, 5, 10, 30, 59, 303, DateTimeKind.Unspecified).AddTicks(120),
                            Email = "gmail.com10@gmail.com",
                            FullName = "Destany Durgan",
                            Password = "kprbti",
                            PhoneNumber = "0789172719",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 5, 10, 30, 59, 303, DateTimeKind.Unspecified).AddTicks(120),
                            UserName = "Wiley74"
                        },
                        new
                        {
                            UserId = 11,
                            CreatedDate = new DateTime(2024, 9, 2, 6, 53, 24, 777, DateTimeKind.Unspecified).AddTicks(9395),
                            Email = "gmail.com.Baumbach@hotmail.com",
                            FullName = "Katherine Gaylord",
                            Password = "rrad97",
                            PhoneNumber = "0957436780",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 2, 6, 53, 24, 777, DateTimeKind.Unspecified).AddTicks(9395),
                            UserName = "Norwood_Aufderhar"
                        },
                        new
                        {
                            UserId = 12,
                            CreatedDate = new DateTime(2024, 9, 16, 12, 20, 32, 487, DateTimeKind.Unspecified).AddTicks(9702),
                            Email = "gmail.com_Lesch@yahoo.com",
                            FullName = "Amelie Stoltenberg",
                            Password = "pdplxd",
                            PhoneNumber = "0975028154",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 16, 12, 20, 32, 487, DateTimeKind.Unspecified).AddTicks(9702),
                            UserName = "Stella_Metz"
                        },
                        new
                        {
                            UserId = 13,
                            CreatedDate = new DateTime(2024, 9, 3, 9, 55, 45, 277, DateTimeKind.Unspecified).AddTicks(8444),
                            Email = "gmail.com39@gmail.com",
                            FullName = "Karelle Haag",
                            Password = "v96f1n",
                            PhoneNumber = "0345169252",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 3, 9, 55, 45, 277, DateTimeKind.Unspecified).AddTicks(8444),
                            UserName = "Alize.Kreiger71"
                        },
                        new
                        {
                            UserId = 14,
                            CreatedDate = new DateTime(2024, 9, 1, 23, 1, 1, 725, DateTimeKind.Unspecified).AddTicks(629),
                            Email = "gmail.com_Herman66@gmail.com",
                            FullName = "Mylene Marquardt",
                            Password = "4m9pb2",
                            PhoneNumber = "0978822463",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 1, 23, 1, 1, 725, DateTimeKind.Unspecified).AddTicks(629),
                            UserName = "Carey96"
                        },
                        new
                        {
                            UserId = 15,
                            CreatedDate = new DateTime(2024, 9, 20, 1, 46, 33, 277, DateTimeKind.Unspecified).AddTicks(1621),
                            Email = "gmail.com86@hotmail.com",
                            FullName = "Parker Nader",
                            Password = "raaqq6",
                            PhoneNumber = "0148521413",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 20, 1, 46, 33, 277, DateTimeKind.Unspecified).AddTicks(1621),
                            UserName = "Dayna_Gerlach"
                        },
                        new
                        {
                            UserId = 16,
                            CreatedDate = new DateTime(2024, 9, 9, 20, 44, 36, 827, DateTimeKind.Unspecified).AddTicks(354),
                            Email = "gmail.com.Shields51@yahoo.com",
                            FullName = "Rodger Moen",
                            Password = "6p4386",
                            PhoneNumber = "0955635866",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 9, 20, 44, 36, 827, DateTimeKind.Unspecified).AddTicks(354),
                            UserName = "Franco_Braun"
                        },
                        new
                        {
                            UserId = 17,
                            CreatedDate = new DateTime(2024, 9, 6, 3, 1, 14, 342, DateTimeKind.Unspecified).AddTicks(726),
                            Email = "gmail.com_Franecki12@gmail.com",
                            FullName = "Orville Ward",
                            Password = "s6hupg",
                            PhoneNumber = "0784462431",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 6, 3, 1, 14, 342, DateTimeKind.Unspecified).AddTicks(726),
                            UserName = "Amely72"
                        },
                        new
                        {
                            UserId = 18,
                            CreatedDate = new DateTime(2024, 9, 15, 11, 40, 15, 296, DateTimeKind.Unspecified).AddTicks(3121),
                            Email = "gmail.com22@hotmail.com",
                            FullName = "King Beatty",
                            Password = "4pgocs",
                            PhoneNumber = "0597412004",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 15, 11, 40, 15, 296, DateTimeKind.Unspecified).AddTicks(3121),
                            UserName = "Letitia.Deckow"
                        },
                        new
                        {
                            UserId = 19,
                            CreatedDate = new DateTime(2024, 9, 21, 13, 39, 23, 323, DateTimeKind.Unspecified).AddTicks(3231),
                            Email = "gmail.com_Muller@hotmail.com",
                            FullName = "Helene McCullough",
                            Password = "qni83t",
                            PhoneNumber = "0470116832",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 21, 13, 39, 23, 323, DateTimeKind.Unspecified).AddTicks(3231),
                            UserName = "Elena.Schultz69"
                        },
                        new
                        {
                            UserId = 20,
                            CreatedDate = new DateTime(2024, 9, 11, 23, 19, 46, 723, DateTimeKind.Unspecified).AddTicks(6547),
                            Email = "gmail.com40@hotmail.com",
                            FullName = "Lucile Abernathy",
                            Password = "puq8s1",
                            PhoneNumber = "0906409321",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 11, 23, 19, 46, 723, DateTimeKind.Unspecified).AddTicks(6547),
                            UserName = "Mable.Mann"
                        },
                        new
                        {
                            UserId = 21,
                            CreatedDate = new DateTime(2024, 9, 7, 5, 7, 54, 798, DateTimeKind.Unspecified).AddTicks(4806),
                            Email = "gmail.com.Bernier63@hotmail.com",
                            FullName = "Zena Labadie",
                            Password = "8lh61f",
                            PhoneNumber = "0925024023",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 7, 5, 7, 54, 798, DateTimeKind.Unspecified).AddTicks(4806),
                            UserName = "Avis.Konopelski86"
                        },
                        new
                        {
                            UserId = 22,
                            CreatedDate = new DateTime(2024, 9, 1, 16, 46, 7, 847, DateTimeKind.Unspecified).AddTicks(8959),
                            Email = "gmail.com.Mraz@yahoo.com",
                            FullName = "Einar Kuhlman",
                            Password = "5mv6dk",
                            PhoneNumber = "0669702739",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 1, 16, 46, 7, 847, DateTimeKind.Unspecified).AddTicks(8959),
                            UserName = "Tabitha_Flatley"
                        },
                        new
                        {
                            UserId = 23,
                            CreatedDate = new DateTime(2024, 9, 21, 23, 48, 48, 713, DateTimeKind.Unspecified).AddTicks(5109),
                            Email = "gmail.com2@gmail.com",
                            FullName = "Laura Veum",
                            Password = "alek7n",
                            PhoneNumber = "0337355594",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 21, 23, 48, 48, 713, DateTimeKind.Unspecified).AddTicks(5109),
                            UserName = "Nyah78"
                        },
                        new
                        {
                            UserId = 24,
                            CreatedDate = new DateTime(2024, 9, 13, 13, 30, 53, 238, DateTimeKind.Unspecified).AddTicks(6523),
                            Email = "gmail.com41@hotmail.com",
                            FullName = "Sandrine Watsica",
                            Password = "563bx3",
                            PhoneNumber = "0724931273",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 13, 13, 30, 53, 238, DateTimeKind.Unspecified).AddTicks(6523),
                            UserName = "Ashly79"
                        },
                        new
                        {
                            UserId = 25,
                            CreatedDate = new DateTime(2024, 9, 12, 11, 58, 54, 134, DateTimeKind.Unspecified).AddTicks(679),
                            Email = "gmail.com.Hansen@yahoo.com",
                            FullName = "Federico Beahan",
                            Password = "5eiulz",
                            PhoneNumber = "0907208467",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 12, 11, 58, 54, 134, DateTimeKind.Unspecified).AddTicks(679),
                            UserName = "Ariel.Beer57"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.UserDepartment", b =>
                {
                    b.Property<int>("UserDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserDepartmentId"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserDepartmentId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDepartments");

                    b.HasData(
                        new
                        {
                            UserDepartmentId = 1,
                            DepartmentId = 1,
                            UserId = 3
                        },
                        new
                        {
                            UserDepartmentId = 2,
                            DepartmentId = 1,
                            UserId = 4
                        },
                        new
                        {
                            UserDepartmentId = 3,
                            DepartmentId = 2,
                            UserId = 3
                        },
                        new
                        {
                            UserDepartmentId = 4,
                            DepartmentId = 2,
                            UserId = 21
                        },
                        new
                        {
                            UserDepartmentId = 5,
                            DepartmentId = 4,
                            UserId = 13
                        },
                        new
                        {
                            UserDepartmentId = 6,
                            DepartmentId = 5,
                            UserId = 16
                        },
                        new
                        {
                            UserDepartmentId = 7,
                            DepartmentId = 4,
                            UserId = 10
                        },
                        new
                        {
                            UserDepartmentId = 8,
                            DepartmentId = 7,
                            UserId = 22
                        },
                        new
                        {
                            UserDepartmentId = 9,
                            DepartmentId = 3,
                            UserId = 21
                        },
                        new
                        {
                            UserDepartmentId = 10,
                            DepartmentId = 3,
                            UserId = 10
                        },
                        new
                        {
                            UserDepartmentId = 11,
                            DepartmentId = 9,
                            UserId = 11
                        },
                        new
                        {
                            UserDepartmentId = 12,
                            DepartmentId = 4,
                            UserId = 25
                        },
                        new
                        {
                            UserDepartmentId = 13,
                            DepartmentId = 1,
                            UserId = 16
                        },
                        new
                        {
                            UserDepartmentId = 14,
                            DepartmentId = 4,
                            UserId = 9
                        },
                        new
                        {
                            UserDepartmentId = 15,
                            DepartmentId = 9,
                            UserId = 12
                        },
                        new
                        {
                            UserDepartmentId = 16,
                            DepartmentId = 8,
                            UserId = 6
                        },
                        new
                        {
                            UserDepartmentId = 17,
                            DepartmentId = 6,
                            UserId = 23
                        },
                        new
                        {
                            UserDepartmentId = 18,
                            DepartmentId = 3,
                            UserId = 11
                        },
                        new
                        {
                            UserDepartmentId = 19,
                            DepartmentId = 6,
                            UserId = 22
                        },
                        new
                        {
                            UserDepartmentId = 20,
                            DepartmentId = 3,
                            UserId = 23
                        },
                        new
                        {
                            UserDepartmentId = 21,
                            DepartmentId = 7,
                            UserId = 21
                        },
                        new
                        {
                            UserDepartmentId = 22,
                            DepartmentId = 4,
                            UserId = 23
                        },
                        new
                        {
                            UserDepartmentId = 23,
                            DepartmentId = 2,
                            UserId = 10
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.Property<int>("VehicleSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleSessionId"));

                    b.Property<DateTime>("CheckinTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckoutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GateId")
                        .HasColumnType("int");

                    b.Property<int>("SecurityID")
                        .HasColumnType("int");

                    b.Property<int>("VisitDetailId")
                        .HasColumnType("int");

                    b.HasKey("VehicleSessionId");

                    b.HasIndex("GateId");

                    b.HasIndex("SecurityID");

                    b.HasIndex("VisitDetailId");

                    b.ToTable("VehicleSessions");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSessionImage", b =>
                {
                    b.Property<int>("VehicleSessionImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleSessionImageId"));

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleSessionId")
                        .HasColumnType("int");

                    b.Property<string>("VehicleSessionImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleSessionImageId");

                    b.HasIndex("VehicleSessionId");

                    b.ToTable("VehicleSessionImages");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.Property<int>("VisitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitId"));

                    b.Property<int>("AcceptLevel")
                        .HasColumnType("int");

                    b.Property<int>("CreateById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRegister")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UpdateById")
                        .HasColumnType("int");

                    b.Property<string>("VisitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitQuantity")
                        .HasColumnType("int");

                    b.Property<string>("VisitType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitId");

                    b.HasIndex("CreateById");

                    b.HasIndex("UpdateById");

                    b.ToTable("Visits");

                    b.HasData(
                        new
                        {
                            VisitId = 1,
                            AcceptLevel = 1,
                            CreateById = 3,
                            DateRegister = new DateTime(2024, 9, 24, 10, 17, 14, 147, DateTimeKind.Local).AddTicks(3183),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.Property<int>("VisitDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitDetailId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ExpectedEndTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("ExpectedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ExpectedStartTime")
                        .HasColumnType("time");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.Property<int>("VisitorId")
                        .HasColumnType("int");

                    b.HasKey("VisitDetailId");

                    b.HasIndex("VisitId");

                    b.HasIndex("VisitorId");

                    b.ToTable("VisitDetails");

                    b.HasData(
                        new
                        {
                            VisitDetailId = 1,
                            Description = "Odio autem molestias et magni neque. Reiciendis expedita eaque accusantium beatae omnis recusandae consequuntur quas. Nobis fuga in. Tempore maiores ab aut voluptatem doloribus aut debitis. Vel laudantium eos quas cumque dolorum hic exercitationem id nisi. Incidunt omnis magni.",
                            ExpectedEndDate = new DateTime(2024, 10, 25, 10, 17, 14, 158, DateTimeKind.Local).AddTicks(5818),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 25, 10, 17, 14, 158, DateTimeKind.Local).AddTicks(5758),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 1,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitDetailId = 2,
                            Description = "Vel dolorem sint aut amet aut aut enim possimus. Est non qui laborum ducimus a aut facere est. Est est molestias. Qui ipsum officiis cumque ipsum modi accusamus sint eligendi. Sed cupiditate culpa voluptas. Sunt a veritatis natus doloribus quam est harum.",
                            ExpectedEndDate = new DateTime(2024, 10, 25, 10, 17, 14, 158, DateTimeKind.Local).AddTicks(8788),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 25, 10, 17, 14, 158, DateTimeKind.Local).AddTicks(8781),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 1,
                            VisitorId = 1
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitProcess", b =>
                {
                    b.Property<int>("VisitProcessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitProcessId"));

                    b.Property<string>("DaysOfProcess")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ExpectedEndTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("ExpectedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ExpectedStartTime")
                        .HasColumnType("time");

                    b.Property<int>("ProcessId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.Property<int>("VisitQuantity")
                        .HasColumnType("int");

                    b.HasKey("VisitProcessId");

                    b.HasIndex("ProcessId");

                    b.HasIndex("VisitId");

                    b.ToTable("VisitProjects");

                    b.HasData(
                        new
                        {
                            VisitProcessId = 1,
                            DaysOfProcess = "Monday",
                            ExpectedEndDate = new DateTime(2024, 10, 25, 10, 17, 14, 148, DateTimeKind.Local).AddTicks(9293),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 25, 10, 17, 14, 148, DateTimeKind.Local).AddTicks(9174),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            ProcessId = 1,
                            Status = "Processing",
                            VisitId = 1,
                            VisitQuantity = 2
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitType", b =>
                {
                    b.Property<int>("VisitTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitTypeId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VisitTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitTypeId");

                    b.ToTable("VisitTypes");

                    b.HasData(
                        new
                        {
                            VisitTypeId = 1,
                            Description = "Process trong tuần",
                            VisitTypeName = "ProcessWeek"
                        },
                        new
                        {
                            VisitTypeId = 2,
                            Description = "Process trong tháng",
                            VisitTypeName = "ProcessMonth"
                        },
                        new
                        {
                            VisitTypeId = 3,
                            Description = "Project",
                            VisitTypeName = "Project"
                        },
                        new
                        {
                            VisitTypeId = 4,
                            Description = "Visit được tạo bởi staff",
                            VisitTypeName = "VisitStaff"
                        },
                        new
                        {
                            VisitTypeId = 5,
                            Description = "Visit được tạo bởi security",
                            VisitTypeName = "VisitSecurity"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.Property<int>("VisitorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorId"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreateById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CredentialCardTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CredentialsCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("VisitorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitorId");

                    b.HasIndex("CreateById");

                    b.HasIndex("CredentialCardTypeId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Visitors");

                    b.HasData(
                        new
                        {
                            VisitorId = 1,
                            CompanyName = "Mayert, Sawayn and Daugherty",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 6, 7, 24, 37, 402, DateTimeKind.Unspecified).AddTicks(7509),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "9be925v2ev",
                            PhoneNumber = "0344032499",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 7, 24, 37, 402, DateTimeKind.Unspecified).AddTicks(7509),
                            VisitorName = "Cristal Shields"
                        },
                        new
                        {
                            VisitorId = 2,
                            CompanyName = "Cartwright - Block",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 9, 7, 27, 12, 736, DateTimeKind.Unspecified).AddTicks(4417),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "iedyj3wg5p",
                            PhoneNumber = "0758992551",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 9, 7, 27, 12, 736, DateTimeKind.Unspecified).AddTicks(4417),
                            VisitorName = "Augustine Kozey"
                        },
                        new
                        {
                            VisitorId = 3,
                            CompanyName = "Kiehn, Jast and Braun",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 18, 10, 15, 31, 878, DateTimeKind.Unspecified).AddTicks(4178),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "auhoxfjqhw",
                            PhoneNumber = "0722837084",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 18, 10, 15, 31, 878, DateTimeKind.Unspecified).AddTicks(4178),
                            VisitorName = "Matt Dickinson"
                        },
                        new
                        {
                            VisitorId = 4,
                            CompanyName = "Kemmer, Boehm and Robel",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 3, 12, 52, 23, 322, DateTimeKind.Unspecified).AddTicks(1797),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "s43o02vs02",
                            PhoneNumber = "0297155591",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 3, 12, 52, 23, 322, DateTimeKind.Unspecified).AddTicks(1797),
                            VisitorName = "Gerardo Christiansen"
                        },
                        new
                        {
                            VisitorId = 5,
                            CompanyName = "Kihn Group",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 11, 16, 31, 43, 273, DateTimeKind.Unspecified).AddTicks(6010),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "91b82qe6gp",
                            PhoneNumber = "0880567019",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 11, 16, 31, 43, 273, DateTimeKind.Unspecified).AddTicks(6010),
                            VisitorName = "Henriette Koepp"
                        },
                        new
                        {
                            VisitorId = 6,
                            CompanyName = "Wunsch LLC",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 15, 3, 3, 25, 967, DateTimeKind.Unspecified).AddTicks(1043),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "tzmeq5ig11",
                            PhoneNumber = "0227161465",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 15, 3, 3, 25, 967, DateTimeKind.Unspecified).AddTicks(1043),
                            VisitorName = "Betsy Littel"
                        },
                        new
                        {
                            VisitorId = 7,
                            CompanyName = "Gaylord, Abbott and O'Conner",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 7, 22, 10, 41, 591, DateTimeKind.Unspecified).AddTicks(1763),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "m0qfimtuij",
                            PhoneNumber = "0537107402",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 7, 22, 10, 41, 591, DateTimeKind.Unspecified).AddTicks(1763),
                            VisitorName = "Carley Sawayn"
                        },
                        new
                        {
                            VisitorId = 8,
                            CompanyName = "Hessel, Carroll and Cartwright",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 5, 20, 33, 56, 209, DateTimeKind.Unspecified).AddTicks(8765),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "yc5bk6pn44",
                            PhoneNumber = "0596021935",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 5, 20, 33, 56, 209, DateTimeKind.Unspecified).AddTicks(8765),
                            VisitorName = "Julianne Luettgen"
                        },
                        new
                        {
                            VisitorId = 9,
                            CompanyName = "Streich - Buckridge",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 8, 11, 4, 50, 435, DateTimeKind.Unspecified).AddTicks(3379),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "yi6zfwojze",
                            PhoneNumber = "0766996913",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 8, 11, 4, 50, 435, DateTimeKind.Unspecified).AddTicks(3379),
                            VisitorName = "Ambrose Wehner"
                        },
                        new
                        {
                            VisitorId = 10,
                            CompanyName = "Spinka, Heidenreich and Homenick",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 24, 14, 46, 34, 229, DateTimeKind.Unspecified).AddTicks(4399),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "d0jtijjoze",
                            PhoneNumber = "0531695082",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 24, 14, 46, 34, 229, DateTimeKind.Unspecified).AddTicks(4399),
                            VisitorName = "Winston Crist"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.Property<int>("VisitorSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorSessionId"));

                    b.Property<DateTime>("CheckinTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CheckoutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GateInId")
                        .HasColumnType("int");

                    b.Property<int?>("GateOutId")
                        .HasColumnType("int");

                    b.Property<int>("QRCardId")
                        .HasColumnType("int");

                    b.Property<int>("SecurityInId")
                        .HasColumnType("int");

                    b.Property<int?>("SecurityOutId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitDetailId")
                        .HasColumnType("int");

                    b.HasKey("VisitorSessionId");

                    b.HasIndex("GateInId");

                    b.HasIndex("GateOutId");

                    b.HasIndex("QRCardId");

                    b.HasIndex("SecurityInId");

                    b.HasIndex("SecurityOutId");

                    b.HasIndex("VisitDetailId");

                    b.ToTable("VisitorSessions");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSessionsImage", b =>
                {
                    b.Property<int>("VisitorSessionsImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorSessionsImageId"));

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitorSessionId")
                        .HasColumnType("int");

                    b.HasKey("VisitorSessionsImageId");

                    b.HasIndex("VisitorSessionId");

                    b.ToTable("VisitorSessionsImages");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.NotificationUsers", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Notification", "Notification")
                        .WithMany("NotificationUsers")
                        .HasForeignKey("NotificationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Receiver")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Sender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Process", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.User", "User")
                        .WithMany("Project")
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.VisitType", "VisitType")
                        .WithMany("VisitTypes")
                        .HasForeignKey("VisitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("VisitType");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.QRCardStatus", "QRCardStatus")
                        .WithMany("QRCards")
                        .HasForeignKey("QRCardStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.QRCardType", "QRCardType")
                        .WithMany("QRCards")
                        .HasForeignKey("QRCardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QRCardStatus");

                    b.Navigation("QRCardType");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Role", "Role")
                        .WithMany("User")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.UserDepartment", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Department", "Department")
                        .WithMany("UserDepartment")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "User")
                        .WithMany("UserDepartment")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Gate", "Gate")
                        .WithMany("VehicleSession")
                        .HasForeignKey("GateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Security")
                        .WithMany("VehicleSession")
                        .HasForeignKey("SecurityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.VisitDetail", "VisitDetail")
                        .WithMany("VehicleSession")
                        .HasForeignKey("VisitDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gate");

                    b.Navigation("Security");

                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSessionImage", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.VehicleSession", "VehicleSession")
                        .WithMany("Images")
                        .HasForeignKey("VehicleSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.User", "CreateBy")
                        .WithMany("CreatedVisits")
                        .HasForeignKey("CreateById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "UpdateBy")
                        .WithMany("UpdatedVisits")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreateBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Visit", "Visit")
                        .WithMany("VisitDetail")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Visitor", "Visitor")
                        .WithMany("VisitDetail")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visit");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitProcess", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Process", "Process")
                        .WithMany("VisitProject")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Visit", "Visit")
                        .WithMany("VisitProject")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Process");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.UserDepartment", "UserDepartment")
                        .WithMany("Visitors")
                        .HasForeignKey("CreateById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.CredentialCardType", "CredentialCardType")
                        .WithMany("Visitor")
                        .HasForeignKey("CredentialCardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "User")
                        .WithOne("Visitor")
                        .HasForeignKey("SecurityGateApv.Domain.Models.Visitor", "UserId");

                    b.Navigation("CredentialCardType");

                    b.Navigation("User");

                    b.Navigation("UserDepartment");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Gate", "GateIn")
                        .WithMany("VisitorSessionsIn")
                        .HasForeignKey("GateInId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Gate", "GateOut")
                        .WithMany("VisitorSessionsOut")
                        .HasForeignKey("GateOutId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SecurityGateApv.Domain.Models.QRCard", "QRCard")
                        .WithMany("VisitorSession")
                        .HasForeignKey("QRCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "SecurityIn")
                        .WithMany("SecurityInSessions")
                        .HasForeignKey("SecurityInId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "SecurityOut")
                        .WithMany("SecurityOutSessions")
                        .HasForeignKey("SecurityOutId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SecurityGateApv.Domain.Models.VisitDetail", "VisitDetail")
                        .WithMany("VisitorSession")
                        .HasForeignKey("VisitDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GateIn");

                    b.Navigation("GateOut");

                    b.Navigation("QRCard");

                    b.Navigation("SecurityIn");

                    b.Navigation("SecurityOut");

                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSessionsImage", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.VisitorSession", "VisitorSession")
                        .WithMany("Images")
                        .HasForeignKey("VisitorSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.CredentialCardType", b =>
                {
                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Department", b =>
                {
                    b.Navigation("UserDepartment");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Gate", b =>
                {
                    b.Navigation("VehicleSession");

                    b.Navigation("VisitorSessionsIn");

                    b.Navigation("VisitorSessionsOut");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Notification", b =>
                {
                    b.Navigation("NotificationUsers");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Process", b =>
                {
                    b.Navigation("VisitProject");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardStatus", b =>
                {
                    b.Navigation("QRCards");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardType", b =>
                {
                    b.Navigation("QRCards");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Role", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.Navigation("CreatedVisits");

                    b.Navigation("Project");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("SecurityInSessions");

                    b.Navigation("SecurityOutSessions");

                    b.Navigation("SentNotifications");

                    b.Navigation("UpdatedVisits");

                    b.Navigation("UserDepartment");

                    b.Navigation("VehicleSession");

                    b.Navigation("Visitor")
                        .IsRequired();
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.UserDepartment", b =>
                {
                    b.Navigation("Visitors");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.Navigation("VisitDetail");

                    b.Navigation("VisitProject");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.Navigation("VehicleSession");

                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitType", b =>
                {
                    b.Navigation("VisitTypes");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
