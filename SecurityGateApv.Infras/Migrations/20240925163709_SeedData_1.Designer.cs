// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SecurityGateApv.Infras.DBContext;

#nullable disable

namespace SecurityGateApv.Infras.Migrations
{
    [DbContext(typeof(SecurityGateApvDbContext))]
    [Migration("20240925163709_SeedData_1")]
    partial class SeedData_1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SecurityGateApv.Domain.Models.CredentialCardType", b =>
                {
                    b.Property<int>("CredentialCardTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CredentialCardTypeId"));

                    b.Property<string>("CredentialCardTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CredentialCardTypeId");

                    b.ToTable("CredentialCardTypes");

                    b.HasData(
                        new
                        {
                            CredentialCardTypeId = 1,
                            CredentialCardTypeName = "Giấy phép lái xe"
                        },
                        new
                        {
                            CredentialCardTypeId = 2,
                            CredentialCardTypeName = "Căn cước công dân"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<int>("AcceptLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            AcceptLevel = 2,
                            CreateDate = new DateTime(2024, 9, 10, 21, 10, 25, 19, DateTimeKind.Utc).AddTicks(2219),
                            DepartmentName = "Phòng R&D",
                            Description = "Placeat repellendus odio quam omnis tenetur cupiditate cum exercitationem.",
                            UpdatedDate = new DateTime(2024, 9, 10, 21, 10, 25, 19, DateTimeKind.Utc).AddTicks(2219)
                        },
                        new
                        {
                            DepartmentId = 2,
                            AcceptLevel = 2,
                            CreateDate = new DateTime(2024, 9, 20, 14, 49, 11, 296, DateTimeKind.Utc).AddTicks(2904),
                            DepartmentName = "Phòng IT",
                            Description = "Sit exercitationem eum.",
                            UpdatedDate = new DateTime(2024, 9, 20, 14, 49, 11, 296, DateTimeKind.Utc).AddTicks(2904)
                        },
                        new
                        {
                            DepartmentId = 3,
                            AcceptLevel = 4,
                            CreateDate = new DateTime(2024, 9, 15, 2, 13, 8, 15, DateTimeKind.Utc).AddTicks(3930),
                            DepartmentName = "Phòng IT",
                            Description = "Ducimus est ipsa sequi omnis.",
                            UpdatedDate = new DateTime(2024, 9, 15, 2, 13, 8, 15, DateTimeKind.Utc).AddTicks(3930)
                        },
                        new
                        {
                            DepartmentId = 4,
                            AcceptLevel = 3,
                            CreateDate = new DateTime(2024, 9, 9, 12, 13, 59, 476, DateTimeKind.Utc).AddTicks(5430),
                            DepartmentName = "Phòng Sản xuất",
                            Description = "Ratione quia dignissimos alias ut quos a similique.",
                            UpdatedDate = new DateTime(2024, 9, 9, 12, 13, 59, 476, DateTimeKind.Utc).AddTicks(5430)
                        },
                        new
                        {
                            DepartmentId = 5,
                            AcceptLevel = 3,
                            CreateDate = new DateTime(2024, 9, 25, 1, 41, 46, 144, DateTimeKind.Utc).AddTicks(2667),
                            DepartmentName = "Phòng Sản xuất",
                            Description = "Et enim mollitia accusamus vel ut velit ut alias esse.",
                            UpdatedDate = new DateTime(2024, 9, 25, 1, 41, 46, 144, DateTimeKind.Utc).AddTicks(2667)
                        },
                        new
                        {
                            DepartmentId = 6,
                            AcceptLevel = 2,
                            CreateDate = new DateTime(2024, 9, 23, 13, 55, 28, 871, DateTimeKind.Utc).AddTicks(1981),
                            DepartmentName = "Phòng Chăm sóc khách hàng",
                            Description = "Et maxime illum sed sequi eaque maiores.",
                            UpdatedDate = new DateTime(2024, 9, 23, 13, 55, 28, 871, DateTimeKind.Utc).AddTicks(1981)
                        },
                        new
                        {
                            DepartmentId = 7,
                            AcceptLevel = 4,
                            CreateDate = new DateTime(2024, 9, 20, 10, 39, 59, 457, DateTimeKind.Utc).AddTicks(8617),
                            DepartmentName = "Phòng Pháp chế",
                            Description = "Nulla voluptatum consequatur quo nostrum maiores.",
                            UpdatedDate = new DateTime(2024, 9, 20, 10, 39, 59, 457, DateTimeKind.Utc).AddTicks(8617)
                        },
                        new
                        {
                            DepartmentId = 8,
                            AcceptLevel = 5,
                            CreateDate = new DateTime(2024, 9, 11, 14, 39, 54, 527, DateTimeKind.Utc).AddTicks(2139),
                            DepartmentName = "Phòng Marketing",
                            Description = "Dolores nemo officia placeat ut ipsa.",
                            UpdatedDate = new DateTime(2024, 9, 11, 14, 39, 54, 527, DateTimeKind.Utc).AddTicks(2139)
                        },
                        new
                        {
                            DepartmentId = 9,
                            AcceptLevel = 4,
                            CreateDate = new DateTime(2024, 9, 24, 8, 55, 7, 86, DateTimeKind.Utc).AddTicks(1707),
                            DepartmentName = "Phòng Marketing",
                            Description = "Aspernatur et quas voluptatibus ut praesentium voluptatibus eos enim modi.",
                            UpdatedDate = new DateTime(2024, 9, 24, 8, 55, 7, 86, DateTimeKind.Utc).AddTicks(1707)
                        },
                        new
                        {
                            DepartmentId = 10,
                            AcceptLevel = 4,
                            CreateDate = new DateTime(2024, 9, 20, 20, 33, 26, 595, DateTimeKind.Utc).AddTicks(7604),
                            DepartmentName = "Phòng Nhân sự",
                            Description = "Debitis aut et.",
                            UpdatedDate = new DateTime(2024, 9, 20, 20, 33, 26, 595, DateTimeKind.Utc).AddTicks(7604)
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Gate", b =>
                {
                    b.Property<int>("GateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GateId"));

                    b.Property<string>("GateCoordinate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GateId");

                    b.ToTable("Gates");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.NotificationUsers", b =>
                {
                    b.Property<int>("NotificationUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationUserID"));

                    b.Property<int>("NotificationID")
                        .HasColumnType("int");

                    b.Property<bool>("ReadStatus")
                        .HasColumnType("bit");

                    b.Property<int>("ReceiverID")
                        .HasColumnType("int");

                    b.Property<int>("SenderID")
                        .HasColumnType("int");

                    b.HasKey("NotificationUserID");

                    b.HasIndex("NotificationID");

                    b.HasIndex("ReceiverID");

                    b.HasIndex("SenderID");

                    b.ToTable("NotificationUsers");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Process", b =>
                {
                    b.Property<int>("ProcessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProcessId"));

                    b.Property<int>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("VisitTypeId")
                        .HasColumnType("int");

                    b.HasKey("ProcessId");

                    b.HasIndex("CreateBy");

                    b.HasIndex("VisitTypeId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            ProcessId = 1,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 25, 16, 37, 8, 630, DateTimeKind.Utc).AddTicks(2253),
                            Description = "",
                            ProcessName = "Awesome Cotton Gloves",
                            Status = false,
                            VisitTypeId = 1
                        },
                        new
                        {
                            ProcessId = 2,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 25, 16, 37, 8, 630, DateTimeKind.Utc).AddTicks(3869),
                            Description = "",
                            ProcessName = "Handcrafted Concrete Hat",
                            Status = false,
                            VisitTypeId = 1
                        },
                        new
                        {
                            ProcessId = 3,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 25, 16, 37, 8, 630, DateTimeKind.Utc).AddTicks(3906),
                            Description = "",
                            ProcessName = "Intelligent Cotton Computer",
                            Status = false,
                            VisitTypeId = 1
                        },
                        new
                        {
                            ProcessId = 4,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 25, 16, 37, 8, 630, DateTimeKind.Utc).AddTicks(3926),
                            Description = "",
                            ProcessName = "Ergonomic Soft Pants",
                            Status = false,
                            VisitTypeId = 1
                        },
                        new
                        {
                            ProcessId = 5,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 25, 16, 37, 8, 630, DateTimeKind.Utc).AddTicks(3945),
                            Description = "",
                            ProcessName = "Gorgeous Cotton Fish",
                            Status = true,
                            VisitTypeId = 1
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.Property<int>("QRCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardId"));

                    b.Property<Guid>("CardGuidId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastCancelDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QRCardStatusId")
                        .HasColumnType("int");

                    b.Property<int>("QRCardTypeId")
                        .HasColumnType("int");

                    b.HasKey("QRCardId");

                    b.HasIndex("QRCardStatusId");

                    b.HasIndex("QRCardTypeId");

                    b.ToTable("QRCards");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardStatus", b =>
                {
                    b.Property<int>("QRCardStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardStatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusNumber")
                        .HasColumnType("int");

                    b.HasKey("QRCardStatusId");

                    b.ToTable("QRCardStatus");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardType", b =>
                {
                    b.Property<int>("QRCardTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardTypeId"));

                    b.Property<string>("CardTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QRCardTypeId");

                    b.ToTable("QRCardType");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Description = "Quản lý toàn bộ hệ thống",
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            Description = "Quản lý toàn bộ công ty",
                            RoleName = "Manager"
                        },
                        new
                        {
                            RoleId = 3,
                            Description = "Quản lý toàn bộ phòng ban",
                            RoleName = "DepartmentManaager"
                        },
                        new
                        {
                            RoleId = 4,
                            Description = "Tạo và quản lý khách ra vào của phòng ban",
                            RoleName = "Staff"
                        },
                        new
                        {
                            RoleId = 5,
                            Description = "Quản lý khách ra vào tại cổng",
                            RoleName = "Security"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedDate = new DateTime(2024, 3, 25, 16, 37, 8, 620, DateTimeKind.Utc).AddTicks(5898),
                            Email = "admin1@example.com",
                            FullName = "Admin One",
                            Password = "123",
                            PhoneNumber = "0123456789",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 25, 16, 37, 8, 620, DateTimeKind.Utc).AddTicks(5907),
                            UserName = "admin1"
                        },
                        new
                        {
                            UserId = 2,
                            CreatedDate = new DateTime(2024, 6, 25, 16, 37, 8, 620, DateTimeKind.Utc).AddTicks(5910),
                            Email = "manager1@example.com",
                            FullName = "Manager One",
                            Password = "123",
                            PhoneNumber = "0987654321",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 25, 16, 37, 8, 620, DateTimeKind.Utc).AddTicks(5911),
                            UserName = "manager1"
                        },
                        new
                        {
                            UserId = 3,
                            CreatedDate = new DateTime(2024, 7, 25, 16, 37, 8, 620, DateTimeKind.Utc).AddTicks(5912),
                            Email = "employee1@example.com",
                            FullName = "Department Manager One",
                            Password = "123",
                            PhoneNumber = "0112223334",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 25, 16, 37, 8, 620, DateTimeKind.Utc).AddTicks(5913),
                            UserName = "DM1"
                        },
                        new
                        {
                            UserId = 4,
                            CreatedDate = new DateTime(2024, 8, 25, 16, 37, 8, 620, DateTimeKind.Utc).AddTicks(5914),
                            Email = "hr1@example.com",
                            FullName = "Staff One",
                            Password = "123",
                            PhoneNumber = "0223334445",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 25, 16, 37, 8, 620, DateTimeKind.Utc).AddTicks(5915),
                            UserName = "Staff1"
                        },
                        new
                        {
                            UserId = 5,
                            CreatedDate = new DateTime(2024, 5, 25, 16, 37, 8, 620, DateTimeKind.Utc).AddTicks(5916),
                            Email = "it1@example.com",
                            FullName = "Security One",
                            Password = "123",
                            PhoneNumber = "0334445556",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 25, 16, 37, 8, 620, DateTimeKind.Utc).AddTicks(5917),
                            UserName = "Security1"
                        },
                        new
                        {
                            UserId = 6,
                            CreatedDate = new DateTime(2024, 9, 5, 2, 13, 20, 77, DateTimeKind.Unspecified).AddTicks(87),
                            Email = "gmail.com_Brown39@hotmail.com",
                            FullName = "Alfredo Sipes",
                            Password = "wd39ew",
                            PhoneNumber = "0969958184",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 5, 2, 13, 20, 77, DateTimeKind.Unspecified).AddTicks(87),
                            UserName = "Rylan4"
                        },
                        new
                        {
                            UserId = 7,
                            CreatedDate = new DateTime(2024, 9, 22, 10, 56, 22, 896, DateTimeKind.Unspecified).AddTicks(7003),
                            Email = "gmail.com_Hagenes72@hotmail.com",
                            FullName = "Halle Donnelly",
                            Password = "qiltro",
                            PhoneNumber = "0806279462",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 22, 10, 56, 22, 896, DateTimeKind.Unspecified).AddTicks(7003),
                            UserName = "Lolita.Bergnaum"
                        },
                        new
                        {
                            UserId = 8,
                            CreatedDate = new DateTime(2024, 9, 12, 6, 45, 7, 54, DateTimeKind.Unspecified).AddTicks(1257),
                            Email = "gmail.com_Howell@yahoo.com",
                            FullName = "Percival O'Kon",
                            Password = "kt666z",
                            PhoneNumber = "0673439234",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 12, 6, 45, 7, 54, DateTimeKind.Unspecified).AddTicks(1257),
                            UserName = "Rupert_Jakubowski6"
                        },
                        new
                        {
                            UserId = 9,
                            CreatedDate = new DateTime(2024, 9, 19, 3, 19, 43, 194, DateTimeKind.Unspecified).AddTicks(8507),
                            Email = "gmail.com39@gmail.com",
                            FullName = "Jabari Ferry",
                            Password = "880sxv",
                            PhoneNumber = "0901182356",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 19, 3, 19, 43, 194, DateTimeKind.Unspecified).AddTicks(8507),
                            UserName = "Caroline31"
                        },
                        new
                        {
                            UserId = 10,
                            CreatedDate = new DateTime(2024, 9, 1, 7, 35, 2, 933, DateTimeKind.Unspecified).AddTicks(3032),
                            Email = "gmail.com92@gmail.com",
                            FullName = "Delilah Waelchi",
                            Password = "44up9w",
                            PhoneNumber = "0214577535",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 1, 7, 35, 2, 933, DateTimeKind.Unspecified).AddTicks(3032),
                            UserName = "Quinn1"
                        },
                        new
                        {
                            UserId = 11,
                            CreatedDate = new DateTime(2024, 9, 13, 14, 34, 59, 254, DateTimeKind.Unspecified).AddTicks(6747),
                            Email = "gmail.com.Hartmann@hotmail.com",
                            FullName = "Marcos Schoen",
                            Password = "hmvh67",
                            PhoneNumber = "0763492957",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 13, 14, 34, 59, 254, DateTimeKind.Unspecified).AddTicks(6747),
                            UserName = "Elza58"
                        },
                        new
                        {
                            UserId = 12,
                            CreatedDate = new DateTime(2024, 9, 25, 5, 1, 12, 779, DateTimeKind.Unspecified).AddTicks(864),
                            Email = "gmail.com_Cartwright@yahoo.com",
                            FullName = "Misty Graham",
                            Password = "jt6405",
                            PhoneNumber = "0846014889",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 25, 5, 1, 12, 779, DateTimeKind.Unspecified).AddTicks(864),
                            UserName = "Letitia26"
                        },
                        new
                        {
                            UserId = 13,
                            CreatedDate = new DateTime(2024, 9, 1, 4, 57, 34, 884, DateTimeKind.Unspecified).AddTicks(2528),
                            Email = "gmail.com_Lockman@gmail.com",
                            FullName = "Ransom Champlin",
                            Password = "e88z0v",
                            PhoneNumber = "0751374192",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 1, 4, 57, 34, 884, DateTimeKind.Unspecified).AddTicks(2528),
                            UserName = "Samantha.Schuster67"
                        },
                        new
                        {
                            UserId = 14,
                            CreatedDate = new DateTime(2024, 9, 24, 12, 57, 51, 223, DateTimeKind.Unspecified).AddTicks(1512),
                            Email = "gmail.com.Keeling@yahoo.com",
                            FullName = "Keshawn Pfeffer",
                            Password = "8c02bw",
                            PhoneNumber = "0786592061",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 24, 12, 57, 51, 223, DateTimeKind.Unspecified).AddTicks(1512),
                            UserName = "Antonio54"
                        },
                        new
                        {
                            UserId = 15,
                            CreatedDate = new DateTime(2024, 9, 13, 2, 18, 14, 149, DateTimeKind.Unspecified).AddTicks(6270),
                            Email = "gmail.com.Reichert21@yahoo.com",
                            FullName = "Kiara Zboncak",
                            Password = "zv2t44",
                            PhoneNumber = "0760142298",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 13, 2, 18, 14, 149, DateTimeKind.Unspecified).AddTicks(6270),
                            UserName = "Evalyn_McLaughlin11"
                        },
                        new
                        {
                            UserId = 16,
                            CreatedDate = new DateTime(2024, 9, 8, 12, 51, 17, 661, DateTimeKind.Unspecified).AddTicks(4496),
                            Email = "gmail.com_Littel@yahoo.com",
                            FullName = "Hollie Murray",
                            Password = "sb4o1x",
                            PhoneNumber = "0114739383",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 8, 12, 51, 17, 661, DateTimeKind.Unspecified).AddTicks(4496),
                            UserName = "Joany28"
                        },
                        new
                        {
                            UserId = 17,
                            CreatedDate = new DateTime(2024, 9, 17, 10, 44, 40, 887, DateTimeKind.Unspecified).AddTicks(2442),
                            Email = "gmail.com87@yahoo.com",
                            FullName = "Forrest VonRueden",
                            Password = "qc9ftf",
                            PhoneNumber = "0751140931",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 17, 10, 44, 40, 887, DateTimeKind.Unspecified).AddTicks(2442),
                            UserName = "Johnathan34"
                        },
                        new
                        {
                            UserId = 18,
                            CreatedDate = new DateTime(2024, 9, 21, 17, 43, 21, 512, DateTimeKind.Unspecified).AddTicks(455),
                            Email = "gmail.com.Nicolas61@gmail.com",
                            FullName = "Lowell Kulas",
                            Password = "pssbut",
                            PhoneNumber = "0289278894",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 21, 17, 43, 21, 512, DateTimeKind.Unspecified).AddTicks(455),
                            UserName = "Mckayla62"
                        },
                        new
                        {
                            UserId = 19,
                            CreatedDate = new DateTime(2024, 9, 23, 5, 46, 14, 16, DateTimeKind.Unspecified).AddTicks(5797),
                            Email = "gmail.com.Beahan@hotmail.com",
                            FullName = "Bret Lueilwitz",
                            Password = "fkj61v",
                            PhoneNumber = "0402171798",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 23, 5, 46, 14, 16, DateTimeKind.Unspecified).AddTicks(5797),
                            UserName = "Franco.Glover18"
                        },
                        new
                        {
                            UserId = 20,
                            CreatedDate = new DateTime(2024, 9, 25, 14, 4, 10, 336, DateTimeKind.Unspecified).AddTicks(1381),
                            Email = "gmail.com.Durgan70@gmail.com",
                            FullName = "Watson Hyatt",
                            Password = "af2ilv",
                            PhoneNumber = "0845854562",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 25, 14, 4, 10, 336, DateTimeKind.Unspecified).AddTicks(1381),
                            UserName = "Lilyan.Russel81"
                        },
                        new
                        {
                            UserId = 21,
                            CreatedDate = new DateTime(2024, 9, 10, 14, 59, 39, 647, DateTimeKind.Unspecified).AddTicks(2880),
                            Email = "gmail.com10@gmail.com",
                            FullName = "Chester O'Connell",
                            Password = "bkd33c",
                            PhoneNumber = "0353214610",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 10, 14, 59, 39, 647, DateTimeKind.Unspecified).AddTicks(2880),
                            UserName = "Emie.Goldner"
                        },
                        new
                        {
                            UserId = 22,
                            CreatedDate = new DateTime(2024, 9, 23, 6, 26, 36, 722, DateTimeKind.Unspecified).AddTicks(1458),
                            Email = "gmail.com.Bogisich@hotmail.com",
                            FullName = "Abigail Hahn",
                            Password = "c0m44y",
                            PhoneNumber = "0290092921",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 23, 6, 26, 36, 722, DateTimeKind.Unspecified).AddTicks(1458),
                            UserName = "Marisa.Okuneva"
                        },
                        new
                        {
                            UserId = 23,
                            CreatedDate = new DateTime(2024, 9, 6, 16, 59, 9, 596, DateTimeKind.Unspecified).AddTicks(7885),
                            Email = "gmail.com59@hotmail.com",
                            FullName = "Eugenia O'Hara",
                            Password = "bvydnw",
                            PhoneNumber = "0751532454",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 6, 16, 59, 9, 596, DateTimeKind.Unspecified).AddTicks(7885),
                            UserName = "Judy_Miller"
                        },
                        new
                        {
                            UserId = 24,
                            CreatedDate = new DateTime(2024, 9, 22, 1, 18, 54, 584, DateTimeKind.Unspecified).AddTicks(8604),
                            Email = "gmail.com39@gmail.com",
                            FullName = "Abigale Wilderman",
                            Password = "flrqcl",
                            PhoneNumber = "0662379806",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 22, 1, 18, 54, 584, DateTimeKind.Unspecified).AddTicks(8604),
                            UserName = "Karl11"
                        },
                        new
                        {
                            UserId = 25,
                            CreatedDate = new DateTime(2024, 9, 16, 13, 25, 19, 69, DateTimeKind.Unspecified).AddTicks(4193),
                            Email = "gmail.com.Walsh@hotmail.com",
                            FullName = "Miracle Morar",
                            Password = "hixlox",
                            PhoneNumber = "0616986661",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 16, 13, 25, 19, 69, DateTimeKind.Unspecified).AddTicks(4193),
                            UserName = "Kaleb.Veum62"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.UserDepartment", b =>
                {
                    b.Property<int>("UserDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserDepartmentId"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserDepartmentId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDepartments");

                    b.HasData(
                        new
                        {
                            UserDepartmentId = 1,
                            DepartmentId = 1,
                            UserId = 3
                        },
                        new
                        {
                            UserDepartmentId = 2,
                            DepartmentId = 1,
                            UserId = 4
                        },
                        new
                        {
                            UserDepartmentId = 3,
                            DepartmentId = 2,
                            UserId = 3
                        },
                        new
                        {
                            UserDepartmentId = 4,
                            DepartmentId = 8,
                            UserId = 24
                        },
                        new
                        {
                            UserDepartmentId = 5,
                            DepartmentId = 5,
                            UserId = 17
                        },
                        new
                        {
                            UserDepartmentId = 6,
                            DepartmentId = 6,
                            UserId = 13
                        },
                        new
                        {
                            UserDepartmentId = 7,
                            DepartmentId = 8,
                            UserId = 6
                        },
                        new
                        {
                            UserDepartmentId = 8,
                            DepartmentId = 5,
                            UserId = 16
                        },
                        new
                        {
                            UserDepartmentId = 9,
                            DepartmentId = 7,
                            UserId = 22
                        },
                        new
                        {
                            UserDepartmentId = 10,
                            DepartmentId = 7,
                            UserId = 8
                        },
                        new
                        {
                            UserDepartmentId = 11,
                            DepartmentId = 2,
                            UserId = 14
                        },
                        new
                        {
                            UserDepartmentId = 12,
                            DepartmentId = 10,
                            UserId = 12
                        },
                        new
                        {
                            UserDepartmentId = 13,
                            DepartmentId = 10,
                            UserId = 10
                        },
                        new
                        {
                            UserDepartmentId = 14,
                            DepartmentId = 9,
                            UserId = 23
                        },
                        new
                        {
                            UserDepartmentId = 15,
                            DepartmentId = 10,
                            UserId = 13
                        },
                        new
                        {
                            UserDepartmentId = 16,
                            DepartmentId = 7,
                            UserId = 9
                        },
                        new
                        {
                            UserDepartmentId = 17,
                            DepartmentId = 3,
                            UserId = 20
                        },
                        new
                        {
                            UserDepartmentId = 18,
                            DepartmentId = 8,
                            UserId = 23
                        },
                        new
                        {
                            UserDepartmentId = 19,
                            DepartmentId = 8,
                            UserId = 25
                        },
                        new
                        {
                            UserDepartmentId = 20,
                            DepartmentId = 7,
                            UserId = 16
                        },
                        new
                        {
                            UserDepartmentId = 21,
                            DepartmentId = 1,
                            UserId = 24
                        },
                        new
                        {
                            UserDepartmentId = 22,
                            DepartmentId = 7,
                            UserId = 21
                        },
                        new
                        {
                            UserDepartmentId = 23,
                            DepartmentId = 3,
                            UserId = 10
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.Property<int>("VehicleSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleSessionId"));

                    b.Property<DateTime>("CheckinTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckoutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GateId")
                        .HasColumnType("int");

                    b.Property<int>("SecurityID")
                        .HasColumnType("int");

                    b.Property<int>("VisitDetailId")
                        .HasColumnType("int");

                    b.HasKey("VehicleSessionId");

                    b.HasIndex("GateId");

                    b.HasIndex("SecurityID");

                    b.HasIndex("VisitDetailId");

                    b.ToTable("VehicleSessions");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSessionImage", b =>
                {
                    b.Property<int>("VehicleSessionImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleSessionImageId"));

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleSessionId")
                        .HasColumnType("int");

                    b.Property<string>("VehicleSessionImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleSessionImageId");

                    b.HasIndex("VehicleSessionId");

                    b.ToTable("VehicleSessionImages");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.Property<int>("VisitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitId"));

                    b.Property<int>("AcceptLevel")
                        .HasColumnType("int");

                    b.Property<int>("CreateById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRegister")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UpdateById")
                        .HasColumnType("int");

                    b.Property<string>("VisitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitQuantity")
                        .HasColumnType("int");

                    b.Property<string>("VisitType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitId");

                    b.HasIndex("CreateById");

                    b.HasIndex("UpdateById");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.Property<int>("VisitDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitDetailId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ExpectedEndTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("ExpectedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ExpectedStartTime")
                        .HasColumnType("time");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.Property<int>("VisitorId")
                        .HasColumnType("int");

                    b.HasKey("VisitDetailId");

                    b.HasIndex("VisitId");

                    b.HasIndex("VisitorId");

                    b.ToTable("VisitDetails");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitProcess", b =>
                {
                    b.Property<int>("VisitProcessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitProcessId"));

                    b.Property<string>("DaysOfProcess")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ExpectedEndTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("ExpectedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ExpectedStartTime")
                        .HasColumnType("time");

                    b.Property<int>("ProcessId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.Property<int>("VisitQuantity")
                        .HasColumnType("int");

                    b.HasKey("VisitProcessId");

                    b.HasIndex("ProcessId");

                    b.HasIndex("VisitId");

                    b.ToTable("VisitProjects");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitType", b =>
                {
                    b.Property<int>("VisitTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitTypeId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VisitTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitTypeId");

                    b.ToTable("VisitTypes");

                    b.HasData(
                        new
                        {
                            VisitTypeId = 1,
                            Description = "Process trong tuần",
                            VisitTypeName = "ProcessWeek"
                        },
                        new
                        {
                            VisitTypeId = 2,
                            Description = "Process trong tháng",
                            VisitTypeName = "ProcessMonth"
                        },
                        new
                        {
                            VisitTypeId = 3,
                            Description = "Project",
                            VisitTypeName = "Project"
                        },
                        new
                        {
                            VisitTypeId = 4,
                            Description = "Visit được tạo bởi staff",
                            VisitTypeName = "VisitStaff"
                        },
                        new
                        {
                            VisitTypeId = 5,
                            Description = "Visit được tạo bởi security",
                            VisitTypeName = "VisitSecurity"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.Property<int>("VisitorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorId"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreateById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CredentialCardTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CredentialsCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("VisitorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitorId");

                    b.HasIndex("CreateById");

                    b.HasIndex("CredentialCardTypeId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Visitors");

                    b.HasData(
                        new
                        {
                            VisitorId = 1,
                            CompanyName = "Kuhic, O'Kon and Schultz",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 20, 1, 36, 43, 416, DateTimeKind.Unspecified).AddTicks(145),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "wrftyq1e7v",
                            PhoneNumber = "0734464693",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 20, 1, 36, 43, 416, DateTimeKind.Unspecified).AddTicks(145),
                            VisitorName = "Candice Bogisich"
                        },
                        new
                        {
                            VisitorId = 2,
                            CompanyName = "Mills, Watsica and Stark",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 2, 22, 16, 28, 397, DateTimeKind.Unspecified).AddTicks(4860),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "2vdvsi4a22",
                            PhoneNumber = "0636809047",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 2, 22, 16, 28, 397, DateTimeKind.Unspecified).AddTicks(4860),
                            VisitorName = "Mabel Kihn"
                        },
                        new
                        {
                            VisitorId = 3,
                            CompanyName = "Marks, Gleichner and Renner",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 20, 12, 33, 29, 576, DateTimeKind.Unspecified).AddTicks(6083),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "v8o9wfbue4",
                            PhoneNumber = "0157460540",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 20, 12, 33, 29, 576, DateTimeKind.Unspecified).AddTicks(6083),
                            VisitorName = "Stefan Balistreri"
                        },
                        new
                        {
                            VisitorId = 4,
                            CompanyName = "Fisher - Stamm",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 16, 2, 24, 6, 927, DateTimeKind.Unspecified).AddTicks(939),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "fegww4fpf1",
                            PhoneNumber = "0753370001",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 16, 2, 24, 6, 927, DateTimeKind.Unspecified).AddTicks(939),
                            VisitorName = "Milo Schulist"
                        },
                        new
                        {
                            VisitorId = 5,
                            CompanyName = "Casper, Boyer and Lesch",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 9, 4, 5, 58, 907, DateTimeKind.Unspecified).AddTicks(2287),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "00lqs54raa",
                            PhoneNumber = "0329159872",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 9, 4, 5, 58, 907, DateTimeKind.Unspecified).AddTicks(2287),
                            VisitorName = "Robyn Parisian"
                        },
                        new
                        {
                            VisitorId = 6,
                            CompanyName = "O'Reilly, Heller and Graham",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 16, 1, 18, 43, 564, DateTimeKind.Unspecified).AddTicks(698),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "72c986ayy0",
                            PhoneNumber = "0795334114",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 16, 1, 18, 43, 564, DateTimeKind.Unspecified).AddTicks(698),
                            VisitorName = "Jacky Towne"
                        },
                        new
                        {
                            VisitorId = 7,
                            CompanyName = "Blanda, Bode and Murphy",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 4, 0, 59, 16, 176, DateTimeKind.Unspecified).AddTicks(9833),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "tu7jupqtad",
                            PhoneNumber = "0755667049",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 4, 0, 59, 16, 176, DateTimeKind.Unspecified).AddTicks(9833),
                            VisitorName = "Buster Abshire"
                        },
                        new
                        {
                            VisitorId = 8,
                            CompanyName = "Labadie LLC",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 4, 7, 38, 2, 627, DateTimeKind.Unspecified).AddTicks(1474),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "gew0niqkg5",
                            PhoneNumber = "0307507461",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 4, 7, 38, 2, 627, DateTimeKind.Unspecified).AddTicks(1474),
                            VisitorName = "Jakayla Lind"
                        },
                        new
                        {
                            VisitorId = 9,
                            CompanyName = "Hartmann, Ondricka and Kohler",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 5, 18, 40, 42, 545, DateTimeKind.Unspecified).AddTicks(3586),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "yb7dx5vobn",
                            PhoneNumber = "0832041776",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 5, 18, 40, 42, 545, DateTimeKind.Unspecified).AddTicks(3586),
                            VisitorName = "Rylan Rippin"
                        },
                        new
                        {
                            VisitorId = 10,
                            CompanyName = "Hodkiewicz Group",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 4, 12, 29, 22, 958, DateTimeKind.Unspecified).AddTicks(2517),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "meboukxxgv",
                            PhoneNumber = "0493509614",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 4, 12, 29, 22, 958, DateTimeKind.Unspecified).AddTicks(2517),
                            VisitorName = "Sally Mohr"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.Property<int>("VisitorSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorSessionId"));

                    b.Property<DateTime>("CheckinTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CheckoutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GateInId")
                        .HasColumnType("int");

                    b.Property<int?>("GateOutId")
                        .HasColumnType("int");

                    b.Property<int>("QRCardId")
                        .HasColumnType("int");

                    b.Property<int>("SecurityInId")
                        .HasColumnType("int");

                    b.Property<int?>("SecurityOutId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitDetailId")
                        .HasColumnType("int");

                    b.HasKey("VisitorSessionId");

                    b.HasIndex("GateInId");

                    b.HasIndex("GateOutId");

                    b.HasIndex("QRCardId");

                    b.HasIndex("SecurityInId");

                    b.HasIndex("SecurityOutId");

                    b.HasIndex("VisitDetailId");

                    b.ToTable("VisitorSessions");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSessionsImage", b =>
                {
                    b.Property<int>("VisitorSessionsImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorSessionsImageId"));

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitorSessionId")
                        .HasColumnType("int");

                    b.HasKey("VisitorSessionsImageId");

                    b.HasIndex("VisitorSessionId");

                    b.ToTable("VisitorSessionsImages");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.NotificationUsers", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Notification", "Notification")
                        .WithMany("NotificationUsers")
                        .HasForeignKey("NotificationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Receiver")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Sender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Process", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.User", "User")
                        .WithMany("Project")
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.VisitType", "VisitType")
                        .WithMany("VisitTypes")
                        .HasForeignKey("VisitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("VisitType");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.QRCardStatus", "QRCardStatus")
                        .WithMany("QRCards")
                        .HasForeignKey("QRCardStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.QRCardType", "QRCardType")
                        .WithMany("QRCards")
                        .HasForeignKey("QRCardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QRCardStatus");

                    b.Navigation("QRCardType");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Role", "Role")
                        .WithMany("User")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.UserDepartment", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Department", "Department")
                        .WithMany("UserDepartment")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "User")
                        .WithMany("UserDepartment")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Gate", "Gate")
                        .WithMany("VehicleSession")
                        .HasForeignKey("GateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Security")
                        .WithMany("VehicleSession")
                        .HasForeignKey("SecurityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.VisitDetail", "VisitDetail")
                        .WithMany("VehicleSession")
                        .HasForeignKey("VisitDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gate");

                    b.Navigation("Security");

                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSessionImage", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.VehicleSession", "VehicleSession")
                        .WithMany("Images")
                        .HasForeignKey("VehicleSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.User", "CreateBy")
                        .WithMany("CreatedVisits")
                        .HasForeignKey("CreateById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "UpdateBy")
                        .WithMany("UpdatedVisits")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreateBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Visit", "Visit")
                        .WithMany("VisitDetail")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Visitor", "Visitor")
                        .WithMany("VisitDetail")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visit");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitProcess", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Process", "Process")
                        .WithMany("VisitProject")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Visit", "Visit")
                        .WithMany("VisitProject")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Process");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.UserDepartment", "UserDepartment")
                        .WithMany("Visitors")
                        .HasForeignKey("CreateById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.CredentialCardType", "CredentialCardType")
                        .WithMany("Visitor")
                        .HasForeignKey("CredentialCardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "User")
                        .WithOne("Visitor")
                        .HasForeignKey("SecurityGateApv.Domain.Models.Visitor", "UserId");

                    b.Navigation("CredentialCardType");

                    b.Navigation("User");

                    b.Navigation("UserDepartment");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Gate", "GateIn")
                        .WithMany("VisitorSessionsIn")
                        .HasForeignKey("GateInId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Gate", "GateOut")
                        .WithMany("VisitorSessionsOut")
                        .HasForeignKey("GateOutId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SecurityGateApv.Domain.Models.QRCard", "QRCard")
                        .WithMany("VisitorSession")
                        .HasForeignKey("QRCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "SecurityIn")
                        .WithMany("SecurityInSessions")
                        .HasForeignKey("SecurityInId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "SecurityOut")
                        .WithMany("SecurityOutSessions")
                        .HasForeignKey("SecurityOutId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SecurityGateApv.Domain.Models.VisitDetail", "VisitDetail")
                        .WithMany("VisitorSession")
                        .HasForeignKey("VisitDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GateIn");

                    b.Navigation("GateOut");

                    b.Navigation("QRCard");

                    b.Navigation("SecurityIn");

                    b.Navigation("SecurityOut");

                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSessionsImage", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.VisitorSession", "VisitorSession")
                        .WithMany("Images")
                        .HasForeignKey("VisitorSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.CredentialCardType", b =>
                {
                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Department", b =>
                {
                    b.Navigation("UserDepartment");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Gate", b =>
                {
                    b.Navigation("VehicleSession");

                    b.Navigation("VisitorSessionsIn");

                    b.Navigation("VisitorSessionsOut");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Notification", b =>
                {
                    b.Navigation("NotificationUsers");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Process", b =>
                {
                    b.Navigation("VisitProject");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardStatus", b =>
                {
                    b.Navigation("QRCards");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardType", b =>
                {
                    b.Navigation("QRCards");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Role", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.Navigation("CreatedVisits");

                    b.Navigation("Project");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("SecurityInSessions");

                    b.Navigation("SecurityOutSessions");

                    b.Navigation("SentNotifications");

                    b.Navigation("UpdatedVisits");

                    b.Navigation("UserDepartment");

                    b.Navigation("VehicleSession");

                    b.Navigation("Visitor")
                        .IsRequired();
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.UserDepartment", b =>
                {
                    b.Navigation("Visitors");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.Navigation("VisitDetail");

                    b.Navigation("VisitProject");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.Navigation("VehicleSession");

                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitType", b =>
                {
                    b.Navigation("VisitTypes");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
