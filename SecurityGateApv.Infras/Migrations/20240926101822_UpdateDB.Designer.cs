// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SecurityGateApv.Infras.DBContext;

#nullable disable

namespace SecurityGateApv.Infras.Migrations
{
    [DbContext(typeof(SecurityGateApvDbContext))]
    [Migration("20240926101822_UpdateDB")]
    partial class UpdateDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SecurityGateApv.Domain.Models.CredentialCardType", b =>
                {
                    b.Property<int>("CredentialCardTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CredentialCardTypeId"));

                    b.Property<string>("CredentialCardTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CredentialCardTypeId");

                    b.ToTable("CredentialCardTypes");

                    b.HasData(
                        new
                        {
                            CredentialCardTypeId = 1,
                            CredentialCardTypeName = "Giấy phép lái xe"
                        },
                        new
                        {
                            CredentialCardTypeId = 2,
                            CredentialCardTypeName = "Giấy phép lái xe"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<int>("AcceptLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            AcceptLevel = 4,
                            CreateDate = new DateTime(2024, 9, 12, 10, 39, 18, 935, DateTimeKind.Utc).AddTicks(5116),
                            DepartmentName = "Phòng Kế toán",
                            Description = "Provident corporis ipsum ut rerum earum eveniet unde.",
                            UpdatedDate = new DateTime(2024, 9, 12, 10, 39, 18, 935, DateTimeKind.Utc).AddTicks(5116)
                        },
                        new
                        {
                            DepartmentId = 2,
                            AcceptLevel = 3,
                            CreateDate = new DateTime(2024, 9, 5, 19, 8, 54, 401, DateTimeKind.Utc).AddTicks(5868),
                            DepartmentName = "Phòng R&D",
                            Description = "Et ullam voluptatibus ut et veniam omnis.",
                            UpdatedDate = new DateTime(2024, 9, 5, 19, 8, 54, 401, DateTimeKind.Utc).AddTicks(5868)
                        },
                        new
                        {
                            DepartmentId = 3,
                            AcceptLevel = 5,
                            CreateDate = new DateTime(2024, 9, 21, 20, 46, 8, 825, DateTimeKind.Utc).AddTicks(9876),
                            DepartmentName = "Phòng Marketing",
                            Description = "Sunt voluptatem temporibus quidem vero voluptatem dolores odit.",
                            UpdatedDate = new DateTime(2024, 9, 21, 20, 46, 8, 825, DateTimeKind.Utc).AddTicks(9876)
                        },
                        new
                        {
                            DepartmentId = 4,
                            AcceptLevel = 1,
                            CreateDate = new DateTime(2024, 9, 25, 23, 0, 16, 184, DateTimeKind.Utc).AddTicks(9151),
                            DepartmentName = "Phòng R&D",
                            Description = "Et sit ut veritatis quo molestiae occaecati sed incidunt.",
                            UpdatedDate = new DateTime(2024, 9, 25, 23, 0, 16, 184, DateTimeKind.Utc).AddTicks(9151)
                        },
                        new
                        {
                            DepartmentId = 5,
                            AcceptLevel = 4,
                            CreateDate = new DateTime(2024, 9, 24, 3, 37, 9, 723, DateTimeKind.Utc).AddTicks(5429),
                            DepartmentName = "Phòng Kinh doanh",
                            Description = "Labore cumque quo dolore tenetur velit atque.",
                            UpdatedDate = new DateTime(2024, 9, 24, 3, 37, 9, 723, DateTimeKind.Utc).AddTicks(5429)
                        },
                        new
                        {
                            DepartmentId = 6,
                            AcceptLevel = 3,
                            CreateDate = new DateTime(2024, 9, 26, 8, 25, 51, 490, DateTimeKind.Utc).AddTicks(261),
                            DepartmentName = "Phòng Marketing",
                            Description = "In corrupti accusantium ipsa in cumque.",
                            UpdatedDate = new DateTime(2024, 9, 26, 8, 25, 51, 490, DateTimeKind.Utc).AddTicks(261)
                        },
                        new
                        {
                            DepartmentId = 7,
                            AcceptLevel = 2,
                            CreateDate = new DateTime(2024, 9, 22, 9, 33, 6, 856, DateTimeKind.Utc).AddTicks(3259),
                            DepartmentName = "Phòng Hành chính",
                            Description = "Nulla dolores culpa velit laboriosam molestiae natus quas cupiditate.",
                            UpdatedDate = new DateTime(2024, 9, 22, 9, 33, 6, 856, DateTimeKind.Utc).AddTicks(3259)
                        },
                        new
                        {
                            DepartmentId = 8,
                            AcceptLevel = 5,
                            CreateDate = new DateTime(2024, 9, 9, 6, 28, 57, 94, DateTimeKind.Utc).AddTicks(1621),
                            DepartmentName = "Phòng Marketing",
                            Description = "Ad voluptas ea quos voluptas perferendis.",
                            UpdatedDate = new DateTime(2024, 9, 9, 6, 28, 57, 94, DateTimeKind.Utc).AddTicks(1621)
                        },
                        new
                        {
                            DepartmentId = 9,
                            AcceptLevel = 2,
                            CreateDate = new DateTime(2024, 9, 6, 8, 46, 44, 544, DateTimeKind.Utc).AddTicks(5399),
                            DepartmentName = "Phòng Nhân sự",
                            Description = "Dicta ex sed non deserunt et.",
                            UpdatedDate = new DateTime(2024, 9, 6, 8, 46, 44, 544, DateTimeKind.Utc).AddTicks(5399)
                        },
                        new
                        {
                            DepartmentId = 10,
                            AcceptLevel = 5,
                            CreateDate = new DateTime(2024, 9, 15, 18, 2, 25, 778, DateTimeKind.Utc).AddTicks(7334),
                            DepartmentName = "Phòng IT",
                            Description = "Et possimus dolore aut.",
                            UpdatedDate = new DateTime(2024, 9, 15, 18, 2, 25, 778, DateTimeKind.Utc).AddTicks(7334)
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Gate", b =>
                {
                    b.Property<int>("GateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GateId"));

                    b.Property<string>("GateCoordinate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GateId");

                    b.ToTable("Gates");

                    b.HasData(
                        new
                        {
                            GateId = 1,
                            GateCoordinate = "Ra vào trong ngày",
                            GateName = "Cổng 1"
                        },
                        new
                        {
                            GateId = 2,
                            GateCoordinate = "Ra vào trong ngày",
                            GateName = "Cổng 2"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.NotificationUsers", b =>
                {
                    b.Property<int>("NotificationUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationUserID"));

                    b.Property<int>("NotificationID")
                        .HasColumnType("int");

                    b.Property<bool>("ReadStatus")
                        .HasColumnType("bit");

                    b.Property<int>("ReceiverID")
                        .HasColumnType("int");

                    b.Property<int>("SenderID")
                        .HasColumnType("int");

                    b.HasKey("NotificationUserID");

                    b.HasIndex("NotificationID");

                    b.HasIndex("ReceiverID");

                    b.HasIndex("SenderID");

                    b.ToTable("NotificationUsers");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Process", b =>
                {
                    b.Property<int>("ProcessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProcessId"));

                    b.Property<int>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("VisitTypeId")
                        .HasColumnType("int");

                    b.HasKey("ProcessId");

                    b.HasIndex("CreateBy");

                    b.HasIndex("VisitTypeId");

                    b.ToTable("Processes");

                    b.HasData(
                        new
                        {
                            ProcessId = 1,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 24, 10, 18, 21, 706, DateTimeKind.Utc).AddTicks(8093),
                            Description = "",
                            ProcessName = "Refined Frozen Shoes",
                            Status = false,
                            VisitTypeId = 1
                        },
                        new
                        {
                            ProcessId = 2,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 24, 10, 18, 21, 706, DateTimeKind.Utc).AddTicks(9657),
                            Description = "",
                            ProcessName = "Generic Metal Shoes",
                            Status = true,
                            VisitTypeId = 1
                        },
                        new
                        {
                            ProcessId = 3,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 24, 10, 18, 21, 706, DateTimeKind.Utc).AddTicks(9697),
                            Description = "",
                            ProcessName = "Rustic Metal Pants",
                            Status = true,
                            VisitTypeId = 1
                        },
                        new
                        {
                            ProcessId = 4,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 24, 10, 18, 21, 706, DateTimeKind.Utc).AddTicks(9716),
                            Description = "",
                            ProcessName = "Practical Metal Car",
                            Status = true,
                            VisitTypeId = 1
                        },
                        new
                        {
                            ProcessId = 5,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 24, 10, 18, 21, 706, DateTimeKind.Utc).AddTicks(9734),
                            Description = "",
                            ProcessName = "Handmade Granite Gloves",
                            Status = false,
                            VisitTypeId = 1
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.Property<int>("QRCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardId"));

                    b.Property<Guid>("CardGuidId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastCancelDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QRCardStatusId")
                        .HasColumnType("int");

                    b.Property<int>("QRCardTypeId")
                        .HasColumnType("int");

                    b.HasKey("QRCardId");

                    b.HasIndex("QRCardStatusId");

                    b.HasIndex("QRCardTypeId");

                    b.ToTable("QRCards");

                    b.HasData(
                        new
                        {
                            QRCardId = 1,
                            CardGuidId = new Guid("d121bd3a-61d2-4b17-8768-0736f1320a09"),
                            CreateDate = new DateTime(2024, 9, 26, 17, 18, 21, 758, DateTimeKind.Local).AddTicks(4518),
                            LastCancelDate = new DateTime(2024, 10, 26, 17, 18, 21, 758, DateTimeKind.Local).AddTicks(4518),
                            QRCardStatusId = 1,
                            QRCardTypeId = 2
                        },
                        new
                        {
                            QRCardId = 2,
                            CardGuidId = new Guid("5ca35913-c384-4beb-9640-0ee291410326"),
                            CreateDate = new DateTime(2024, 9, 26, 17, 18, 21, 758, DateTimeKind.Local).AddTicks(4806),
                            LastCancelDate = new DateTime(2024, 10, 26, 17, 18, 21, 758, DateTimeKind.Local).AddTicks(4806),
                            QRCardStatusId = 2,
                            QRCardTypeId = 2
                        },
                        new
                        {
                            QRCardId = 3,
                            CardGuidId = new Guid("e71b0fde-687b-42ec-a5f8-d663f7d1f419"),
                            CreateDate = new DateTime(2024, 9, 26, 17, 18, 21, 758, DateTimeKind.Local).AddTicks(4830),
                            LastCancelDate = new DateTime(2024, 10, 26, 17, 18, 21, 758, DateTimeKind.Local).AddTicks(4830),
                            QRCardStatusId = 1,
                            QRCardTypeId = 2
                        },
                        new
                        {
                            QRCardId = 4,
                            CardGuidId = new Guid("8b069652-4ba1-4f78-b8c6-61f6d5799dc3"),
                            CreateDate = new DateTime(2024, 9, 26, 17, 18, 21, 758, DateTimeKind.Local).AddTicks(4846),
                            LastCancelDate = new DateTime(2024, 10, 26, 17, 18, 21, 758, DateTimeKind.Local).AddTicks(4846),
                            QRCardStatusId = 2,
                            QRCardTypeId = 2
                        },
                        new
                        {
                            QRCardId = 5,
                            CardGuidId = new Guid("e5d8b6e7-6b45-49ba-a74f-2da81e112e5c"),
                            CreateDate = new DateTime(2024, 9, 26, 17, 18, 21, 758, DateTimeKind.Local).AddTicks(4859),
                            LastCancelDate = new DateTime(2024, 10, 26, 17, 18, 21, 758, DateTimeKind.Local).AddTicks(4859),
                            QRCardStatusId = 2,
                            QRCardTypeId = 2
                        },
                        new
                        {
                            QRCardId = 6,
                            CardGuidId = new Guid("dac12ce8-adaf-4b0b-84b1-c42353e080be"),
                            CreateDate = new DateTime(2024, 9, 26, 17, 18, 21, 758, DateTimeKind.Local).AddTicks(4871),
                            LastCancelDate = new DateTime(2024, 10, 26, 17, 18, 21, 758, DateTimeKind.Local).AddTicks(4871),
                            QRCardStatusId = 2,
                            QRCardTypeId = 2
                        },
                        new
                        {
                            QRCardId = 7,
                            CardGuidId = new Guid("6c423121-1120-469b-ab03-b4fe5799d8dc"),
                            CreateDate = new DateTime(2024, 9, 26, 17, 18, 21, 758, DateTimeKind.Local).AddTicks(4904),
                            LastCancelDate = new DateTime(2024, 10, 26, 17, 18, 21, 758, DateTimeKind.Local).AddTicks(4904),
                            QRCardStatusId = 2,
                            QRCardTypeId = 1
                        },
                        new
                        {
                            QRCardId = 8,
                            CardGuidId = new Guid("f44dfe96-44c8-4b8b-ba77-d5d084060a8d"),
                            CreateDate = new DateTime(2024, 9, 26, 17, 18, 21, 758, DateTimeKind.Local).AddTicks(4916),
                            LastCancelDate = new DateTime(2024, 10, 26, 17, 18, 21, 758, DateTimeKind.Local).AddTicks(4916),
                            QRCardStatusId = 2,
                            QRCardTypeId = 2
                        },
                        new
                        {
                            QRCardId = 9,
                            CardGuidId = new Guid("d6c87007-0df4-4b9f-a2aa-e68a78501927"),
                            CreateDate = new DateTime(2024, 9, 26, 17, 18, 21, 758, DateTimeKind.Local).AddTicks(4928),
                            LastCancelDate = new DateTime(2024, 10, 26, 17, 18, 21, 758, DateTimeKind.Local).AddTicks(4928),
                            QRCardStatusId = 1,
                            QRCardTypeId = 1
                        },
                        new
                        {
                            QRCardId = 10,
                            CardGuidId = new Guid("3e6fb589-5785-40f1-806f-74f9e34a1295"),
                            CreateDate = new DateTime(2024, 9, 26, 17, 18, 21, 758, DateTimeKind.Local).AddTicks(4939),
                            LastCancelDate = new DateTime(2024, 10, 26, 17, 18, 21, 758, DateTimeKind.Local).AddTicks(4939),
                            QRCardStatusId = 1,
                            QRCardTypeId = 2
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardStatus", b =>
                {
                    b.Property<int>("QRCardStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardStatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusNumber")
                        .HasColumnType("int");

                    b.HasKey("QRCardStatusId");

                    b.ToTable("QRCardStatus");

                    b.HasData(
                        new
                        {
                            QRCardStatusId = 1,
                            StatusName = "Active",
                            StatusNumber = 1
                        },
                        new
                        {
                            QRCardStatusId = 2,
                            StatusName = "Inactive",
                            StatusNumber = 0
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardType", b =>
                {
                    b.Property<int>("QRCardTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardTypeId"));

                    b.Property<string>("CardTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QRCardTypeId");

                    b.ToTable("QRCardType");

                    b.HasData(
                        new
                        {
                            QRCardTypeId = 1,
                            CardTypeName = "Employee",
                            TypeDescription = "Employee QR Card"
                        },
                        new
                        {
                            QRCardTypeId = 2,
                            CardTypeName = "Visitor",
                            TypeDescription = "Visitor QR Card"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Description = "Quản lý toàn bộ hệ thống",
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            Description = "Quản lý toàn bộ công ty",
                            RoleName = "Manager"
                        },
                        new
                        {
                            RoleId = 3,
                            Description = "Quản lý toàn bộ phòng ban",
                            RoleName = "DepartmentManaager"
                        },
                        new
                        {
                            RoleId = 4,
                            Description = "Tạo và quản lý khách ra vào của phòng ban",
                            RoleName = "Staff"
                        },
                        new
                        {
                            RoleId = 5,
                            Description = "Quản lý khách ra vào tại cổng",
                            RoleName = "Security"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedDate = new DateTime(2024, 3, 26, 10, 18, 21, 697, DateTimeKind.Utc).AddTicks(4051),
                            Email = "admin1@example.com",
                            FullName = "Admin One",
                            Password = "123",
                            PhoneNumber = "0123456789",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 10, 18, 21, 697, DateTimeKind.Utc).AddTicks(4057),
                            UserName = "admin1"
                        },
                        new
                        {
                            UserId = 2,
                            CreatedDate = new DateTime(2024, 6, 26, 10, 18, 21, 697, DateTimeKind.Utc).AddTicks(4060),
                            Email = "manager1@example.com",
                            FullName = "Manager One",
                            Password = "123",
                            PhoneNumber = "0987654321",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 10, 18, 21, 697, DateTimeKind.Utc).AddTicks(4061),
                            UserName = "manager1"
                        },
                        new
                        {
                            UserId = 3,
                            CreatedDate = new DateTime(2024, 7, 26, 10, 18, 21, 697, DateTimeKind.Utc).AddTicks(4063),
                            Email = "employee1@example.com",
                            FullName = "Department Manager One",
                            Password = "123",
                            PhoneNumber = "0112223334",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 10, 18, 21, 697, DateTimeKind.Utc).AddTicks(4064),
                            UserName = "DM1"
                        },
                        new
                        {
                            UserId = 4,
                            CreatedDate = new DateTime(2024, 8, 26, 10, 18, 21, 697, DateTimeKind.Utc).AddTicks(4065),
                            Email = "hr1@example.com",
                            FullName = "Staff One",
                            Password = "123",
                            PhoneNumber = "0223334445",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 10, 18, 21, 697, DateTimeKind.Utc).AddTicks(4066),
                            UserName = "Staff1"
                        },
                        new
                        {
                            UserId = 5,
                            CreatedDate = new DateTime(2024, 5, 26, 10, 18, 21, 697, DateTimeKind.Utc).AddTicks(4067),
                            Email = "it1@example.com",
                            FullName = "Security One",
                            Password = "123",
                            PhoneNumber = "0334445556",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 10, 18, 21, 697, DateTimeKind.Utc).AddTicks(4068),
                            UserName = "Security1"
                        },
                        new
                        {
                            UserId = 6,
                            CreatedDate = new DateTime(2024, 9, 21, 11, 8, 27, 65, DateTimeKind.Unspecified).AddTicks(3812),
                            Email = "gmail.com19@yahoo.com",
                            FullName = "Nicola Schumm",
                            Password = "m28i1c",
                            PhoneNumber = "0941386371",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 21, 11, 8, 27, 65, DateTimeKind.Unspecified).AddTicks(3812),
                            UserName = "Juston.Luettgen15"
                        },
                        new
                        {
                            UserId = 7,
                            CreatedDate = new DateTime(2024, 9, 17, 3, 32, 12, 127, DateTimeKind.Unspecified).AddTicks(2928),
                            Email = "gmail.com.Lakin62@yahoo.com",
                            FullName = "Daryl Waters",
                            Password = "d3gsrl",
                            PhoneNumber = "0672315306",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 17, 3, 32, 12, 127, DateTimeKind.Unspecified).AddTicks(2928),
                            UserName = "Sonya_Koepp"
                        },
                        new
                        {
                            UserId = 8,
                            CreatedDate = new DateTime(2024, 9, 7, 6, 25, 11, 310, DateTimeKind.Unspecified).AddTicks(4040),
                            Email = "gmail.com_Murazik@hotmail.com",
                            FullName = "Emmitt Murphy",
                            Password = "2rtd22",
                            PhoneNumber = "0177873338",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 7, 6, 25, 11, 310, DateTimeKind.Unspecified).AddTicks(4040),
                            UserName = "Jamey.Price"
                        },
                        new
                        {
                            UserId = 9,
                            CreatedDate = new DateTime(2024, 9, 14, 20, 30, 45, 95, DateTimeKind.Unspecified).AddTicks(7659),
                            Email = "gmail.com.Kuhic@gmail.com",
                            FullName = "Kenyatta Marquardt",
                            Password = "mfay50",
                            PhoneNumber = "0538167012",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 14, 20, 30, 45, 95, DateTimeKind.Unspecified).AddTicks(7659),
                            UserName = "Valentina63"
                        },
                        new
                        {
                            UserId = 10,
                            CreatedDate = new DateTime(2024, 9, 7, 1, 5, 38, 275, DateTimeKind.Unspecified).AddTicks(2120),
                            Email = "gmail.com_Nienow80@yahoo.com",
                            FullName = "Fleta Kerluke",
                            Password = "uctitj",
                            PhoneNumber = "0635456333",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 7, 1, 5, 38, 275, DateTimeKind.Unspecified).AddTicks(2120),
                            UserName = "Rahul56"
                        },
                        new
                        {
                            UserId = 11,
                            CreatedDate = new DateTime(2024, 9, 25, 1, 54, 4, 880, DateTimeKind.Unspecified).AddTicks(3555),
                            Email = "gmail.com_Marvin0@yahoo.com",
                            FullName = "Julia Huel",
                            Password = "umekjm",
                            PhoneNumber = "0577056792",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 25, 1, 54, 4, 880, DateTimeKind.Unspecified).AddTicks(3555),
                            UserName = "Raven43"
                        },
                        new
                        {
                            UserId = 12,
                            CreatedDate = new DateTime(2024, 9, 4, 21, 1, 1, 310, DateTimeKind.Unspecified).AddTicks(6639),
                            Email = "gmail.com.Schumm@gmail.com",
                            FullName = "Jayden Schimmel",
                            Password = "ot7hr2",
                            PhoneNumber = "0904967901",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 4, 21, 1, 1, 310, DateTimeKind.Unspecified).AddTicks(6639),
                            UserName = "Lia_Ryan20"
                        },
                        new
                        {
                            UserId = 13,
                            CreatedDate = new DateTime(2024, 9, 9, 10, 5, 11, 874, DateTimeKind.Unspecified).AddTicks(6237),
                            Email = "gmail.com_Barton40@yahoo.com",
                            FullName = "Abbie Balistreri",
                            Password = "thja82",
                            PhoneNumber = "0639628462",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 9, 10, 5, 11, 874, DateTimeKind.Unspecified).AddTicks(6237),
                            UserName = "Angelita12"
                        },
                        new
                        {
                            UserId = 14,
                            CreatedDate = new DateTime(2024, 9, 10, 13, 38, 50, 825, DateTimeKind.Unspecified).AddTicks(7385),
                            Email = "gmail.com19@hotmail.com",
                            FullName = "Madisyn Jakubowski",
                            Password = "ph99l3",
                            PhoneNumber = "0136237305",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 10, 13, 38, 50, 825, DateTimeKind.Unspecified).AddTicks(7385),
                            UserName = "Danny79"
                        },
                        new
                        {
                            UserId = 15,
                            CreatedDate = new DateTime(2024, 9, 22, 12, 59, 58, 315, DateTimeKind.Unspecified).AddTicks(9739),
                            Email = "gmail.com.Olson@gmail.com",
                            FullName = "Curtis Aufderhar",
                            Password = "tssaaf",
                            PhoneNumber = "0955816379",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 22, 12, 59, 58, 315, DateTimeKind.Unspecified).AddTicks(9739),
                            UserName = "Lurline7"
                        },
                        new
                        {
                            UserId = 16,
                            CreatedDate = new DateTime(2024, 9, 1, 23, 12, 41, 853, DateTimeKind.Unspecified).AddTicks(9191),
                            Email = "gmail.com_Botsford68@yahoo.com",
                            FullName = "Justyn Schmidt",
                            Password = "7d29e4",
                            PhoneNumber = "0483274594",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 1, 23, 12, 41, 853, DateTimeKind.Unspecified).AddTicks(9191),
                            UserName = "Jerry16"
                        },
                        new
                        {
                            UserId = 17,
                            CreatedDate = new DateTime(2024, 9, 13, 7, 1, 21, 202, DateTimeKind.Unspecified).AddTicks(4719),
                            Email = "gmail.com.Kunze@hotmail.com",
                            FullName = "Zander Dooley",
                            Password = "s2f3m2",
                            PhoneNumber = "0102274509",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 13, 7, 1, 21, 202, DateTimeKind.Unspecified).AddTicks(4719),
                            UserName = "Letitia84"
                        },
                        new
                        {
                            UserId = 18,
                            CreatedDate = new DateTime(2024, 9, 22, 2, 16, 32, 897, DateTimeKind.Unspecified).AddTicks(5871),
                            Email = "gmail.com_Weissnat@yahoo.com",
                            FullName = "Ewell Ondricka",
                            Password = "ifhy3t",
                            PhoneNumber = "0356888970",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 22, 2, 16, 32, 897, DateTimeKind.Unspecified).AddTicks(5871),
                            UserName = "Arely.Mayer83"
                        },
                        new
                        {
                            UserId = 19,
                            CreatedDate = new DateTime(2024, 9, 1, 4, 26, 7, 573, DateTimeKind.Unspecified).AddTicks(2290),
                            Email = "gmail.com_Stokes@hotmail.com",
                            FullName = "Torey Champlin",
                            Password = "9w25et",
                            PhoneNumber = "0266539416",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 1, 4, 26, 7, 573, DateTimeKind.Unspecified).AddTicks(2290),
                            UserName = "Merritt61"
                        },
                        new
                        {
                            UserId = 20,
                            CreatedDate = new DateTime(2024, 9, 6, 6, 13, 24, 105, DateTimeKind.Unspecified).AddTicks(5298),
                            Email = "gmail.com.Haag23@yahoo.com",
                            FullName = "Lee Stiedemann",
                            Password = "pale0s",
                            PhoneNumber = "0317516408",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 6, 6, 13, 24, 105, DateTimeKind.Unspecified).AddTicks(5298),
                            UserName = "Elisabeth.Trantow88"
                        },
                        new
                        {
                            UserId = 21,
                            CreatedDate = new DateTime(2024, 9, 7, 11, 28, 14, 501, DateTimeKind.Unspecified).AddTicks(4269),
                            Email = "gmail.com.Dooley@gmail.com",
                            FullName = "Zachery Romaguera",
                            Password = "051cws",
                            PhoneNumber = "0668963461",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 7, 11, 28, 14, 501, DateTimeKind.Unspecified).AddTicks(4269),
                            UserName = "Glenna_Roberts"
                        },
                        new
                        {
                            UserId = 22,
                            CreatedDate = new DateTime(2024, 9, 19, 8, 15, 31, 921, DateTimeKind.Unspecified).AddTicks(6655),
                            Email = "gmail.com.Bartoletti30@gmail.com",
                            FullName = "Elisha Lowe",
                            Password = "idn1ua",
                            PhoneNumber = "0800530207",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 19, 8, 15, 31, 921, DateTimeKind.Unspecified).AddTicks(6655),
                            UserName = "Mertie.Schmitt4"
                        },
                        new
                        {
                            UserId = 23,
                            CreatedDate = new DateTime(2024, 9, 20, 15, 20, 17, 857, DateTimeKind.Unspecified).AddTicks(2920),
                            Email = "gmail.com3@yahoo.com",
                            FullName = "Tod Rohan",
                            Password = "zk0ia4",
                            PhoneNumber = "0112015621",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 20, 15, 20, 17, 857, DateTimeKind.Unspecified).AddTicks(2920),
                            UserName = "Cecilia94"
                        },
                        new
                        {
                            UserId = 24,
                            CreatedDate = new DateTime(2024, 9, 15, 18, 59, 57, 952, DateTimeKind.Unspecified).AddTicks(5910),
                            Email = "gmail.com_Johnston9@yahoo.com",
                            FullName = "Velda Murazik",
                            Password = "y9n7w7",
                            PhoneNumber = "0855406429",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 15, 18, 59, 57, 952, DateTimeKind.Unspecified).AddTicks(5910),
                            UserName = "Savion.Paucek28"
                        },
                        new
                        {
                            UserId = 25,
                            CreatedDate = new DateTime(2024, 9, 15, 5, 1, 54, 248, DateTimeKind.Unspecified).AddTicks(1170),
                            Email = "gmail.com.Predovic@gmail.com",
                            FullName = "Drake Greenfelder",
                            Password = "3kgfgo",
                            PhoneNumber = "0228389435",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 15, 5, 1, 54, 248, DateTimeKind.Unspecified).AddTicks(1170),
                            UserName = "Vernie79"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.UserDepartment", b =>
                {
                    b.Property<int>("UserDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserDepartmentId"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserDepartmentId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDepartments");

                    b.HasData(
                        new
                        {
                            UserDepartmentId = 1,
                            DepartmentId = 1,
                            UserId = 3
                        },
                        new
                        {
                            UserDepartmentId = 2,
                            DepartmentId = 1,
                            UserId = 4
                        },
                        new
                        {
                            UserDepartmentId = 3,
                            DepartmentId = 2,
                            UserId = 3
                        },
                        new
                        {
                            UserDepartmentId = 4,
                            DepartmentId = 2,
                            UserId = 22
                        },
                        new
                        {
                            UserDepartmentId = 5,
                            DepartmentId = 9,
                            UserId = 13
                        },
                        new
                        {
                            UserDepartmentId = 6,
                            DepartmentId = 6,
                            UserId = 9
                        },
                        new
                        {
                            UserDepartmentId = 7,
                            DepartmentId = 2,
                            UserId = 11
                        },
                        new
                        {
                            UserDepartmentId = 8,
                            DepartmentId = 9,
                            UserId = 20
                        },
                        new
                        {
                            UserDepartmentId = 9,
                            DepartmentId = 9,
                            UserId = 25
                        },
                        new
                        {
                            UserDepartmentId = 10,
                            DepartmentId = 1,
                            UserId = 18
                        },
                        new
                        {
                            UserDepartmentId = 11,
                            DepartmentId = 8,
                            UserId = 19
                        },
                        new
                        {
                            UserDepartmentId = 12,
                            DepartmentId = 1,
                            UserId = 6
                        },
                        new
                        {
                            UserDepartmentId = 13,
                            DepartmentId = 4,
                            UserId = 24
                        },
                        new
                        {
                            UserDepartmentId = 14,
                            DepartmentId = 5,
                            UserId = 6
                        },
                        new
                        {
                            UserDepartmentId = 15,
                            DepartmentId = 2,
                            UserId = 18
                        },
                        new
                        {
                            UserDepartmentId = 16,
                            DepartmentId = 8,
                            UserId = 21
                        },
                        new
                        {
                            UserDepartmentId = 17,
                            DepartmentId = 9,
                            UserId = 12
                        },
                        new
                        {
                            UserDepartmentId = 18,
                            DepartmentId = 2,
                            UserId = 21
                        },
                        new
                        {
                            UserDepartmentId = 19,
                            DepartmentId = 8,
                            UserId = 7
                        },
                        new
                        {
                            UserDepartmentId = 20,
                            DepartmentId = 10,
                            UserId = 17
                        },
                        new
                        {
                            UserDepartmentId = 21,
                            DepartmentId = 8,
                            UserId = 19
                        },
                        new
                        {
                            UserDepartmentId = 22,
                            DepartmentId = 8,
                            UserId = 10
                        },
                        new
                        {
                            UserDepartmentId = 23,
                            DepartmentId = 8,
                            UserId = 25
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.Property<int>("VehicleSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleSessionId"));

                    b.Property<DateTime>("CheckinTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckoutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GateId")
                        .HasColumnType("int");

                    b.Property<int>("SecurityID")
                        .HasColumnType("int");

                    b.Property<int>("VisitDetailId")
                        .HasColumnType("int");

                    b.HasKey("VehicleSessionId");

                    b.HasIndex("GateId");

                    b.HasIndex("SecurityID");

                    b.HasIndex("VisitDetailId");

                    b.ToTable("VehicleSessions");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSessionImage", b =>
                {
                    b.Property<int>("VehicleSessionImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleSessionImageId"));

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleSessionId")
                        .HasColumnType("int");

                    b.Property<string>("VehicleSessionImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleSessionImageId");

                    b.HasIndex("VehicleSessionId");

                    b.ToTable("VehicleSessionImages");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.Property<int>("VisitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitId"));

                    b.Property<int>("AcceptLevel")
                        .HasColumnType("int");

                    b.Property<int>("CreateById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRegister")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UpdateById")
                        .HasColumnType("int");

                    b.Property<string>("VisitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitQuantity")
                        .HasColumnType("int");

                    b.Property<string>("VisitType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitId");

                    b.HasIndex("CreateById");

                    b.HasIndex("UpdateById");

                    b.ToTable("Visits");

                    b.HasData(
                        new
                        {
                            VisitId = 1,
                            AcceptLevel = 1,
                            CreateById = 3,
                            DateRegister = new DateTime(2024, 9, 24, 17, 18, 21, 708, DateTimeKind.Local).AddTicks(1045),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        },
                        new
                        {
                            VisitId = 2,
                            AcceptLevel = 2,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 26, 10, 18, 21, 732, DateTimeKind.Utc).AddTicks(6354),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        },
                        new
                        {
                            VisitId = 3,
                            AcceptLevel = 2,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 26, 10, 18, 21, 732, DateTimeKind.Utc).AddTicks(6524),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        },
                        new
                        {
                            VisitId = 4,
                            AcceptLevel = 2,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 26, 10, 18, 21, 732, DateTimeKind.Utc).AddTicks(6543),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        },
                        new
                        {
                            VisitId = 5,
                            AcceptLevel = 2,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 26, 10, 18, 21, 732, DateTimeKind.Utc).AddTicks(6553),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        },
                        new
                        {
                            VisitId = 6,
                            AcceptLevel = 2,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 26, 10, 18, 21, 732, DateTimeKind.Utc).AddTicks(6561),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.Property<int>("VisitDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitDetailId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ExpectedEndTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("ExpectedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ExpectedStartTime")
                        .HasColumnType("time");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.Property<int>("VisitorId")
                        .HasColumnType("int");

                    b.HasKey("VisitDetailId");

                    b.HasIndex("VisitId");

                    b.HasIndex("VisitorId");

                    b.ToTable("VisitDetails");

                    b.HasData(
                        new
                        {
                            VisitDetailId = 1,
                            Description = "Facilis voluptas iure ut dolorum similique eum porro ipsum necessitatibus. Nulla eos consequatur fugit autem voluptas consequatur. Occaecati veritatis magni quas iusto. Quis nobis officia aut et aut ea. Eligendi alias recusandae optio sed magnam pariatur at qui eveniet.",
                            ExpectedEndDate = new DateTime(2024, 10, 25, 17, 18, 21, 720, DateTimeKind.Local).AddTicks(1551),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 25, 17, 18, 21, 720, DateTimeKind.Local).AddTicks(1496),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 1,
                            VisitorId = 2
                        },
                        new
                        {
                            VisitDetailId = 2,
                            Description = "Explicabo quibusdam expedita ut earum exercitationem optio earum reiciendis. Quaerat et laboriosam. Ipsa aut quisquam qui. Eos labore quos omnis veniam fugit qui autem aut facilis.",
                            ExpectedEndDate = new DateTime(2024, 10, 25, 17, 18, 21, 720, DateTimeKind.Local).AddTicks(2055),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 25, 17, 18, 21, 720, DateTimeKind.Local).AddTicks(2051),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 1,
                            VisitorId = 2
                        },
                        new
                        {
                            VisitDetailId = 3,
                            Description = "Perspiciatis sunt et exercitationem. Iusto et ad quam cum expedita ullam qui eveniet recusandae. Aut quia corporis sint et placeat officia voluptatibus.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 17, 18, 21, 733, DateTimeKind.Local).AddTicks(8895),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 17, 18, 21, 733, DateTimeKind.Local).AddTicks(8854),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 2,
                            VisitorId = 6
                        },
                        new
                        {
                            VisitDetailId = 4,
                            Description = "Sed dignissimos enim non. Qui fuga velit. Voluptas dolor ab sint nemo ipsa et autem. Est fuga tenetur. Ab enim expedita modi. Sunt fugit dolores nihil quia amet sit aperiam fugiat.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 17, 18, 21, 733, DateTimeKind.Local).AddTicks(9177),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 17, 18, 21, 733, DateTimeKind.Local).AddTicks(9175),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 2,
                            VisitorId = 5
                        },
                        new
                        {
                            VisitDetailId = 5,
                            Description = "Voluptates qui qui inventore non quam. Magnam aliquid sunt. Rerum explicabo eum consequatur dicta deserunt reprehenderit eum molestias pariatur. Eius ut deleniti et corrupti laboriosam id sint.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 17, 18, 21, 735, DateTimeKind.Local).AddTicks(530),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 17, 18, 21, 735, DateTimeKind.Local).AddTicks(502),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 2,
                            VisitorId = 7
                        },
                        new
                        {
                            VisitDetailId = 6,
                            Description = "Autem illo et. Eveniet consequuntur numquam quam nam mollitia. Sit adipisci ratione voluptatem vero rem est nisi laudantium.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 17, 18, 21, 735, DateTimeKind.Local).AddTicks(836),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 17, 18, 21, 735, DateTimeKind.Local).AddTicks(834),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 2,
                            VisitorId = 8
                        },
                        new
                        {
                            VisitDetailId = 7,
                            Description = "Et labore exercitationem consequuntur id quo placeat maiores. Sint voluptatem minus. Sunt possimus qui pariatur dolor enim necessitatibus quibusdam et rerum. Quam sequi libero ea.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 17, 18, 21, 736, DateTimeKind.Local).AddTicks(2372),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 17, 18, 21, 736, DateTimeKind.Local).AddTicks(2345),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 2,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitDetailId = 8,
                            Description = "Nostrum eveniet est adipisci laboriosam. Incidunt consequatur id autem et. Ut porro nihil aut magni a. Quisquam dolores aut sint ea doloremque facere. Magni consequatur sed. Deserunt vero vero et laborum quae iure voluptatem explicabo voluptas.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 17, 18, 21, 736, DateTimeKind.Local).AddTicks(2618),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 17, 18, 21, 736, DateTimeKind.Local).AddTicks(2617),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 2,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitDetailId = 9,
                            Description = "Natus qui a et aliquid autem voluptas nihil quam. Enim maiores qui accusamus laboriosam quidem. Dolorem quam nulla repellendus quas nihil. Voluptates eaque quam ullam cum. Voluptatem sit temporibus et totam dolores earum ipsam. Aut corporis nostrum harum totam inventore ipsam ratione cum.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 17, 18, 21, 737, DateTimeKind.Local).AddTicks(3652),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 17, 18, 21, 737, DateTimeKind.Local).AddTicks(3620),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 3,
                            VisitorId = 3
                        },
                        new
                        {
                            VisitDetailId = 10,
                            Description = "Libero facere dolorum nisi aut quo dicta corrupti in possimus. Est quaerat rerum et alias voluptatem a quis soluta. Accusamus unde tenetur quae autem et odit dicta quaerat. Recusandae facilis eaque ut voluptatem dicta dolorem. Libero doloremque sed omnis nostrum.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 17, 18, 21, 737, DateTimeKind.Local).AddTicks(3912),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 17, 18, 21, 737, DateTimeKind.Local).AddTicks(3910),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 3,
                            VisitorId = 9
                        },
                        new
                        {
                            VisitDetailId = 11,
                            Description = "Perspiciatis incidunt neque vel et nam iure alias doloribus. Amet aut sed exercitationem inventore. Eveniet amet ipsum ab a est et et et dolores. Asperiores sed aut similique sapiente voluptatum ipsum dolorem animi. Quia rerum in omnis sit libero fugit dolor magnam. Ipsa id consectetur repellendus.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 17, 18, 21, 738, DateTimeKind.Local).AddTicks(4468),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 17, 18, 21, 738, DateTimeKind.Local).AddTicks(4442),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 3,
                            VisitorId = 10
                        },
                        new
                        {
                            VisitDetailId = 12,
                            Description = "Necessitatibus esse unde non. Consequuntur voluptatum unde. Magni et tempore nemo. Animi eos et inventore alias ut aut consequuntur dolorem alias. Quidem saepe quia repellendus et vero iusto soluta voluptatem. Non officiis beatae exercitationem dolores vel.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 17, 18, 21, 738, DateTimeKind.Local).AddTicks(4713),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 17, 18, 21, 738, DateTimeKind.Local).AddTicks(4711),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 3,
                            VisitorId = 8
                        },
                        new
                        {
                            VisitDetailId = 13,
                            Description = "Non odit eos provident rerum. Laudantium in corporis. Vero repellendus nam facilis perferendis deleniti doloribus est ipsam sed. Dolor aspernatur repellat numquam cumque sed voluptatem et.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 17, 18, 21, 741, DateTimeKind.Local).AddTicks(2149),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 17, 18, 21, 741, DateTimeKind.Local).AddTicks(2109),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 3,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitDetailId = 14,
                            Description = "Error id voluptas aliquam. Dicta officiis dolores suscipit aut. Natus voluptatem provident nemo consectetur molestiae. Quaerat molestias molestiae placeat unde maxime omnis ut illum consequatur. Non fugit veniam minus enim modi sed consequatur totam possimus. Accusamus animi tempore deleniti nihil aut aut.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 17, 18, 21, 741, DateTimeKind.Local).AddTicks(2454),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 17, 18, 21, 741, DateTimeKind.Local).AddTicks(2451),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 3,
                            VisitorId = 10
                        },
                        new
                        {
                            VisitDetailId = 15,
                            Description = "Facilis vero aliquam rerum ratione neque. Voluptatem pariatur hic quae asperiores. Nulla qui consequuntur est non.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 17, 18, 21, 742, DateTimeKind.Local).AddTicks(4694),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 17, 18, 21, 742, DateTimeKind.Local).AddTicks(4658),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 9
                        },
                        new
                        {
                            VisitDetailId = 16,
                            Description = "Quisquam aliquam alias voluptatem tenetur saepe dolor ullam. Aut recusandae culpa magnam nisi. Quae vero id et dolorem doloribus qui voluptatem illum. Quos illum quo iure in quod earum. Quasi nesciunt quos in voluptate necessitatibus qui ut amet.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 17, 18, 21, 742, DateTimeKind.Local).AddTicks(4957),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 17, 18, 21, 742, DateTimeKind.Local).AddTicks(4954),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 6
                        },
                        new
                        {
                            VisitDetailId = 17,
                            Description = "Quia ullam minima et ab aut aut vel. Autem quia harum alias iusto dolores. Dolorem voluptatem minima quo nesciunt nobis. A a eligendi velit quae quisquam quod. Harum architecto dolore id est vero.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 17, 18, 21, 743, DateTimeKind.Local).AddTicks(5724),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 17, 18, 21, 743, DateTimeKind.Local).AddTicks(5694),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 10
                        },
                        new
                        {
                            VisitDetailId = 18,
                            Description = "Reprehenderit adipisci aperiam velit. Reprehenderit repellat suscipit quis est sequi hic. Ducimus et aliquam in in neque. Tenetur corporis labore sunt voluptatem eos. Et numquam et eum.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 17, 18, 21, 743, DateTimeKind.Local).AddTicks(6099),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 17, 18, 21, 743, DateTimeKind.Local).AddTicks(6097),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 5
                        },
                        new
                        {
                            VisitDetailId = 19,
                            Description = "Praesentium iusto rem. Sit quaerat assumenda illo tempora et et dolores consequatur. Eveniet minus amet placeat consectetur voluptatem possimus nobis. Accusamus sed officia nam.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 17, 18, 21, 744, DateTimeKind.Local).AddTicks(6924),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 17, 18, 21, 744, DateTimeKind.Local).AddTicks(6896),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 2
                        },
                        new
                        {
                            VisitDetailId = 20,
                            Description = "Suscipit minima dolor. Dolor deserunt a officiis. Rerum perspiciatis magnam. Cupiditate enim sapiente voluptatem. Id asperiores voluptatem non sit eius cum quam fuga.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 17, 18, 21, 744, DateTimeKind.Local).AddTicks(7140),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 17, 18, 21, 744, DateTimeKind.Local).AddTicks(7137),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 3
                        },
                        new
                        {
                            VisitDetailId = 21,
                            Description = "Aut quisquam aliquid est esse at. Voluptatem voluptas quod qui soluta occaecati. Non vitae architecto numquam harum non.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 17, 18, 21, 745, DateTimeKind.Local).AddTicks(8745),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 17, 18, 21, 745, DateTimeKind.Local).AddTicks(8717),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 5,
                            VisitorId = 6
                        },
                        new
                        {
                            VisitDetailId = 22,
                            Description = "Et excepturi nemo sequi. Velit saepe dicta ut mollitia non incidunt. Sed voluptas neque natus laboriosam nostrum deleniti neque. Veritatis excepturi facere atque. Qui facilis itaque voluptatum.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 17, 18, 21, 745, DateTimeKind.Local).AddTicks(8989),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 17, 18, 21, 745, DateTimeKind.Local).AddTicks(8987),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 5,
                            VisitorId = 7
                        },
                        new
                        {
                            VisitDetailId = 23,
                            Description = "Labore ut reiciendis ut tenetur sapiente libero consequatur. Possimus repellendus doloribus ullam ipsum vel. Consequuntur cumque dolorum est provident odio et maxime earum.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 17, 18, 21, 747, DateTimeKind.Local).AddTicks(624),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 17, 18, 21, 747, DateTimeKind.Local).AddTicks(590),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 5,
                            VisitorId = 3
                        },
                        new
                        {
                            VisitDetailId = 24,
                            Description = "Delectus dolorem maxime aspernatur dolor necessitatibus voluptatem aspernatur atque et. Modi sint vero debitis. Aspernatur eos nulla fugiat ad. Earum enim id ut eum dolor.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 17, 18, 21, 747, DateTimeKind.Local).AddTicks(862),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 17, 18, 21, 747, DateTimeKind.Local).AddTicks(860),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 5,
                            VisitorId = 7
                        },
                        new
                        {
                            VisitDetailId = 25,
                            Description = "Suscipit vel sunt sunt eaque eos velit quam commodi. Consequuntur quae numquam et officia inventore voluptas odit. Ab repellendus aspernatur perspiciatis quas atque repudiandae aut. Quis voluptate numquam quis corporis dolores molestiae suscipit. Sunt nam debitis consequuntur voluptates sit. Doloremque qui doloremque vitae veritatis et numquam.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 17, 18, 21, 748, DateTimeKind.Local).AddTicks(4551),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 17, 18, 21, 748, DateTimeKind.Local).AddTicks(4496),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 5,
                            VisitorId = 5
                        },
                        new
                        {
                            VisitDetailId = 26,
                            Description = "Quod inventore praesentium omnis earum soluta molestiae magnam iusto magni. Voluptatum minus quia rerum recusandae qui eos. Illo consequuntur nihil. Pariatur dignissimos praesentium aperiam omnis qui nostrum. Porro sunt quia. Dignissimos corporis numquam fuga sit.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 17, 18, 21, 748, DateTimeKind.Local).AddTicks(5025),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 17, 18, 21, 748, DateTimeKind.Local).AddTicks(5021),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 5,
                            VisitorId = 9
                        },
                        new
                        {
                            VisitDetailId = 27,
                            Description = "Qui iusto est totam repellat. Facilis velit consequuntur cumque eligendi quidem. Nostrum animi voluptatem cupiditate libero rerum. Sit quis voluptas est occaecati est. A minus sequi ratione qui consectetur sequi corrupti laudantium consequuntur.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 17, 18, 21, 750, DateTimeKind.Local).AddTicks(6177),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 17, 18, 21, 750, DateTimeKind.Local).AddTicks(6126),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 6,
                            VisitorId = 8
                        },
                        new
                        {
                            VisitDetailId = 28,
                            Description = "Fuga et officia et quibusdam sit aut quibusdam. Et qui tempore. In illo ad et expedita delectus vel et dolore et. Dolor quasi laudantium commodi quia. Ea eius impedit consequatur et repudiandae dolorem nulla maiores.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 17, 18, 21, 750, DateTimeKind.Local).AddTicks(6613),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 17, 18, 21, 750, DateTimeKind.Local).AddTicks(6609),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 6,
                            VisitorId = 3
                        },
                        new
                        {
                            VisitDetailId = 29,
                            Description = "Doloremque doloremque voluptas eius fuga rerum maiores fuga. Non eum dolor praesentium nisi et adipisci. Ducimus quis inventore molestiae. Aliquid ad eum aut nam aut vel ut. Aperiam ab eum et velit.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 17, 18, 21, 753, DateTimeKind.Local).AddTicks(9608),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 17, 18, 21, 753, DateTimeKind.Local).AddTicks(9549),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 6,
                            VisitorId = 7
                        },
                        new
                        {
                            VisitDetailId = 30,
                            Description = "Similique ad sint cum corrupti laudantium. Quis quam nihil corporis. Aut dolor aspernatur fugit unde eum dignissimos vel.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 17, 18, 21, 753, DateTimeKind.Local).AddTicks(9993),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 17, 18, 21, 753, DateTimeKind.Local).AddTicks(9989),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 6,
                            VisitorId = 4
                        },
                        new
                        {
                            VisitDetailId = 31,
                            Description = "Nisi quia sed. Dolores deleniti animi quas et libero culpa ratione aut recusandae. Sed quis veritatis laborum voluptates eligendi quod.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 17, 18, 21, 756, DateTimeKind.Local).AddTicks(1532),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 17, 18, 21, 756, DateTimeKind.Local).AddTicks(1476),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 6,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitDetailId = 32,
                            Description = "Minus asperiores ut debitis. Esse aspernatur exercitationem fuga dolores et amet. Sed deleniti in ex voluptas enim consectetur et. Beatae qui dolorum ipsa expedita suscipit.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 17, 18, 21, 756, DateTimeKind.Local).AddTicks(1948),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 17, 18, 21, 756, DateTimeKind.Local).AddTicks(1944),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 6,
                            VisitorId = 9
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitProcess", b =>
                {
                    b.Property<int>("VisitProcessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitProcessId"));

                    b.Property<string>("DaysOfProcess")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ExpectedEndTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("ExpectedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ExpectedStartTime")
                        .HasColumnType("time");

                    b.Property<int>("ProcessId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VisitId")
                        .HasColumnType("int");

                    b.Property<int>("VisitQuantity")
                        .HasColumnType("int");

                    b.HasKey("VisitProcessId");

                    b.HasIndex("ProcessId");

                    b.HasIndex("VisitId");

                    b.ToTable("VisitProjects");

                    b.HasData(
                        new
                        {
                            VisitProcessId = 1,
                            DaysOfProcess = "Monday",
                            ExpectedEndDate = new DateTime(2024, 10, 25, 17, 18, 21, 709, DateTimeKind.Local).AddTicks(2084),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 25, 17, 18, 21, 709, DateTimeKind.Local).AddTicks(2046),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            ProcessId = 1,
                            Status = "Processing",
                            VisitId = 1,
                            VisitQuantity = 2
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitType", b =>
                {
                    b.Property<int>("VisitTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitTypeId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VisitTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitTypeId");

                    b.ToTable("VisitTypes");

                    b.HasData(
                        new
                        {
                            VisitTypeId = 1,
                            Description = "Process trong tuần",
                            VisitTypeName = "ProcessWeek"
                        },
                        new
                        {
                            VisitTypeId = 2,
                            Description = "Process trong tháng",
                            VisitTypeName = "ProcessMonth"
                        },
                        new
                        {
                            VisitTypeId = 3,
                            Description = "Project",
                            VisitTypeName = "Project"
                        },
                        new
                        {
                            VisitTypeId = 4,
                            Description = "Visit được tạo bởi staff",
                            VisitTypeName = "VisitStaff"
                        },
                        new
                        {
                            VisitTypeId = 5,
                            Description = "Visit được tạo bởi security",
                            VisitTypeName = "VisitSecurity"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.Property<int>("VisitorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorId"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreateById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CredentialCardTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CredentialsCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("VisitorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitorId");

                    b.HasIndex("CreateById");

                    b.HasIndex("CredentialCardTypeId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Visitors");

                    b.HasData(
                        new
                        {
                            VisitorId = 1,
                            CompanyName = "Cummerata Inc",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 14, 18, 29, 7, 367, DateTimeKind.Unspecified).AddTicks(7069),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "sixdew9akn",
                            PhoneNumber = "0484931191",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 14, 18, 29, 7, 367, DateTimeKind.Unspecified).AddTicks(7069),
                            VisitorName = "Ethelyn Collier"
                        },
                        new
                        {
                            VisitorId = 2,
                            CompanyName = "Christiansen LLC",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 17, 2, 13, 27, 487, DateTimeKind.Unspecified).AddTicks(6013),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "sjfy1246ba",
                            PhoneNumber = "0400459689",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 17, 2, 13, 27, 487, DateTimeKind.Unspecified).AddTicks(6013),
                            VisitorName = "Alberto Harvey"
                        },
                        new
                        {
                            VisitorId = 3,
                            CompanyName = "Kris Inc",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 6, 22, 45, 15, 323, DateTimeKind.Unspecified).AddTicks(8296),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "l4n0s1cfcu",
                            PhoneNumber = "0738543481",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 6, 22, 45, 15, 323, DateTimeKind.Unspecified).AddTicks(8296),
                            VisitorName = "Samanta Schneider"
                        },
                        new
                        {
                            VisitorId = 4,
                            CompanyName = "Cummings, Beier and Spinka",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 1, 3, 48, 10, 393, DateTimeKind.Unspecified).AddTicks(7065),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "e347nmhru6",
                            PhoneNumber = "0236574185",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 1, 3, 48, 10, 393, DateTimeKind.Unspecified).AddTicks(7065),
                            VisitorName = "Adrianna Bruen"
                        },
                        new
                        {
                            VisitorId = 5,
                            CompanyName = "Bins LLC",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 3, 21, 27, 12, 207, DateTimeKind.Unspecified).AddTicks(5517),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "ph2qmc895u",
                            PhoneNumber = "0622483669",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 3, 21, 27, 12, 207, DateTimeKind.Unspecified).AddTicks(5517),
                            VisitorName = "Maxine Gutkowski"
                        },
                        new
                        {
                            VisitorId = 6,
                            CompanyName = "Tremblay, Boyle and Blanda",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 18, 15, 59, 45, 504, DateTimeKind.Unspecified).AddTicks(3243),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "vfz9udp928",
                            PhoneNumber = "0204637495",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 18, 15, 59, 45, 504, DateTimeKind.Unspecified).AddTicks(3243),
                            VisitorName = "Nadia Zboncak"
                        },
                        new
                        {
                            VisitorId = 7,
                            CompanyName = "Veum - Johnston",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 10, 1, 44, 0, 465, DateTimeKind.Unspecified).AddTicks(3877),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "9gpva451nn",
                            PhoneNumber = "0436330726",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 10, 1, 44, 0, 465, DateTimeKind.Unspecified).AddTicks(3877),
                            VisitorName = "Blaise Bartoletti"
                        },
                        new
                        {
                            VisitorId = 8,
                            CompanyName = "Monahan - Crist",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 2, 10, 29, 12, 787, DateTimeKind.Unspecified).AddTicks(1469),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "8h1js8kbty",
                            PhoneNumber = "0498457297",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 2, 10, 29, 12, 787, DateTimeKind.Unspecified).AddTicks(1469),
                            VisitorName = "Ardith Bins"
                        },
                        new
                        {
                            VisitorId = 9,
                            CompanyName = "Schiller - Hessel",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 24, 5, 44, 45, 57, DateTimeKind.Unspecified).AddTicks(5307),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "n7nyitw5n7",
                            PhoneNumber = "0123580206",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 24, 5, 44, 45, 57, DateTimeKind.Unspecified).AddTicks(5307),
                            VisitorName = "Timothy Wunsch"
                        },
                        new
                        {
                            VisitorId = 10,
                            CompanyName = "Jerde - Koelpin",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 18, 2, 11, 42, 994, DateTimeKind.Unspecified).AddTicks(2826),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "ggsr7fv7tm",
                            PhoneNumber = "0442672208",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 18, 2, 11, 42, 994, DateTimeKind.Unspecified).AddTicks(2826),
                            VisitorName = "Rosie Bailey"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.Property<int>("VisitorSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorSessionId"));

                    b.Property<DateTime>("CheckinTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CheckoutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GateInId")
                        .HasColumnType("int");

                    b.Property<int?>("GateOutId")
                        .HasColumnType("int");

                    b.Property<int>("QRCardId")
                        .HasColumnType("int");

                    b.Property<int>("SecurityInId")
                        .HasColumnType("int");

                    b.Property<int?>("SecurityOutId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitDetailId")
                        .HasColumnType("int");

                    b.HasKey("VisitorSessionId");

                    b.HasIndex("GateInId");

                    b.HasIndex("GateOutId");

                    b.HasIndex("QRCardId");

                    b.HasIndex("SecurityInId");

                    b.HasIndex("SecurityOutId");

                    b.HasIndex("VisitDetailId");

                    b.ToTable("VisitorSessions");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSessionsImage", b =>
                {
                    b.Property<int>("VisitorSessionsImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorSessionsImageId"));

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitorSessionId")
                        .HasColumnType("int");

                    b.HasKey("VisitorSessionsImageId");

                    b.HasIndex("VisitorSessionId");

                    b.ToTable("VisitorSessionsImages");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.NotificationUsers", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Notification", "Notification")
                        .WithMany("NotificationUsers")
                        .HasForeignKey("NotificationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Receiver")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Sender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Process", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.User", "User")
                        .WithMany("Project")
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.VisitType", "VisitType")
                        .WithMany("VisitTypes")
                        .HasForeignKey("VisitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("VisitType");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.QRCardStatus", "QRCardStatus")
                        .WithMany("QRCards")
                        .HasForeignKey("QRCardStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.QRCardType", "QRCardType")
                        .WithMany("QRCards")
                        .HasForeignKey("QRCardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QRCardStatus");

                    b.Navigation("QRCardType");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Role", "Role")
                        .WithMany("User")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.UserDepartment", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Department", "Department")
                        .WithMany("UserDepartment")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "User")
                        .WithMany("UserDepartment")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Gate", "Gate")
                        .WithMany("VehicleSession")
                        .HasForeignKey("GateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Security")
                        .WithMany("VehicleSession")
                        .HasForeignKey("SecurityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.VisitDetail", "VisitDetail")
                        .WithMany("VehicleSession")
                        .HasForeignKey("VisitDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gate");

                    b.Navigation("Security");

                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSessionImage", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.VehicleSession", "VehicleSession")
                        .WithMany("Images")
                        .HasForeignKey("VehicleSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.User", "CreateBy")
                        .WithMany("CreatedVisits")
                        .HasForeignKey("CreateById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "UpdateBy")
                        .WithMany("UpdatedVisits")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreateBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Visit", "Visit")
                        .WithMany("VisitDetail")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Visitor", "Visitor")
                        .WithMany("VisitDetail")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visit");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitProcess", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Process", "Process")
                        .WithMany("VisitProject")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Visit", "Visit")
                        .WithMany("VisitProject")
                        .HasForeignKey("VisitId");

                    b.Navigation("Process");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.UserDepartment", "UserDepartment")
                        .WithMany("Visitors")
                        .HasForeignKey("CreateById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.CredentialCardType", "CredentialCardType")
                        .WithMany("Visitor")
                        .HasForeignKey("CredentialCardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "User")
                        .WithOne("Visitor")
                        .HasForeignKey("SecurityGateApv.Domain.Models.Visitor", "UserId");

                    b.Navigation("CredentialCardType");

                    b.Navigation("User");

                    b.Navigation("UserDepartment");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Gate", "GateIn")
                        .WithMany("VisitorSessionsIn")
                        .HasForeignKey("GateInId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Gate", "GateOut")
                        .WithMany("VisitorSessionsOut")
                        .HasForeignKey("GateOutId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SecurityGateApv.Domain.Models.QRCard", "QRCard")
                        .WithMany("VisitorSession")
                        .HasForeignKey("QRCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "SecurityIn")
                        .WithMany("SecurityInSessions")
                        .HasForeignKey("SecurityInId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "SecurityOut")
                        .WithMany("SecurityOutSessions")
                        .HasForeignKey("SecurityOutId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SecurityGateApv.Domain.Models.VisitDetail", "VisitDetail")
                        .WithMany("VisitorSession")
                        .HasForeignKey("VisitDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GateIn");

                    b.Navigation("GateOut");

                    b.Navigation("QRCard");

                    b.Navigation("SecurityIn");

                    b.Navigation("SecurityOut");

                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSessionsImage", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.VisitorSession", "VisitorSession")
                        .WithMany("Images")
                        .HasForeignKey("VisitorSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.CredentialCardType", b =>
                {
                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Department", b =>
                {
                    b.Navigation("UserDepartment");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Gate", b =>
                {
                    b.Navigation("VehicleSession");

                    b.Navigation("VisitorSessionsIn");

                    b.Navigation("VisitorSessionsOut");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Notification", b =>
                {
                    b.Navigation("NotificationUsers");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Process", b =>
                {
                    b.Navigation("VisitProject");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardStatus", b =>
                {
                    b.Navigation("QRCards");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardType", b =>
                {
                    b.Navigation("QRCards");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Role", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.Navigation("CreatedVisits");

                    b.Navigation("Project");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("SecurityInSessions");

                    b.Navigation("SecurityOutSessions");

                    b.Navigation("SentNotifications");

                    b.Navigation("UpdatedVisits");

                    b.Navigation("UserDepartment");

                    b.Navigation("VehicleSession");

                    b.Navigation("Visitor")
                        .IsRequired();
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.UserDepartment", b =>
                {
                    b.Navigation("Visitors");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.Navigation("VisitDetail");

                    b.Navigation("VisitProject");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.Navigation("VehicleSession");

                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitType", b =>
                {
                    b.Navigation("VisitTypes");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
