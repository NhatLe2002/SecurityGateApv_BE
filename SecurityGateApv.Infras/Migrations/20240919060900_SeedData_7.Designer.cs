// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SecurityGateApv.Infras.DBContext;

#nullable disable

namespace SecurityGateApv.Infras.Migrations
{
    [DbContext(typeof(SecurityGateApvDbContext))]
    [Migration("20240919060900_SeedData_7")]
    partial class SeedData_7
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SecurityGateApv.Domain.Models.CredentialCardType", b =>
                {
                    b.Property<int>("CredentialCardTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CredentialCardTypeId"));

                    b.Property<string>("CredentialCardTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CredentialCardTypeId");

                    b.ToTable("CredentialCardTypes");

                    b.HasData(
                        new
                        {
                            CredentialCardTypeId = 1,
                            CredentialCardTypeName = "Giấy phép lái xe"
                        },
                        new
                        {
                            CredentialCardTypeId = 2,
                            CredentialCardTypeName = "Căn cước công dân"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<int>("AcceptLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            AcceptLevel = 2,
                            CreateDate = new DateTime(2024, 9, 4, 8, 50, 49, 194, DateTimeKind.Utc).AddTicks(891),
                            DepartmentName = "Phòng Sản xuất",
                            Description = "Distinctio est cum sit ipsum accusantium.",
                            UpdatedDate = new DateTime(2024, 9, 4, 8, 50, 49, 194, DateTimeKind.Utc).AddTicks(891)
                        },
                        new
                        {
                            DepartmentId = 2,
                            AcceptLevel = 4,
                            CreateDate = new DateTime(2024, 9, 16, 13, 1, 52, 259, DateTimeKind.Utc).AddTicks(1947),
                            DepartmentName = "Phòng Sản xuất",
                            Description = "Rem beatae fugit autem autem.",
                            UpdatedDate = new DateTime(2024, 9, 16, 13, 1, 52, 259, DateTimeKind.Utc).AddTicks(1947)
                        },
                        new
                        {
                            DepartmentId = 3,
                            AcceptLevel = 5,
                            CreateDate = new DateTime(2024, 9, 15, 9, 25, 14, 97, DateTimeKind.Utc).AddTicks(3692),
                            DepartmentName = "Phòng Chăm sóc khách hàng",
                            Description = "Adipisci perspiciatis quia quaerat.",
                            UpdatedDate = new DateTime(2024, 9, 15, 9, 25, 14, 97, DateTimeKind.Utc).AddTicks(3692)
                        },
                        new
                        {
                            DepartmentId = 4,
                            AcceptLevel = 3,
                            CreateDate = new DateTime(2024, 9, 10, 20, 42, 32, 528, DateTimeKind.Utc).AddTicks(586),
                            DepartmentName = "Phòng Kế toán",
                            Description = "Beatae voluptatem ullam porro et optio.",
                            UpdatedDate = new DateTime(2024, 9, 10, 20, 42, 32, 528, DateTimeKind.Utc).AddTicks(586)
                        },
                        new
                        {
                            DepartmentId = 5,
                            AcceptLevel = 5,
                            CreateDate = new DateTime(2024, 9, 9, 10, 14, 47, 749, DateTimeKind.Utc).AddTicks(4095),
                            DepartmentName = "Phòng Kế toán",
                            Description = "Incidunt animi nostrum ratione saepe corrupti aut libero quis quod.",
                            UpdatedDate = new DateTime(2024, 9, 9, 10, 14, 47, 749, DateTimeKind.Utc).AddTicks(4095)
                        },
                        new
                        {
                            DepartmentId = 6,
                            AcceptLevel = 5,
                            CreateDate = new DateTime(2024, 9, 12, 14, 57, 43, 322, DateTimeKind.Utc).AddTicks(194),
                            DepartmentName = "Phòng Hành chính",
                            Description = "Exercitationem maiores inventore aliquam ullam eum et.",
                            UpdatedDate = new DateTime(2024, 9, 12, 14, 57, 43, 322, DateTimeKind.Utc).AddTicks(194)
                        },
                        new
                        {
                            DepartmentId = 7,
                            AcceptLevel = 4,
                            CreateDate = new DateTime(2024, 9, 8, 15, 47, 19, 689, DateTimeKind.Utc).AddTicks(1622),
                            DepartmentName = "Phòng Chăm sóc khách hàng",
                            Description = "Labore consequatur ut autem esse labore.",
                            UpdatedDate = new DateTime(2024, 9, 8, 15, 47, 19, 689, DateTimeKind.Utc).AddTicks(1622)
                        },
                        new
                        {
                            DepartmentId = 8,
                            AcceptLevel = 3,
                            CreateDate = new DateTime(2024, 9, 9, 18, 52, 32, 610, DateTimeKind.Utc).AddTicks(1617),
                            DepartmentName = "Phòng IT",
                            Description = "Harum porro deleniti quia.",
                            UpdatedDate = new DateTime(2024, 9, 9, 18, 52, 32, 610, DateTimeKind.Utc).AddTicks(1617)
                        },
                        new
                        {
                            DepartmentId = 9,
                            AcceptLevel = 1,
                            CreateDate = new DateTime(2024, 9, 8, 7, 28, 29, 229, DateTimeKind.Utc).AddTicks(4555),
                            DepartmentName = "Phòng Kế toán",
                            Description = "Et praesentium velit.",
                            UpdatedDate = new DateTime(2024, 9, 8, 7, 28, 29, 229, DateTimeKind.Utc).AddTicks(4555)
                        },
                        new
                        {
                            DepartmentId = 10,
                            AcceptLevel = 3,
                            CreateDate = new DateTime(2024, 9, 6, 1, 57, 6, 697, DateTimeKind.Utc).AddTicks(5916),
                            DepartmentName = "Phòng Nhân sự",
                            Description = "Rem pariatur voluptatem voluptatem harum temporibus aliquam quibusdam velit.",
                            UpdatedDate = new DateTime(2024, 9, 6, 1, 57, 6, 697, DateTimeKind.Utc).AddTicks(5916)
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.DepartmentReason", b =>
                {
                    b.Property<int>("DepartmentReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentReasonId"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReasonId")
                        .HasColumnType("int");

                    b.HasKey("DepartmentReasonId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ReasonId");

                    b.ToTable("DepartmentReasons");

                    b.HasData(
                        new
                        {
                            DepartmentReasonId = 1,
                            DepartmentId = 9,
                            Description = "Sunt sed quos qui necessitatibus molestiae dolor cupiditate eum.",
                            Name = "Tasty Wooden Pizza",
                            ReasonId = 2
                        },
                        new
                        {
                            DepartmentReasonId = 2,
                            DepartmentId = 4,
                            Description = "Praesentium sed sapiente ut corrupti consequatur non dignissimos voluptas.",
                            Name = "Gorgeous Concrete Gloves",
                            ReasonId = 5
                        },
                        new
                        {
                            DepartmentReasonId = 3,
                            DepartmentId = 2,
                            Description = "In vel iusto reiciendis inventore dignissimos qui esse.",
                            Name = "Ergonomic Cotton Pants",
                            ReasonId = 2
                        },
                        new
                        {
                            DepartmentReasonId = 4,
                            DepartmentId = 3,
                            Description = "Quo quis expedita voluptas delectus veritatis debitis.",
                            Name = "Fantastic Rubber Salad",
                            ReasonId = 1
                        },
                        new
                        {
                            DepartmentReasonId = 5,
                            DepartmentId = 1,
                            Description = "Repellendus autem id odio velit accusantium aliquam.",
                            Name = "Sleek Metal Towels",
                            ReasonId = 4
                        },
                        new
                        {
                            DepartmentReasonId = 6,
                            DepartmentId = 4,
                            Description = "Minus sed fuga officiis temporibus aut tempora ut sit quo.",
                            Name = "Rustic Fresh Cheese",
                            ReasonId = 1
                        },
                        new
                        {
                            DepartmentReasonId = 7,
                            DepartmentId = 8,
                            Description = "Reprehenderit consequuntur ea inventore voluptatibus quia quaerat.",
                            Name = "Small Rubber Computer",
                            ReasonId = 5
                        },
                        new
                        {
                            DepartmentReasonId = 8,
                            DepartmentId = 10,
                            Description = "Nam doloremque voluptatem autem.",
                            Name = "Rustic Plastic Ball",
                            ReasonId = 2
                        },
                        new
                        {
                            DepartmentReasonId = 9,
                            DepartmentId = 5,
                            Description = "Dolores animi at molestiae ut porro.",
                            Name = "Tasty Fresh Pants",
                            ReasonId = 1
                        },
                        new
                        {
                            DepartmentReasonId = 10,
                            DepartmentId = 7,
                            Description = "Sed vel facere atque incidunt.",
                            Name = "Unbranded Concrete Shoes",
                            ReasonId = 4
                        },
                        new
                        {
                            DepartmentReasonId = 11,
                            DepartmentId = 3,
                            Description = "Veniam sunt iusto quo rerum ut reprehenderit sunt tenetur placeat.",
                            Name = "Incredible Plastic Pizza",
                            ReasonId = 2
                        },
                        new
                        {
                            DepartmentReasonId = 12,
                            DepartmentId = 4,
                            Description = "Doloribus sit quia similique eos accusamus enim minus.",
                            Name = "Refined Wooden Mouse",
                            ReasonId = 4
                        },
                        new
                        {
                            DepartmentReasonId = 13,
                            DepartmentId = 2,
                            Description = "Autem iusto at maxime fugiat id.",
                            Name = "Unbranded Steel Pizza",
                            ReasonId = 3
                        },
                        new
                        {
                            DepartmentReasonId = 14,
                            DepartmentId = 8,
                            Description = "Molestiae voluptatibus est autem amet recusandae.",
                            Name = "Intelligent Metal Shoes",
                            ReasonId = 4
                        },
                        new
                        {
                            DepartmentReasonId = 15,
                            DepartmentId = 5,
                            Description = "Exercitationem numquam culpa sit velit sit.",
                            Name = "Tasty Frozen Car",
                            ReasonId = 1
                        },
                        new
                        {
                            DepartmentReasonId = 16,
                            DepartmentId = 1,
                            Description = "Recusandae autem saepe.",
                            Name = "Unbranded Frozen Salad",
                            ReasonId = 4
                        },
                        new
                        {
                            DepartmentReasonId = 17,
                            DepartmentId = 1,
                            Description = "Natus numquam sapiente et beatae ipsum sint debitis expedita.",
                            Name = "Small Frozen Chips",
                            ReasonId = 3
                        },
                        new
                        {
                            DepartmentReasonId = 18,
                            DepartmentId = 8,
                            Description = "Aut quis ut ut.",
                            Name = "Tasty Fresh Bike",
                            ReasonId = 3
                        },
                        new
                        {
                            DepartmentReasonId = 19,
                            DepartmentId = 3,
                            Description = "Perspiciatis rerum quae molestiae.",
                            Name = "Tasty Granite Tuna",
                            ReasonId = 3
                        },
                        new
                        {
                            DepartmentReasonId = 20,
                            DepartmentId = 2,
                            Description = "Doloremque rerum distinctio.",
                            Name = "Practical Plastic Shirt",
                            ReasonId = 3
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Gate", b =>
                {
                    b.Property<int>("GateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GateId"));

                    b.Property<string>("GateCoordinate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GateId");

                    b.ToTable("Gates");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.NotificationUsers", b =>
                {
                    b.Property<int>("NotificationUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationUserID"));

                    b.Property<int>("NotificationID")
                        .HasColumnType("int");

                    b.Property<bool>("ReadStatus")
                        .HasColumnType("bit");

                    b.Property<int>("ReceiverID")
                        .HasColumnType("int");

                    b.Property<int>("SenderID")
                        .HasColumnType("int");

                    b.HasKey("NotificationUserID");

                    b.HasIndex("NotificationID");

                    b.HasIndex("ReceiverID");

                    b.HasIndex("SenderID");

                    b.ToTable("NotificationUsers");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<int>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ProjectId");

                    b.HasIndex("CreateBy");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 11, 0, 30, 58, 134, DateTimeKind.Unspecified).AddTicks(3836),
                            ProjectName = "Practical Steel Towels",
                            Status = true
                        },
                        new
                        {
                            ProjectId = 2,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 15, 7, 40, 47, 921, DateTimeKind.Unspecified).AddTicks(1512),
                            ProjectName = "Awesome Fresh Pants",
                            Status = false
                        },
                        new
                        {
                            ProjectId = 3,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 3, 23, 1, 28, 23, DateTimeKind.Unspecified).AddTicks(5312),
                            ProjectName = "Handcrafted Rubber Soap",
                            Status = true
                        },
                        new
                        {
                            ProjectId = 4,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 2, 0, 29, 40, 568, DateTimeKind.Unspecified).AddTicks(1793),
                            ProjectName = "Ergonomic Granite Mouse",
                            Status = true
                        },
                        new
                        {
                            ProjectId = 5,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 18, 8, 2, 27, 742, DateTimeKind.Unspecified).AddTicks(4526),
                            ProjectName = "Fantastic Cotton Tuna",
                            Status = true
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.Property<int>("QRCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardId"));

                    b.Property<Guid>("CardGuidId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastCancelDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QRCardStatusId")
                        .HasColumnType("int");

                    b.Property<int>("QRCardTypeId")
                        .HasColumnType("int");

                    b.HasKey("QRCardId");

                    b.HasIndex("QRCardStatusId");

                    b.HasIndex("QRCardTypeId");

                    b.ToTable("QRCards");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardStatus", b =>
                {
                    b.Property<int>("QRCardStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardStatusId"));

                    b.Property<int>("StatusName")
                        .HasColumnType("int");

                    b.Property<int>("StatusNumber")
                        .HasColumnType("int");

                    b.HasKey("QRCardStatusId");

                    b.ToTable("QRCardStatus");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardType", b =>
                {
                    b.Property<int>("QRCardTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardTypeId"));

                    b.Property<string>("CardTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QRCardTypeId");

                    b.ToTable("QRCardType");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Reason", b =>
                {
                    b.Property<int>("ReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReasonId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReasonId");

                    b.ToTable("Reasons");

                    b.HasData(
                        new
                        {
                            ReasonId = 1,
                            Description = "Quo libero ut aut in dolores.",
                            ReasonName = "Gorgeous Rubber Chair"
                        },
                        new
                        {
                            ReasonId = 2,
                            Description = "Architecto exercitationem unde eum in voluptatem impedit.",
                            ReasonName = "Incredible Rubber Chair"
                        },
                        new
                        {
                            ReasonId = 3,
                            Description = "Et provident quia et dolorum adipisci praesentium recusandae nostrum.",
                            ReasonName = "Rustic Frozen Mouse"
                        },
                        new
                        {
                            ReasonId = 4,
                            Description = "Omnis est voluptatem.",
                            ReasonName = "Ergonomic Granite Gloves"
                        },
                        new
                        {
                            ReasonId = 5,
                            Description = "Atque et cupiditate incidunt ratione.",
                            ReasonName = "Intelligent Steel Mouse"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Description = "Quản lý toàn bộ hệ thống",
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            Description = "Quản lý toàn bộ công ty",
                            RoleName = "Manager"
                        },
                        new
                        {
                            RoleId = 3,
                            Description = "Quản lý toàn bộ phòng ban",
                            RoleName = "DepartmentManaager"
                        },
                        new
                        {
                            RoleId = 4,
                            Description = "Tạo và quản lý khách ra vào của phòng ban",
                            RoleName = "Staff"
                        },
                        new
                        {
                            RoleId = 5,
                            Description = "Quản lý khách ra vào tại cổng",
                            RoleName = "Security"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedDate = new DateTime(2024, 3, 19, 6, 9, 0, 423, DateTimeKind.Utc).AddTicks(4804),
                            Email = "admin1@example.com",
                            FullName = "Admin One",
                            Password = "123",
                            PhoneNumber = "0123456789",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 19, 6, 9, 0, 423, DateTimeKind.Utc).AddTicks(4814),
                            UserName = "admin1"
                        },
                        new
                        {
                            UserId = 2,
                            CreatedDate = new DateTime(2024, 6, 19, 6, 9, 0, 423, DateTimeKind.Utc).AddTicks(4817),
                            Email = "manager1@example.com",
                            FullName = "Manager One",
                            Password = "123",
                            PhoneNumber = "0987654321",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 19, 6, 9, 0, 423, DateTimeKind.Utc).AddTicks(4818),
                            UserName = "manager1"
                        },
                        new
                        {
                            UserId = 3,
                            CreatedDate = new DateTime(2024, 7, 19, 6, 9, 0, 423, DateTimeKind.Utc).AddTicks(4819),
                            Email = "employee1@example.com",
                            FullName = "Department Manager One",
                            Password = "123",
                            PhoneNumber = "0112223334",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 19, 6, 9, 0, 423, DateTimeKind.Utc).AddTicks(4820),
                            UserName = "DM1"
                        },
                        new
                        {
                            UserId = 4,
                            CreatedDate = new DateTime(2024, 8, 19, 6, 9, 0, 423, DateTimeKind.Utc).AddTicks(4830),
                            Email = "hr1@example.com",
                            FullName = "Staff One",
                            Password = "123",
                            PhoneNumber = "0223334445",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 19, 6, 9, 0, 423, DateTimeKind.Utc).AddTicks(4831),
                            UserName = "Staff1"
                        },
                        new
                        {
                            UserId = 5,
                            CreatedDate = new DateTime(2024, 5, 19, 6, 9, 0, 423, DateTimeKind.Utc).AddTicks(4832),
                            Email = "it1@example.com",
                            FullName = "Security One",
                            Password = "123",
                            PhoneNumber = "0334445556",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 19, 6, 9, 0, 423, DateTimeKind.Utc).AddTicks(4833),
                            UserName = "Security1"
                        },
                        new
                        {
                            UserId = 6,
                            CreatedDate = new DateTime(2024, 9, 18, 3, 12, 29, 616, DateTimeKind.Unspecified).AddTicks(2783),
                            Email = "gmail.com_Runolfsson7@hotmail.com",
                            FullName = "Khalid Klein",
                            Password = "ooofx7",
                            PhoneNumber = "0527926609",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 18, 3, 12, 29, 616, DateTimeKind.Unspecified).AddTicks(2783),
                            UserName = "Elva54"
                        },
                        new
                        {
                            UserId = 7,
                            CreatedDate = new DateTime(2024, 9, 14, 14, 57, 29, 325, DateTimeKind.Unspecified).AddTicks(1333),
                            Email = "gmail.com_McCullough@gmail.com",
                            FullName = "Katherine Jacobson",
                            Password = "a5up34",
                            PhoneNumber = "0653494478",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 14, 14, 57, 29, 325, DateTimeKind.Unspecified).AddTicks(1333),
                            UserName = "Malinda.Friesen39"
                        },
                        new
                        {
                            UserId = 8,
                            CreatedDate = new DateTime(2024, 9, 1, 11, 56, 48, 565, DateTimeKind.Unspecified).AddTicks(3492),
                            Email = "gmail.com_Haley@gmail.com",
                            FullName = "Emmett Paucek",
                            Password = "icdxzr",
                            PhoneNumber = "0568190871",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 1, 11, 56, 48, 565, DateTimeKind.Unspecified).AddTicks(3492),
                            UserName = "Addie_Greenholt70"
                        },
                        new
                        {
                            UserId = 9,
                            CreatedDate = new DateTime(2024, 9, 14, 21, 47, 6, 428, DateTimeKind.Unspecified).AddTicks(648),
                            Email = "gmail.com_Jones97@hotmail.com",
                            FullName = "Lorine Gorczany",
                            Password = "af6leg",
                            PhoneNumber = "0904913235",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 14, 21, 47, 6, 428, DateTimeKind.Unspecified).AddTicks(648),
                            UserName = "Declan_Maggio98"
                        },
                        new
                        {
                            UserId = 10,
                            CreatedDate = new DateTime(2024, 9, 9, 23, 6, 42, 738, DateTimeKind.Unspecified).AddTicks(4045),
                            Email = "gmail.com_Satterfield@yahoo.com",
                            FullName = "Leonard Monahan",
                            Password = "fqe3wn",
                            PhoneNumber = "0237506767",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 9, 23, 6, 42, 738, DateTimeKind.Unspecified).AddTicks(4045),
                            UserName = "Josefina_Gottlieb"
                        },
                        new
                        {
                            UserId = 11,
                            CreatedDate = new DateTime(2024, 9, 16, 14, 19, 9, 265, DateTimeKind.Unspecified).AddTicks(18),
                            Email = "gmail.com.Douglas@hotmail.com",
                            FullName = "Gunner Daugherty",
                            Password = "9741pd",
                            PhoneNumber = "0336369725",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 16, 14, 19, 9, 265, DateTimeKind.Unspecified).AddTicks(18),
                            UserName = "Freida_Lowe"
                        },
                        new
                        {
                            UserId = 12,
                            CreatedDate = new DateTime(2024, 9, 14, 18, 18, 1, 769, DateTimeKind.Unspecified).AddTicks(7612),
                            Email = "gmail.com_Tromp@gmail.com",
                            FullName = "Lola Romaguera",
                            Password = "8f3nn0",
                            PhoneNumber = "0514607831",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 14, 18, 18, 1, 769, DateTimeKind.Unspecified).AddTicks(7612),
                            UserName = "Kali_Schoen84"
                        },
                        new
                        {
                            UserId = 13,
                            CreatedDate = new DateTime(2024, 9, 3, 16, 10, 53, 557, DateTimeKind.Unspecified).AddTicks(6931),
                            Email = "gmail.com.Goldner@gmail.com",
                            FullName = "Sigmund Nikolaus",
                            Password = "3ekoe8",
                            PhoneNumber = "0248005436",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 3, 16, 10, 53, 557, DateTimeKind.Unspecified).AddTicks(6931),
                            UserName = "Mercedes_Hermann"
                        },
                        new
                        {
                            UserId = 14,
                            CreatedDate = new DateTime(2024, 9, 13, 2, 24, 32, 120, DateTimeKind.Unspecified).AddTicks(5172),
                            Email = "gmail.com.Botsford37@gmail.com",
                            FullName = "Randy Bosco",
                            Password = "b3ra02",
                            PhoneNumber = "0516176792",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 13, 2, 24, 32, 120, DateTimeKind.Unspecified).AddTicks(5172),
                            UserName = "Marietta.Weimann63"
                        },
                        new
                        {
                            UserId = 15,
                            CreatedDate = new DateTime(2024, 9, 3, 3, 37, 14, 144, DateTimeKind.Unspecified).AddTicks(7427),
                            Email = "gmail.com.Volkman39@gmail.com",
                            FullName = "Cleve Murazik",
                            Password = "fpxra2",
                            PhoneNumber = "0892603778",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 3, 3, 37, 14, 144, DateTimeKind.Unspecified).AddTicks(7427),
                            UserName = "Jake.Pollich43"
                        },
                        new
                        {
                            UserId = 16,
                            CreatedDate = new DateTime(2024, 9, 10, 17, 54, 48, 438, DateTimeKind.Unspecified).AddTicks(1159),
                            Email = "gmail.com7@hotmail.com",
                            FullName = "Chance Graham",
                            Password = "yqmje1",
                            PhoneNumber = "0787653898",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 10, 17, 54, 48, 438, DateTimeKind.Unspecified).AddTicks(1159),
                            UserName = "Clinton90"
                        },
                        new
                        {
                            UserId = 17,
                            CreatedDate = new DateTime(2024, 9, 15, 6, 53, 21, 995, DateTimeKind.Unspecified).AddTicks(9683),
                            Email = "gmail.com_Satterfield29@yahoo.com",
                            FullName = "Colton Wolf",
                            Password = "fn342m",
                            PhoneNumber = "0567690286",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 15, 6, 53, 21, 995, DateTimeKind.Unspecified).AddTicks(9683),
                            UserName = "Haven.VonRueden"
                        },
                        new
                        {
                            UserId = 18,
                            CreatedDate = new DateTime(2024, 9, 1, 5, 24, 27, 6, DateTimeKind.Unspecified).AddTicks(7277),
                            Email = "gmail.com59@hotmail.com",
                            FullName = "Litzy Mante",
                            Password = "84ko2m",
                            PhoneNumber = "0191918821",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 1, 5, 24, 27, 6, DateTimeKind.Unspecified).AddTicks(7277),
                            UserName = "Daphnee87"
                        },
                        new
                        {
                            UserId = 19,
                            CreatedDate = new DateTime(2024, 9, 9, 14, 13, 9, 333, DateTimeKind.Unspecified).AddTicks(7039),
                            Email = "gmail.com.Grady35@hotmail.com",
                            FullName = "Verna Adams",
                            Password = "9603pn",
                            PhoneNumber = "0980355639",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 9, 14, 13, 9, 333, DateTimeKind.Unspecified).AddTicks(7039),
                            UserName = "Nicole_Brakus"
                        },
                        new
                        {
                            UserId = 20,
                            CreatedDate = new DateTime(2024, 9, 3, 13, 43, 24, 251, DateTimeKind.Unspecified).AddTicks(2312),
                            Email = "gmail.com4@yahoo.com",
                            FullName = "Sophie Predovic",
                            Password = "8mt40z",
                            PhoneNumber = "0776485118",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 3, 13, 43, 24, 251, DateTimeKind.Unspecified).AddTicks(2312),
                            UserName = "Verna.Swift"
                        },
                        new
                        {
                            UserId = 21,
                            CreatedDate = new DateTime(2024, 9, 12, 9, 48, 16, 533, DateTimeKind.Unspecified).AddTicks(5409),
                            Email = "gmail.com74@hotmail.com",
                            FullName = "Afton Jacobs",
                            Password = "602k7i",
                            PhoneNumber = "0655747313",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 12, 9, 48, 16, 533, DateTimeKind.Unspecified).AddTicks(5409),
                            UserName = "Kennedi_Bode22"
                        },
                        new
                        {
                            UserId = 22,
                            CreatedDate = new DateTime(2024, 9, 2, 17, 19, 38, 899, DateTimeKind.Unspecified).AddTicks(9761),
                            Email = "gmail.com9@hotmail.com",
                            FullName = "Sarai Rolfson",
                            Password = "0l2xpi",
                            PhoneNumber = "0680949617",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 2, 17, 19, 38, 899, DateTimeKind.Unspecified).AddTicks(9761),
                            UserName = "Stephany89"
                        },
                        new
                        {
                            UserId = 23,
                            CreatedDate = new DateTime(2024, 9, 14, 13, 36, 11, 575, DateTimeKind.Unspecified).AddTicks(681),
                            Email = "gmail.com.Schulist@yahoo.com",
                            FullName = "Seth Waelchi",
                            Password = "ukpf43",
                            PhoneNumber = "0489933690",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 14, 13, 36, 11, 575, DateTimeKind.Unspecified).AddTicks(681),
                            UserName = "Mariah81"
                        },
                        new
                        {
                            UserId = 24,
                            CreatedDate = new DateTime(2024, 9, 7, 20, 13, 23, 376, DateTimeKind.Unspecified).AddTicks(2055),
                            Email = "gmail.com10@yahoo.com",
                            FullName = "Treva Murray",
                            Password = "hblxna",
                            PhoneNumber = "0503140877",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 7, 20, 13, 23, 376, DateTimeKind.Unspecified).AddTicks(2055),
                            UserName = "Joey_Reilly12"
                        },
                        new
                        {
                            UserId = 25,
                            CreatedDate = new DateTime(2024, 9, 8, 0, 19, 9, 600, DateTimeKind.Unspecified).AddTicks(8629),
                            Email = "gmail.com.Hilll52@gmail.com",
                            FullName = "Albert Wintheiser",
                            Password = "9a4eh0",
                            PhoneNumber = "0850891389",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 8, 0, 19, 9, 600, DateTimeKind.Unspecified).AddTicks(8629),
                            UserName = "Reta52"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.UserDepartment", b =>
                {
                    b.Property<int>("UserDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserDepartmentId"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserDepartmentId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDepartments");

                    b.HasData(
                        new
                        {
                            UserDepartmentId = 1,
                            DepartmentId = 4,
                            UserId = 11
                        },
                        new
                        {
                            UserDepartmentId = 2,
                            DepartmentId = 8,
                            UserId = 2
                        },
                        new
                        {
                            UserDepartmentId = 3,
                            DepartmentId = 2,
                            UserId = 8
                        },
                        new
                        {
                            UserDepartmentId = 4,
                            DepartmentId = 6,
                            UserId = 11
                        },
                        new
                        {
                            UserDepartmentId = 5,
                            DepartmentId = 1,
                            UserId = 16
                        },
                        new
                        {
                            UserDepartmentId = 6,
                            DepartmentId = 9,
                            UserId = 5
                        },
                        new
                        {
                            UserDepartmentId = 7,
                            DepartmentId = 4,
                            UserId = 19
                        },
                        new
                        {
                            UserDepartmentId = 8,
                            DepartmentId = 7,
                            UserId = 22
                        },
                        new
                        {
                            UserDepartmentId = 9,
                            DepartmentId = 4,
                            UserId = 22
                        },
                        new
                        {
                            UserDepartmentId = 10,
                            DepartmentId = 4,
                            UserId = 24
                        },
                        new
                        {
                            UserDepartmentId = 11,
                            DepartmentId = 8,
                            UserId = 2
                        },
                        new
                        {
                            UserDepartmentId = 12,
                            DepartmentId = 4,
                            UserId = 20
                        },
                        new
                        {
                            UserDepartmentId = 13,
                            DepartmentId = 6,
                            UserId = 4
                        },
                        new
                        {
                            UserDepartmentId = 14,
                            DepartmentId = 6,
                            UserId = 14
                        },
                        new
                        {
                            UserDepartmentId = 15,
                            DepartmentId = 1,
                            UserId = 23
                        },
                        new
                        {
                            UserDepartmentId = 16,
                            DepartmentId = 7,
                            UserId = 12
                        },
                        new
                        {
                            UserDepartmentId = 17,
                            DepartmentId = 7,
                            UserId = 22
                        },
                        new
                        {
                            UserDepartmentId = 18,
                            DepartmentId = 6,
                            UserId = 7
                        },
                        new
                        {
                            UserDepartmentId = 19,
                            DepartmentId = 7,
                            UserId = 22
                        },
                        new
                        {
                            UserDepartmentId = 20,
                            DepartmentId = 5,
                            UserId = 22
                        },
                        new
                        {
                            UserDepartmentId = 21,
                            DepartmentId = 9,
                            UserId = 21
                        },
                        new
                        {
                            UserDepartmentId = 22,
                            DepartmentId = 8,
                            UserId = 25
                        },
                        new
                        {
                            UserDepartmentId = 23,
                            DepartmentId = 10,
                            UserId = 21
                        },
                        new
                        {
                            UserDepartmentId = 24,
                            DepartmentId = 5,
                            UserId = 16
                        },
                        new
                        {
                            UserDepartmentId = 25,
                            DepartmentId = 10,
                            UserId = 6
                        },
                        new
                        {
                            UserDepartmentId = 26,
                            DepartmentId = 4,
                            UserId = 9
                        },
                        new
                        {
                            UserDepartmentId = 27,
                            DepartmentId = 10,
                            UserId = 11
                        },
                        new
                        {
                            UserDepartmentId = 28,
                            DepartmentId = 10,
                            UserId = 14
                        },
                        new
                        {
                            UserDepartmentId = 29,
                            DepartmentId = 9,
                            UserId = 9
                        },
                        new
                        {
                            UserDepartmentId = 30,
                            DepartmentId = 6,
                            UserId = 21
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.Property<int>("VehicleSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleSessionId"));

                    b.Property<DateTime>("CheckinTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckoutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GateId")
                        .HasColumnType("int");

                    b.Property<int>("SecurityID")
                        .HasColumnType("int");

                    b.Property<int>("VisitDetailId")
                        .HasColumnType("int");

                    b.HasKey("VehicleSessionId");

                    b.HasIndex("GateId");

                    b.HasIndex("SecurityID");

                    b.HasIndex("VisitDetailId");

                    b.ToTable("VehicleSessions");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSessionImage", b =>
                {
                    b.Property<int>("VehicleSessionImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleSessionImageId"));

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleSessionId")
                        .HasColumnType("int");

                    b.Property<string>("VehicleSessionImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleSessionImageId");

                    b.HasIndex("VehicleSessionId");

                    b.ToTable("VehicleSessionImages");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.Property<int>("VisitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitId"));

                    b.Property<int>("AcceptLevel")
                        .HasColumnType("int");

                    b.Property<int>("CreateById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRegister")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentReasonId")
                        .HasColumnType("int");

                    b.Property<int>("UpdateById")
                        .HasColumnType("int");

                    b.Property<int>("VisitQuantity")
                        .HasColumnType("int");

                    b.HasKey("VisitId");

                    b.HasIndex("CreateById");

                    b.HasIndex("DepartmentReasonId");

                    b.HasIndex("UpdateById");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.Property<int>("VisitDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitDetailId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpectedTimeIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpectedTimeOut")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("VisitDetailName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.Property<int>("VisitorId")
                        .HasColumnType("int");

                    b.HasKey("VisitDetailId");

                    b.HasIndex("VisitId");

                    b.HasIndex("VisitorId");

                    b.ToTable("VisitDetails");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitProject", b =>
                {
                    b.Property<int>("VisitProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitProjectId"));

                    b.Property<DateTime>("ExpectedTimeIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpectedTimeOut")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("QuantityOfVisit")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.Property<string>("VisitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitProjectId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("VisitId");

                    b.ToTable("VisitProjects");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.Property<int>("VisitorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorId"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CredentialCardTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CredentialsCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VisitorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitorId");

                    b.HasIndex("CredentialCardTypeId");

                    b.ToTable("Visitors");

                    b.HasData(
                        new
                        {
                            VisitorId = 1,
                            CompanyName = "Beahan Inc",
                            CreatedDate = new DateTime(2024, 9, 9, 5, 56, 48, 112, DateTimeKind.Unspecified).AddTicks(1378),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "chpvacllr1",
                            PhoneNumber = "0959243904",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 9, 5, 56, 48, 112, DateTimeKind.Unspecified).AddTicks(1378),
                            VisitorName = "Kathleen Zemlak"
                        },
                        new
                        {
                            VisitorId = 2,
                            CompanyName = "Lesch, Torp and Bosco",
                            CreatedDate = new DateTime(2024, 9, 12, 11, 39, 35, 698, DateTimeKind.Unspecified).AddTicks(2522),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "62j7y5lmbt",
                            PhoneNumber = "0759401056",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 12, 11, 39, 35, 698, DateTimeKind.Unspecified).AddTicks(2522),
                            VisitorName = "Ayden Yundt"
                        },
                        new
                        {
                            VisitorId = 3,
                            CompanyName = "Rau - Feeney",
                            CreatedDate = new DateTime(2024, 9, 17, 3, 41, 46, 16, DateTimeKind.Unspecified).AddTicks(4570),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "me80xz44wh",
                            PhoneNumber = "0529873894",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 17, 3, 41, 46, 16, DateTimeKind.Unspecified).AddTicks(4570),
                            VisitorName = "Armani Wolff"
                        },
                        new
                        {
                            VisitorId = 4,
                            CompanyName = "Kunde - Greenfelder",
                            CreatedDate = new DateTime(2024, 9, 1, 1, 36, 35, 997, DateTimeKind.Unspecified).AddTicks(248),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "mo8p2vv38t",
                            PhoneNumber = "0391337578",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 1, 1, 36, 35, 997, DateTimeKind.Unspecified).AddTicks(248),
                            VisitorName = "Bethel Mohr"
                        },
                        new
                        {
                            VisitorId = 5,
                            CompanyName = "Mitchell - Bayer",
                            CreatedDate = new DateTime(2024, 9, 2, 6, 32, 56, 904, DateTimeKind.Unspecified).AddTicks(8861),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "tok2rit1tn",
                            PhoneNumber = "0585198803",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 2, 6, 32, 56, 904, DateTimeKind.Unspecified).AddTicks(8861),
                            VisitorName = "Wilton DuBuque"
                        },
                        new
                        {
                            VisitorId = 6,
                            CompanyName = "Bednar Group",
                            CreatedDate = new DateTime(2024, 9, 6, 11, 16, 34, 897, DateTimeKind.Unspecified).AddTicks(4735),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "zxksdwyp3x",
                            PhoneNumber = "0851739853",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 11, 16, 34, 897, DateTimeKind.Unspecified).AddTicks(4735),
                            VisitorName = "Derrick Rolfson"
                        },
                        new
                        {
                            VisitorId = 7,
                            CompanyName = "Schimmel and Sons",
                            CreatedDate = new DateTime(2024, 9, 7, 8, 35, 37, 984, DateTimeKind.Unspecified).AddTicks(1137),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "pvmzahewxy",
                            PhoneNumber = "0511536460",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 7, 8, 35, 37, 984, DateTimeKind.Unspecified).AddTicks(1137),
                            VisitorName = "Nasir Littel"
                        },
                        new
                        {
                            VisitorId = 8,
                            CompanyName = "Conn, Ernser and Fadel",
                            CreatedDate = new DateTime(2024, 9, 9, 13, 24, 32, 593, DateTimeKind.Unspecified).AddTicks(2866),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "sz0sxxh2vr",
                            PhoneNumber = "0143258434",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 9, 13, 24, 32, 593, DateTimeKind.Unspecified).AddTicks(2866),
                            VisitorName = "Alia Osinski"
                        },
                        new
                        {
                            VisitorId = 9,
                            CompanyName = "Ledner, Daugherty and Bayer",
                            CreatedDate = new DateTime(2024, 9, 10, 16, 20, 30, 20, DateTimeKind.Unspecified).AddTicks(9948),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "9hmba295wj",
                            PhoneNumber = "0583409318",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 10, 16, 20, 30, 20, DateTimeKind.Unspecified).AddTicks(9948),
                            VisitorName = "Toney Haley"
                        },
                        new
                        {
                            VisitorId = 10,
                            CompanyName = "Nolan - Langosh",
                            CreatedDate = new DateTime(2024, 9, 15, 12, 38, 54, 276, DateTimeKind.Unspecified).AddTicks(1227),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "ly07btyrrc",
                            PhoneNumber = "0889509949",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 15, 12, 38, 54, 276, DateTimeKind.Unspecified).AddTicks(1227),
                            VisitorName = "Bernardo Hettinger"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.Property<int>("VisitorSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorSessionId"));

                    b.Property<DateTime>("CheckinTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckoutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GateId")
                        .HasColumnType("int");

                    b.Property<int>("QRCardId")
                        .HasColumnType("int");

                    b.Property<int>("SecurityID")
                        .HasColumnType("int");

                    b.Property<int>("VisitDetailId")
                        .HasColumnType("int");

                    b.HasKey("VisitorSessionId");

                    b.HasIndex("GateId");

                    b.HasIndex("QRCardId");

                    b.HasIndex("SecurityID");

                    b.HasIndex("VisitDetailId");

                    b.ToTable("VisitorSessions");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSessionsImage", b =>
                {
                    b.Property<int>("VisitorSessionsImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorSessionsImageId"));

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitorSessionId")
                        .HasColumnType("int");

                    b.HasKey("VisitorSessionsImageId");

                    b.HasIndex("VisitorSessionId");

                    b.ToTable("VisitorSessionsImages");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.DepartmentReason", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Department", "Department")
                        .WithMany("DepartmentReason")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Reason", "Reason")
                        .WithMany("DepartmentReason")
                        .HasForeignKey("ReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Reason");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.NotificationUsers", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Notification", "Notification")
                        .WithMany("NotificationUsers")
                        .HasForeignKey("NotificationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Receiver")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Sender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Project", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.User", "User")
                        .WithMany("Project")
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.QRCardStatus", "QRCardStatus")
                        .WithMany("QRCards")
                        .HasForeignKey("QRCardStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.QRCardType", "QRCardType")
                        .WithMany("QRCards")
                        .HasForeignKey("QRCardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QRCardStatus");

                    b.Navigation("QRCardType");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Role", "Role")
                        .WithMany("User")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.UserDepartment", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Department", "Department")
                        .WithMany("UserDepartment")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "User")
                        .WithMany("UserDepartment")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Gate", "Gate")
                        .WithMany("VehicleSession")
                        .HasForeignKey("GateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Security")
                        .WithMany("VehicleSession")
                        .HasForeignKey("SecurityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.VisitDetail", "VisitDetail")
                        .WithMany("VehicleSession")
                        .HasForeignKey("VisitDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gate");

                    b.Navigation("Security");

                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSessionImage", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.VehicleSession", "VehicleSession")
                        .WithMany("Images")
                        .HasForeignKey("VehicleSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.User", "CreateBy")
                        .WithMany("CreatedVisits")
                        .HasForeignKey("CreateById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.DepartmentReason", "DepartmentReason")
                        .WithMany("Visits")
                        .HasForeignKey("DepartmentReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "UpdateBy")
                        .WithMany("UpdatedVisits")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreateBy");

                    b.Navigation("DepartmentReason");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Visit", "Visit")
                        .WithMany("VisitDetail")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Visitor", "Visitor")
                        .WithMany("VisitDetail")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visit");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitProject", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Project", "Project")
                        .WithMany("VisitProject")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Visit", "Visit")
                        .WithMany("VisitProject")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.CredentialCardType", "CredentialCardType")
                        .WithMany("Visitor")
                        .HasForeignKey("CredentialCardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CredentialCardType");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Gate", "Gate")
                        .WithMany("VisitorSession")
                        .HasForeignKey("GateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.QRCard", "QRCard")
                        .WithMany("VisitorSession")
                        .HasForeignKey("QRCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Security")
                        .WithMany("VisitorSession")
                        .HasForeignKey("SecurityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.VisitDetail", "VisitDetail")
                        .WithMany("VisitorSession")
                        .HasForeignKey("VisitDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gate");

                    b.Navigation("QRCard");

                    b.Navigation("Security");

                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSessionsImage", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.VisitorSession", "VisitorSession")
                        .WithMany("Images")
                        .HasForeignKey("VisitorSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.CredentialCardType", b =>
                {
                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Department", b =>
                {
                    b.Navigation("DepartmentReason");

                    b.Navigation("UserDepartment");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.DepartmentReason", b =>
                {
                    b.Navigation("Visits");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Gate", b =>
                {
                    b.Navigation("VehicleSession");

                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Notification", b =>
                {
                    b.Navigation("NotificationUsers");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Project", b =>
                {
                    b.Navigation("VisitProject");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardStatus", b =>
                {
                    b.Navigation("QRCards");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardType", b =>
                {
                    b.Navigation("QRCards");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Reason", b =>
                {
                    b.Navigation("DepartmentReason");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Role", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.Navigation("CreatedVisits");

                    b.Navigation("Project");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("SentNotifications");

                    b.Navigation("UpdatedVisits");

                    b.Navigation("UserDepartment");

                    b.Navigation("VehicleSession");

                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.Navigation("VisitDetail");

                    b.Navigation("VisitProject");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.Navigation("VehicleSession");

                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
