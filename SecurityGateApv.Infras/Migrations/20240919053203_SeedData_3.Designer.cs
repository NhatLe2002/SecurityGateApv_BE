// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SecurityGateApv.Infras.DBContext;

#nullable disable

namespace SecurityGateApv.Infras.Migrations
{
    [DbContext(typeof(SecurityGateApvDbContext))]
    [Migration("20240919053203_SeedData_3")]
    partial class SeedData_3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SecurityGateApv.Domain.Models.CredentialCardType", b =>
                {
                    b.Property<int>("CredentialCardTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CredentialCardTypeId"));

                    b.Property<string>("CredentialCardTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CredentialCardTypeId");

                    b.ToTable("CredentialCardTypes");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<int>("AcceptLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.DepartmentReason", b =>
                {
                    b.Property<int>("DepartmentReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentReasonId"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReasonId")
                        .HasColumnType("int");

                    b.HasKey("DepartmentReasonId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ReasonId");

                    b.ToTable("DepartmentReasons");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Gate", b =>
                {
                    b.Property<int>("GateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GateId"));

                    b.Property<string>("GateCoordinate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GateId");

                    b.ToTable("Gates");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.NotificationUsers", b =>
                {
                    b.Property<int>("NotificationUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationUserID"));

                    b.Property<int>("NotificationID")
                        .HasColumnType("int");

                    b.Property<bool>("ReadStatus")
                        .HasColumnType("bit");

                    b.Property<int>("ReceiverID")
                        .HasColumnType("int");

                    b.Property<int>("SenderID")
                        .HasColumnType("int");

                    b.HasKey("NotificationUserID");

                    b.HasIndex("NotificationID");

                    b.HasIndex("ReceiverID");

                    b.HasIndex("SenderID");

                    b.ToTable("NotificationUsers");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<int>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ProjectId");

                    b.HasIndex("CreateBy");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.Property<int>("QRCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardId"));

                    b.Property<Guid>("CardGuidId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastCancelDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QRCardStatusId")
                        .HasColumnType("int");

                    b.Property<int>("QRCardTypeId")
                        .HasColumnType("int");

                    b.HasKey("QRCardId");

                    b.HasIndex("QRCardStatusId");

                    b.HasIndex("QRCardTypeId");

                    b.ToTable("QRCards");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardStatus", b =>
                {
                    b.Property<int>("QRCardStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardStatusId"));

                    b.Property<int>("StatusName")
                        .HasColumnType("int");

                    b.Property<int>("StatusNumber")
                        .HasColumnType("int");

                    b.HasKey("QRCardStatusId");

                    b.ToTable("QRCardStatus");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardType", b =>
                {
                    b.Property<int>("QRCardTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardTypeId"));

                    b.Property<string>("CardTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QRCardTypeId");

                    b.ToTable("QRCardType");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Reason", b =>
                {
                    b.Property<int>("ReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReasonId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReasonId");

                    b.ToTable("Reasons");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Description = "Quản lý toàn bộ hệ thống",
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            Description = "Quản lý toàn bộ công ty",
                            RoleName = "Manager"
                        },
                        new
                        {
                            RoleId = 3,
                            Description = "Quản lý toàn bộ phòng ban",
                            RoleName = "DepartmentManaager"
                        },
                        new
                        {
                            RoleId = 4,
                            Description = "Tạo và quản lý khách ra vào của phòng ban",
                            RoleName = "Staff"
                        },
                        new
                        {
                            RoleId = 5,
                            Description = "Quản lý khách ra vào tại cổng",
                            RoleName = "Security"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedDate = new DateTime(2024, 3, 19, 5, 32, 2, 677, DateTimeKind.Utc).AddTicks(4768),
                            Email = "admin1@example.com",
                            FullName = "Admin One",
                            Password = "123",
                            PhoneNumber = "1234567890",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 19, 5, 32, 2, 677, DateTimeKind.Utc).AddTicks(4776),
                            UserName = "admin1"
                        },
                        new
                        {
                            UserId = 2,
                            CreatedDate = new DateTime(2024, 6, 19, 5, 32, 2, 677, DateTimeKind.Utc).AddTicks(4779),
                            Email = "manager1@example.com",
                            FullName = "Manager One",
                            Password = "123",
                            PhoneNumber = "0987654321",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 19, 5, 32, 2, 677, DateTimeKind.Utc).AddTicks(4780),
                            UserName = "manager1"
                        },
                        new
                        {
                            UserId = 3,
                            CreatedDate = new DateTime(2024, 7, 19, 5, 32, 2, 677, DateTimeKind.Utc).AddTicks(4788),
                            Email = "employee1@example.com",
                            FullName = "Department Manager One",
                            Password = "123",
                            PhoneNumber = "1112223334",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 19, 5, 32, 2, 677, DateTimeKind.Utc).AddTicks(4788),
                            UserName = "DM1"
                        },
                        new
                        {
                            UserId = 4,
                            CreatedDate = new DateTime(2024, 8, 19, 5, 32, 2, 677, DateTimeKind.Utc).AddTicks(4790),
                            Email = "hr1@example.com",
                            FullName = "Staff One",
                            Password = "123",
                            PhoneNumber = "2223334445",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 19, 5, 32, 2, 677, DateTimeKind.Utc).AddTicks(4790),
                            UserName = "Staff1"
                        },
                        new
                        {
                            UserId = 5,
                            CreatedDate = new DateTime(2024, 5, 19, 5, 32, 2, 677, DateTimeKind.Utc).AddTicks(4792),
                            Email = "it1@example.com",
                            FullName = "Security One",
                            Password = "123",
                            PhoneNumber = "3334445556",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 19, 5, 32, 2, 677, DateTimeKind.Utc).AddTicks(4792),
                            UserName = "Security1"
                        },
                        new
                        {
                            UserId = 6,
                            CreatedDate = new DateTime(2024, 8, 9, 23, 22, 33, 592, DateTimeKind.Utc).AddTicks(6110),
                            Email = "Elaina96@gmail.com",
                            FullName = "Kelsi West",
                            Password = "VrILJa",
                            PhoneNumber = "+84 925 578 3301",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 8, 9, 23, 22, 33, 592, DateTimeKind.Utc).AddTicks(6110),
                            UserName = "Eden29"
                        },
                        new
                        {
                            UserId = 7,
                            CreatedDate = new DateTime(2024, 8, 31, 3, 2, 6, 835, DateTimeKind.Utc).AddTicks(7237),
                            Email = "Wilfrid84@gmail.com",
                            FullName = "Eleazar Tremblay",
                            Password = "L2D8jD",
                            PhoneNumber = "+84 932 389 6890",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 8, 31, 3, 2, 6, 835, DateTimeKind.Utc).AddTicks(7237),
                            UserName = "Emmett9"
                        },
                        new
                        {
                            UserId = 8,
                            CreatedDate = new DateTime(2024, 9, 8, 5, 20, 26, 886, DateTimeKind.Utc).AddTicks(4098),
                            Email = "Jayme37@gmail.com",
                            FullName = "Ransom Hagenes",
                            Password = "zz69zW",
                            PhoneNumber = "+84 058 168 6229",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 8, 5, 20, 26, 886, DateTimeKind.Utc).AddTicks(4098),
                            UserName = "Saige.Beatty73"
                        },
                        new
                        {
                            UserId = 9,
                            CreatedDate = new DateTime(2024, 9, 7, 10, 46, 31, 961, DateTimeKind.Utc).AddTicks(8014),
                            Email = "Jakob_Bergnaum8@gmail.com",
                            FullName = "Hans Beahan",
                            Password = "5AO5Zl",
                            PhoneNumber = "+84 746 880 4775",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 7, 10, 46, 31, 961, DateTimeKind.Utc).AddTicks(8014),
                            UserName = "Roman.Glover"
                        },
                        new
                        {
                            UserId = 10,
                            CreatedDate = new DateTime(2024, 9, 9, 8, 23, 57, 207, DateTimeKind.Utc).AddTicks(5187),
                            Email = "Darion.Mann22@gmail.com",
                            FullName = "Johann Donnelly",
                            Password = "R7PUEG",
                            PhoneNumber = "+84 541 058 8609",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 9, 8, 23, 57, 207, DateTimeKind.Utc).AddTicks(5187),
                            UserName = "Alize.Ankunding"
                        },
                        new
                        {
                            UserId = 11,
                            CreatedDate = new DateTime(2024, 8, 24, 22, 52, 4, 513, DateTimeKind.Utc).AddTicks(1025),
                            Email = "Jeffrey71@gmail.com",
                            FullName = "Audrey Medhurst",
                            Password = "OAsLk2",
                            PhoneNumber = "+84 316 956 1340",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 8, 24, 22, 52, 4, 513, DateTimeKind.Utc).AddTicks(1025),
                            UserName = "Robyn3"
                        },
                        new
                        {
                            UserId = 12,
                            CreatedDate = new DateTime(2024, 8, 2, 1, 45, 32, 23, DateTimeKind.Utc).AddTicks(7598),
                            Email = "Hector_Hackett43@gmail.com",
                            FullName = "Bailey Shanahan",
                            Password = "39WmyS",
                            PhoneNumber = "+84 753 179 2379",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 8, 2, 1, 45, 32, 23, DateTimeKind.Utc).AddTicks(7598),
                            UserName = "Gracie.Effertz"
                        },
                        new
                        {
                            UserId = 13,
                            CreatedDate = new DateTime(2024, 8, 25, 18, 26, 4, 494, DateTimeKind.Utc).AddTicks(3650),
                            Email = "Enrique_Murazik@gmail.com",
                            FullName = "Webster Lindgren",
                            Password = "OqiK23",
                            PhoneNumber = "+84 486 867 7444",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 8, 25, 18, 26, 4, 494, DateTimeKind.Utc).AddTicks(3650),
                            UserName = "Aisha26"
                        },
                        new
                        {
                            UserId = 14,
                            CreatedDate = new DateTime(2024, 8, 15, 8, 12, 22, 435, DateTimeKind.Utc).AddTicks(5646),
                            Email = "Bonita69@gmail.com",
                            FullName = "Delia Christiansen",
                            Password = "dKr0zo",
                            PhoneNumber = "+84 384 263 2680",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 8, 15, 8, 12, 22, 435, DateTimeKind.Utc).AddTicks(5646),
                            UserName = "Jana_Ortiz86"
                        },
                        new
                        {
                            UserId = 15,
                            CreatedDate = new DateTime(2024, 8, 5, 20, 51, 4, 659, DateTimeKind.Utc).AddTicks(5755),
                            Email = "Griffin_Flatley@gmail.com",
                            FullName = "Leon Braun",
                            Password = "7QDlgd",
                            PhoneNumber = "+84 885 874 4966",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 8, 5, 20, 51, 4, 659, DateTimeKind.Utc).AddTicks(5755),
                            UserName = "Caesar21"
                        },
                        new
                        {
                            UserId = 16,
                            CreatedDate = new DateTime(2024, 8, 10, 1, 43, 29, 239, DateTimeKind.Utc).AddTicks(5075),
                            Email = "Alec_Blanda18@gmail.com",
                            FullName = "Aurore Hickle",
                            Password = "Q6K3KT",
                            PhoneNumber = "+84 919 006 1892",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 8, 10, 1, 43, 29, 239, DateTimeKind.Utc).AddTicks(5075),
                            UserName = "Lincoln_Boyer"
                        },
                        new
                        {
                            UserId = 17,
                            CreatedDate = new DateTime(2024, 9, 11, 3, 37, 55, 912, DateTimeKind.Utc).AddTicks(6244),
                            Email = "Daron_Jaskolski27@gmail.com",
                            FullName = "Lina Corkery",
                            Password = "TqKBmh",
                            PhoneNumber = "+84 167 589 2430",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 11, 3, 37, 55, 912, DateTimeKind.Utc).AddTicks(6244),
                            UserName = "Carmella23"
                        },
                        new
                        {
                            UserId = 18,
                            CreatedDate = new DateTime(2024, 8, 16, 13, 14, 11, 723, DateTimeKind.Utc).AddTicks(2925),
                            Email = "Eloisa25@gmail.com",
                            FullName = "Angela Morissette",
                            Password = "qDtr71",
                            PhoneNumber = "+84 494 969 6410",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 8, 16, 13, 14, 11, 723, DateTimeKind.Utc).AddTicks(2925),
                            UserName = "Stephany_Grimes10"
                        },
                        new
                        {
                            UserId = 19,
                            CreatedDate = new DateTime(2024, 9, 6, 2, 40, 23, 617, DateTimeKind.Utc).AddTicks(9713),
                            Email = "Jillian_Schimmel@gmail.com",
                            FullName = "Nathanial Dickinson",
                            Password = "2ND223",
                            PhoneNumber = "+84 833 940 3239",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 6, 2, 40, 23, 617, DateTimeKind.Utc).AddTicks(9713),
                            UserName = "Brock.Hirthe37"
                        },
                        new
                        {
                            UserId = 20,
                            CreatedDate = new DateTime(2024, 8, 5, 12, 6, 0, 646, DateTimeKind.Utc).AddTicks(897),
                            Email = "Keeley_Herzog@gmail.com",
                            FullName = "Shayne Gibson",
                            Password = "NRXEHC",
                            PhoneNumber = "+84 704 095 5903",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 8, 5, 12, 6, 0, 646, DateTimeKind.Utc).AddTicks(897),
                            UserName = "Clair_Hudson74"
                        },
                        new
                        {
                            UserId = 21,
                            CreatedDate = new DateTime(2024, 9, 1, 11, 12, 33, 834, DateTimeKind.Utc).AddTicks(9122),
                            Email = "Asia_Bogan3@gmail.com",
                            FullName = "Alvina Larkin",
                            Password = "jbL0XN",
                            PhoneNumber = "+84 843 931 6268",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 1, 11, 12, 33, 834, DateTimeKind.Utc).AddTicks(9122),
                            UserName = "Opal2"
                        },
                        new
                        {
                            UserId = 22,
                            CreatedDate = new DateTime(2024, 8, 3, 19, 51, 29, 397, DateTimeKind.Utc).AddTicks(4147),
                            Email = "Hazle53@gmail.com",
                            FullName = "Bette Swift",
                            Password = "k0sLiy",
                            PhoneNumber = "+84 711 397 8618",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 8, 3, 19, 51, 29, 397, DateTimeKind.Utc).AddTicks(4147),
                            UserName = "Brycen_Powlowski"
                        },
                        new
                        {
                            UserId = 23,
                            CreatedDate = new DateTime(2024, 8, 7, 10, 5, 11, 710, DateTimeKind.Utc).AddTicks(8277),
                            Email = "Edmund_Cassin@gmail.com",
                            FullName = "Cecelia Bradtke",
                            Password = "8SgOHy",
                            PhoneNumber = "+84 885 078 7345",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 8, 7, 10, 5, 11, 710, DateTimeKind.Utc).AddTicks(8277),
                            UserName = "Kara_Bogisich8"
                        },
                        new
                        {
                            UserId = 24,
                            CreatedDate = new DateTime(2024, 9, 2, 16, 31, 4, 773, DateTimeKind.Utc).AddTicks(7429),
                            Email = "Telly.Bashirian7@gmail.com",
                            FullName = "Garret Nitzsche",
                            Password = "W2cn4A",
                            PhoneNumber = "+84 219 220 0753",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 2, 16, 31, 4, 773, DateTimeKind.Utc).AddTicks(7429),
                            UserName = "Jazmyne_Jacobson"
                        },
                        new
                        {
                            UserId = 25,
                            CreatedDate = new DateTime(2024, 8, 7, 3, 3, 1, 306, DateTimeKind.Utc).AddTicks(5919),
                            Email = "Quinn_Ankunding15@gmail.com",
                            FullName = "Randi Nienow",
                            Password = "8t7IOd",
                            PhoneNumber = "+84 868 055 5391",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 8, 7, 3, 3, 1, 306, DateTimeKind.Utc).AddTicks(5919),
                            UserName = "Jett_McCullough"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.UserDepartment", b =>
                {
                    b.Property<int>("UserDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserDepartmentId"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserDepartmentId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDepartments");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.Property<int>("VehicleSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleSessionId"));

                    b.Property<DateTime>("CheckinTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckoutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GateId")
                        .HasColumnType("int");

                    b.Property<int>("SecurityID")
                        .HasColumnType("int");

                    b.Property<int>("VisitDetailId")
                        .HasColumnType("int");

                    b.HasKey("VehicleSessionId");

                    b.HasIndex("GateId");

                    b.HasIndex("SecurityID");

                    b.HasIndex("VisitDetailId");

                    b.ToTable("VehicleSessions");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSessionImage", b =>
                {
                    b.Property<int>("VehicleSessionImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleSessionImageId"));

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleSessionId")
                        .HasColumnType("int");

                    b.Property<string>("VehicleSessionImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleSessionImageId");

                    b.HasIndex("VehicleSessionId");

                    b.ToTable("VehicleSessionImages");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.Property<int>("VisitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitId"));

                    b.Property<int>("AcceptLevel")
                        .HasColumnType("int");

                    b.Property<int>("CreateById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRegister")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentReasonId")
                        .HasColumnType("int");

                    b.Property<int>("UpdateById")
                        .HasColumnType("int");

                    b.Property<int>("VisitQuantity")
                        .HasColumnType("int");

                    b.HasKey("VisitId");

                    b.HasIndex("CreateById");

                    b.HasIndex("DepartmentReasonId");

                    b.HasIndex("UpdateById");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.Property<int>("VisitDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitDetailId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpectedTimeIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpectedTimeOut")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("VisitDetailName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.Property<int>("VisitorId")
                        .HasColumnType("int");

                    b.HasKey("VisitDetailId");

                    b.HasIndex("VisitId");

                    b.HasIndex("VisitorId");

                    b.ToTable("VisitDetails");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitProject", b =>
                {
                    b.Property<int>("VisitProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitProjectId"));

                    b.Property<DateTime>("ExpectedTimeIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpectedTimeOut")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("QuantityOfVisit")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.Property<string>("VisitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitProjectId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("VisitId");

                    b.ToTable("VisitProjects");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.Property<int>("VisitorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorId"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CredentialCardTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CredentialsCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VisitorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitorId");

                    b.HasIndex("CredentialCardTypeId");

                    b.ToTable("Visitors");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.Property<int>("VisitorSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorSessionId"));

                    b.Property<DateTime>("CheckinTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckoutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GateId")
                        .HasColumnType("int");

                    b.Property<int>("QRCardId")
                        .HasColumnType("int");

                    b.Property<int>("SecurityID")
                        .HasColumnType("int");

                    b.Property<int>("VisitDetailId")
                        .HasColumnType("int");

                    b.HasKey("VisitorSessionId");

                    b.HasIndex("GateId");

                    b.HasIndex("QRCardId");

                    b.HasIndex("SecurityID");

                    b.HasIndex("VisitDetailId");

                    b.ToTable("VisitorSessions");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSessionsImage", b =>
                {
                    b.Property<int>("VisitorSessionsImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorSessionsImageId"));

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitorSessionId")
                        .HasColumnType("int");

                    b.HasKey("VisitorSessionsImageId");

                    b.HasIndex("VisitorSessionId");

                    b.ToTable("VisitorSessionsImages");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.DepartmentReason", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Department", "Department")
                        .WithMany("DepartmentReason")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Reason", "Reason")
                        .WithMany("DepartmentReason")
                        .HasForeignKey("ReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Reason");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.NotificationUsers", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Notification", "Notification")
                        .WithMany("NotificationUsers")
                        .HasForeignKey("NotificationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Receiver")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Sender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Project", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.User", "User")
                        .WithMany("Project")
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.QRCardStatus", "QRCardStatus")
                        .WithMany("QRCards")
                        .HasForeignKey("QRCardStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.QRCardType", "QRCardType")
                        .WithMany("QRCards")
                        .HasForeignKey("QRCardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QRCardStatus");

                    b.Navigation("QRCardType");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Role", "Role")
                        .WithMany("User")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.UserDepartment", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Department", "Department")
                        .WithMany("UserDepartment")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "User")
                        .WithMany("UserDepartment")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Gate", "Gate")
                        .WithMany("VehicleSession")
                        .HasForeignKey("GateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Security")
                        .WithMany("VehicleSession")
                        .HasForeignKey("SecurityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.VisitDetail", "VisitDetail")
                        .WithMany("VehicleSession")
                        .HasForeignKey("VisitDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gate");

                    b.Navigation("Security");

                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSessionImage", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.VehicleSession", "VehicleSession")
                        .WithMany("Images")
                        .HasForeignKey("VehicleSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.User", "CreateBy")
                        .WithMany("CreatedVisits")
                        .HasForeignKey("CreateById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.DepartmentReason", "DepartmentReason")
                        .WithMany("Visits")
                        .HasForeignKey("DepartmentReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "UpdateBy")
                        .WithMany("UpdatedVisits")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreateBy");

                    b.Navigation("DepartmentReason");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Visit", "Visit")
                        .WithMany("VisitDetail")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Visitor", "Visitor")
                        .WithMany("VisitDetail")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visit");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitProject", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Project", "Project")
                        .WithMany("VisitProject")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Visit", "Visit")
                        .WithMany("VisitProject")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.CredentialCardType", "CredentialCardType")
                        .WithMany("Visitor")
                        .HasForeignKey("CredentialCardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CredentialCardType");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Gate", "Gate")
                        .WithMany("VisitorSession")
                        .HasForeignKey("GateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.QRCard", "QRCard")
                        .WithMany("VisitorSession")
                        .HasForeignKey("QRCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Security")
                        .WithMany("VisitorSession")
                        .HasForeignKey("SecurityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.VisitDetail", "VisitDetail")
                        .WithMany("VisitorSession")
                        .HasForeignKey("VisitDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gate");

                    b.Navigation("QRCard");

                    b.Navigation("Security");

                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSessionsImage", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.VisitorSession", "VisitorSession")
                        .WithMany("Images")
                        .HasForeignKey("VisitorSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.CredentialCardType", b =>
                {
                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Department", b =>
                {
                    b.Navigation("DepartmentReason");

                    b.Navigation("UserDepartment");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.DepartmentReason", b =>
                {
                    b.Navigation("Visits");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Gate", b =>
                {
                    b.Navigation("VehicleSession");

                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Notification", b =>
                {
                    b.Navigation("NotificationUsers");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Project", b =>
                {
                    b.Navigation("VisitProject");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardStatus", b =>
                {
                    b.Navigation("QRCards");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardType", b =>
                {
                    b.Navigation("QRCards");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Reason", b =>
                {
                    b.Navigation("DepartmentReason");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Role", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.Navigation("CreatedVisits");

                    b.Navigation("Project");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("SentNotifications");

                    b.Navigation("UpdatedVisits");

                    b.Navigation("UserDepartment");

                    b.Navigation("VehicleSession");

                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.Navigation("VisitDetail");

                    b.Navigation("VisitProject");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.Navigation("VehicleSession");

                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
