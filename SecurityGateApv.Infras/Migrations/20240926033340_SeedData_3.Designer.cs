// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SecurityGateApv.Infras.DBContext;

#nullable disable

namespace SecurityGateApv.Infras.Migrations
{
    [DbContext(typeof(SecurityGateApvDbContext))]
    [Migration("20240926033340_SeedData_3")]
    partial class SeedData_3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SecurityGateApv.Domain.Models.CredentialCardType", b =>
                {
                    b.Property<int>("CredentialCardTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CredentialCardTypeId"));

                    b.Property<string>("CredentialCardTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CredentialCardTypeId");

                    b.ToTable("CredentialCardTypes");

                    b.HasData(
                        new
                        {
                            CredentialCardTypeId = 1,
                            CredentialCardTypeName = "Căn cước công dân"
                        },
                        new
                        {
                            CredentialCardTypeId = 2,
                            CredentialCardTypeName = "Giấy phép lái xe"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<int>("AcceptLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            AcceptLevel = 3,
                            CreateDate = new DateTime(2024, 9, 17, 15, 14, 47, 762, DateTimeKind.Utc).AddTicks(4917),
                            DepartmentName = "Phòng Hành chính",
                            Description = "Inventore voluptas placeat sed assumenda.",
                            UpdatedDate = new DateTime(2024, 9, 17, 15, 14, 47, 762, DateTimeKind.Utc).AddTicks(4917)
                        },
                        new
                        {
                            DepartmentId = 2,
                            AcceptLevel = 1,
                            CreateDate = new DateTime(2024, 9, 11, 7, 51, 27, 677, DateTimeKind.Utc).AddTicks(3287),
                            DepartmentName = "Phòng Kế toán",
                            Description = "Ut sint sed cum nulla similique voluptate.",
                            UpdatedDate = new DateTime(2024, 9, 11, 7, 51, 27, 677, DateTimeKind.Utc).AddTicks(3287)
                        },
                        new
                        {
                            DepartmentId = 3,
                            AcceptLevel = 5,
                            CreateDate = new DateTime(2024, 9, 13, 7, 7, 44, 7, DateTimeKind.Utc).AddTicks(8363),
                            DepartmentName = "Phòng IT",
                            Description = "Ipsa facilis corrupti expedita tempora et deleniti.",
                            UpdatedDate = new DateTime(2024, 9, 13, 7, 7, 44, 7, DateTimeKind.Utc).AddTicks(8363)
                        },
                        new
                        {
                            DepartmentId = 4,
                            AcceptLevel = 2,
                            CreateDate = new DateTime(2024, 9, 19, 20, 7, 1, 283, DateTimeKind.Utc).AddTicks(3254),
                            DepartmentName = "Phòng Kinh doanh",
                            Description = "Voluptas quaerat atque odit et.",
                            UpdatedDate = new DateTime(2024, 9, 19, 20, 7, 1, 283, DateTimeKind.Utc).AddTicks(3254)
                        },
                        new
                        {
                            DepartmentId = 5,
                            AcceptLevel = 3,
                            CreateDate = new DateTime(2024, 9, 17, 9, 59, 28, 737, DateTimeKind.Utc).AddTicks(4285),
                            DepartmentName = "Phòng Sản xuất",
                            Description = "Et laudantium et facilis voluptatem delectus natus fugiat.",
                            UpdatedDate = new DateTime(2024, 9, 17, 9, 59, 28, 737, DateTimeKind.Utc).AddTicks(4285)
                        },
                        new
                        {
                            DepartmentId = 6,
                            AcceptLevel = 3,
                            CreateDate = new DateTime(2024, 9, 2, 0, 25, 50, 621, DateTimeKind.Utc).AddTicks(8077),
                            DepartmentName = "Phòng Chăm sóc khách hàng",
                            Description = "Quis quia odit iste rerum debitis nam non.",
                            UpdatedDate = new DateTime(2024, 9, 2, 0, 25, 50, 621, DateTimeKind.Utc).AddTicks(8077)
                        },
                        new
                        {
                            DepartmentId = 7,
                            AcceptLevel = 3,
                            CreateDate = new DateTime(2024, 9, 25, 22, 54, 48, 921, DateTimeKind.Utc).AddTicks(1727),
                            DepartmentName = "Phòng Kế toán",
                            Description = "Excepturi dolore est est et vel.",
                            UpdatedDate = new DateTime(2024, 9, 25, 22, 54, 48, 921, DateTimeKind.Utc).AddTicks(1727)
                        },
                        new
                        {
                            DepartmentId = 8,
                            AcceptLevel = 5,
                            CreateDate = new DateTime(2024, 9, 16, 18, 28, 59, 256, DateTimeKind.Utc).AddTicks(3232),
                            DepartmentName = "Phòng Nhân sự",
                            Description = "Ex maxime et quae odio temporibus ratione illo.",
                            UpdatedDate = new DateTime(2024, 9, 16, 18, 28, 59, 256, DateTimeKind.Utc).AddTicks(3232)
                        },
                        new
                        {
                            DepartmentId = 9,
                            AcceptLevel = 4,
                            CreateDate = new DateTime(2024, 9, 11, 12, 57, 23, 800, DateTimeKind.Utc).AddTicks(143),
                            DepartmentName = "Phòng IT",
                            Description = "Debitis fugiat qui.",
                            UpdatedDate = new DateTime(2024, 9, 11, 12, 57, 23, 800, DateTimeKind.Utc).AddTicks(143)
                        },
                        new
                        {
                            DepartmentId = 10,
                            AcceptLevel = 1,
                            CreateDate = new DateTime(2024, 9, 9, 3, 15, 33, 667, DateTimeKind.Utc).AddTicks(2213),
                            DepartmentName = "Phòng R&D",
                            Description = "Quis accusantium sapiente suscipit explicabo eaque omnis error.",
                            UpdatedDate = new DateTime(2024, 9, 9, 3, 15, 33, 667, DateTimeKind.Utc).AddTicks(2213)
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Gate", b =>
                {
                    b.Property<int>("GateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GateId"));

                    b.Property<string>("GateCoordinate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GateId");

                    b.ToTable("Gates");

                    b.HasData(
                        new
                        {
                            GateId = 1,
                            GateCoordinate = "Ra vào trong ngày",
                            GateName = "Cổng 1"
                        },
                        new
                        {
                            GateId = 2,
                            GateCoordinate = "Ra vào trong ngày",
                            GateName = "Cổng 2"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.NotificationUsers", b =>
                {
                    b.Property<int>("NotificationUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationUserID"));

                    b.Property<int>("NotificationID")
                        .HasColumnType("int");

                    b.Property<bool>("ReadStatus")
                        .HasColumnType("bit");

                    b.Property<int>("ReceiverID")
                        .HasColumnType("int");

                    b.Property<int>("SenderID")
                        .HasColumnType("int");

                    b.HasKey("NotificationUserID");

                    b.HasIndex("NotificationID");

                    b.HasIndex("ReceiverID");

                    b.HasIndex("SenderID");

                    b.ToTable("NotificationUsers");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Process", b =>
                {
                    b.Property<int>("ProcessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProcessId"));

                    b.Property<int>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("VisitTypeId")
                        .HasColumnType("int");

                    b.HasKey("ProcessId");

                    b.HasIndex("CreateBy");

                    b.HasIndex("VisitTypeId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            ProcessId = 1,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 24, 3, 33, 39, 746, DateTimeKind.Utc).AddTicks(9115),
                            Description = "",
                            ProcessName = "Rustic Concrete Hat",
                            Status = false,
                            VisitTypeId = 1
                        },
                        new
                        {
                            ProcessId = 2,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 24, 3, 33, 39, 747, DateTimeKind.Utc).AddTicks(799),
                            Description = "",
                            ProcessName = "Ergonomic Soft Bike",
                            Status = true,
                            VisitTypeId = 1
                        },
                        new
                        {
                            ProcessId = 3,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 24, 3, 33, 39, 747, DateTimeKind.Utc).AddTicks(829),
                            Description = "",
                            ProcessName = "Ergonomic Wooden Chicken",
                            Status = false,
                            VisitTypeId = 1
                        },
                        new
                        {
                            ProcessId = 4,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 24, 3, 33, 39, 747, DateTimeKind.Utc).AddTicks(848),
                            Description = "",
                            ProcessName = "Refined Granite Mouse",
                            Status = false,
                            VisitTypeId = 1
                        },
                        new
                        {
                            ProcessId = 5,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 24, 3, 33, 39, 747, DateTimeKind.Utc).AddTicks(864),
                            Description = "",
                            ProcessName = "Gorgeous Wooden Gloves",
                            Status = false,
                            VisitTypeId = 1
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.Property<int>("QRCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardId"));

                    b.Property<Guid>("CardGuidId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastCancelDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QRCardStatusId")
                        .HasColumnType("int");

                    b.Property<int>("QRCardTypeId")
                        .HasColumnType("int");

                    b.HasKey("QRCardId");

                    b.HasIndex("QRCardStatusId");

                    b.HasIndex("QRCardTypeId");

                    b.ToTable("QRCards");

                    b.HasData(
                        new
                        {
                            QRCardId = 1,
                            CardGuidId = new Guid("c7d91ce2-5454-474f-99b6-4fefc9306987"),
                            CreateDate = new DateTime(2024, 9, 26, 10, 33, 39, 782, DateTimeKind.Local).AddTicks(9765),
                            LastCancelDate = new DateTime(2024, 10, 26, 10, 33, 39, 782, DateTimeKind.Local).AddTicks(9765),
                            QRCardStatusId = 1,
                            QRCardTypeId = 1
                        },
                        new
                        {
                            QRCardId = 2,
                            CardGuidId = new Guid("d7d70999-9e5f-4e97-8582-d308845325eb"),
                            CreateDate = new DateTime(2024, 9, 26, 10, 33, 39, 782, DateTimeKind.Local).AddTicks(9965),
                            LastCancelDate = new DateTime(2024, 10, 26, 10, 33, 39, 782, DateTimeKind.Local).AddTicks(9965),
                            QRCardStatusId = 1,
                            QRCardTypeId = 1
                        },
                        new
                        {
                            QRCardId = 3,
                            CardGuidId = new Guid("c1361f13-99f3-4ef0-98f0-2c660db49469"),
                            CreateDate = new DateTime(2024, 9, 26, 10, 33, 39, 782, DateTimeKind.Local).AddTicks(9976),
                            LastCancelDate = new DateTime(2024, 10, 26, 10, 33, 39, 782, DateTimeKind.Local).AddTicks(9976),
                            QRCardStatusId = 1,
                            QRCardTypeId = 1
                        },
                        new
                        {
                            QRCardId = 4,
                            CardGuidId = new Guid("f7e74be1-410b-4619-bbbf-f94b512a34cf"),
                            CreateDate = new DateTime(2024, 9, 26, 10, 33, 39, 782, DateTimeKind.Local).AddTicks(9983),
                            LastCancelDate = new DateTime(2024, 10, 26, 10, 33, 39, 782, DateTimeKind.Local).AddTicks(9983),
                            QRCardStatusId = 2,
                            QRCardTypeId = 2
                        },
                        new
                        {
                            QRCardId = 5,
                            CardGuidId = new Guid("00598625-25c4-44be-be93-ce74279a8330"),
                            CreateDate = new DateTime(2024, 9, 26, 10, 33, 39, 782, DateTimeKind.Local).AddTicks(9990),
                            LastCancelDate = new DateTime(2024, 10, 26, 10, 33, 39, 782, DateTimeKind.Local).AddTicks(9990),
                            QRCardStatusId = 2,
                            QRCardTypeId = 2
                        },
                        new
                        {
                            QRCardId = 6,
                            CardGuidId = new Guid("8411d285-9b76-4287-9abf-9e27dd8c843d"),
                            CreateDate = new DateTime(2024, 9, 26, 10, 33, 39, 782, DateTimeKind.Local).AddTicks(9996),
                            LastCancelDate = new DateTime(2024, 10, 26, 10, 33, 39, 782, DateTimeKind.Local).AddTicks(9996),
                            QRCardStatusId = 1,
                            QRCardTypeId = 2
                        },
                        new
                        {
                            QRCardId = 7,
                            CardGuidId = new Guid("02f6b50a-6b12-4c3e-89ec-74319c121ecc"),
                            CreateDate = new DateTime(2024, 9, 26, 10, 33, 39, 783, DateTimeKind.Local).AddTicks(2),
                            LastCancelDate = new DateTime(2024, 10, 26, 10, 33, 39, 783, DateTimeKind.Local).AddTicks(2),
                            QRCardStatusId = 1,
                            QRCardTypeId = 2
                        },
                        new
                        {
                            QRCardId = 8,
                            CardGuidId = new Guid("820657b7-471d-4446-b1f5-61c5509aa92e"),
                            CreateDate = new DateTime(2024, 9, 26, 10, 33, 39, 783, DateTimeKind.Local).AddTicks(21),
                            LastCancelDate = new DateTime(2024, 10, 26, 10, 33, 39, 783, DateTimeKind.Local).AddTicks(21),
                            QRCardStatusId = 1,
                            QRCardTypeId = 2
                        },
                        new
                        {
                            QRCardId = 9,
                            CardGuidId = new Guid("3ba9dca5-f5c6-4fff-84e8-ae1d76e431e4"),
                            CreateDate = new DateTime(2024, 9, 26, 10, 33, 39, 783, DateTimeKind.Local).AddTicks(36),
                            LastCancelDate = new DateTime(2024, 10, 26, 10, 33, 39, 783, DateTimeKind.Local).AddTicks(36),
                            QRCardStatusId = 1,
                            QRCardTypeId = 2
                        },
                        new
                        {
                            QRCardId = 10,
                            CardGuidId = new Guid("f9eb3fb1-e0e5-46af-96a0-a02e3cdfc97f"),
                            CreateDate = new DateTime(2024, 9, 26, 10, 33, 39, 783, DateTimeKind.Local).AddTicks(43),
                            LastCancelDate = new DateTime(2024, 10, 26, 10, 33, 39, 783, DateTimeKind.Local).AddTicks(43),
                            QRCardStatusId = 2,
                            QRCardTypeId = 1
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardStatus", b =>
                {
                    b.Property<int>("QRCardStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardStatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusNumber")
                        .HasColumnType("int");

                    b.HasKey("QRCardStatusId");

                    b.ToTable("QRCardStatus");

                    b.HasData(
                        new
                        {
                            QRCardStatusId = 1,
                            StatusName = "Active",
                            StatusNumber = 1
                        },
                        new
                        {
                            QRCardStatusId = 2,
                            StatusName = "Inactive",
                            StatusNumber = 0
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardType", b =>
                {
                    b.Property<int>("QRCardTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardTypeId"));

                    b.Property<string>("CardTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QRCardTypeId");

                    b.ToTable("QRCardType");

                    b.HasData(
                        new
                        {
                            QRCardTypeId = 1,
                            CardTypeName = "Employee",
                            TypeDescription = "Employee QR Card"
                        },
                        new
                        {
                            QRCardTypeId = 2,
                            CardTypeName = "Visitor",
                            TypeDescription = "Visitor QR Card"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Description = "Quản lý toàn bộ hệ thống",
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            Description = "Quản lý toàn bộ công ty",
                            RoleName = "Manager"
                        },
                        new
                        {
                            RoleId = 3,
                            Description = "Quản lý toàn bộ phòng ban",
                            RoleName = "DepartmentManaager"
                        },
                        new
                        {
                            RoleId = 4,
                            Description = "Tạo và quản lý khách ra vào của phòng ban",
                            RoleName = "Staff"
                        },
                        new
                        {
                            RoleId = 5,
                            Description = "Quản lý khách ra vào tại cổng",
                            RoleName = "Security"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedDate = new DateTime(2024, 3, 26, 3, 33, 39, 736, DateTimeKind.Utc).AddTicks(9874),
                            Email = "admin1@example.com",
                            FullName = "Admin One",
                            Password = "123",
                            PhoneNumber = "0123456789",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 3, 33, 39, 736, DateTimeKind.Utc).AddTicks(9883),
                            UserName = "admin1"
                        },
                        new
                        {
                            UserId = 2,
                            CreatedDate = new DateTime(2024, 6, 26, 3, 33, 39, 736, DateTimeKind.Utc).AddTicks(9886),
                            Email = "manager1@example.com",
                            FullName = "Manager One",
                            Password = "123",
                            PhoneNumber = "0987654321",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 3, 33, 39, 736, DateTimeKind.Utc).AddTicks(9887),
                            UserName = "manager1"
                        },
                        new
                        {
                            UserId = 3,
                            CreatedDate = new DateTime(2024, 7, 26, 3, 33, 39, 736, DateTimeKind.Utc).AddTicks(9888),
                            Email = "employee1@example.com",
                            FullName = "Department Manager One",
                            Password = "123",
                            PhoneNumber = "0112223334",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 3, 33, 39, 736, DateTimeKind.Utc).AddTicks(9889),
                            UserName = "DM1"
                        },
                        new
                        {
                            UserId = 4,
                            CreatedDate = new DateTime(2024, 8, 26, 3, 33, 39, 736, DateTimeKind.Utc).AddTicks(9890),
                            Email = "hr1@example.com",
                            FullName = "Staff One",
                            Password = "123",
                            PhoneNumber = "0223334445",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 3, 33, 39, 736, DateTimeKind.Utc).AddTicks(9891),
                            UserName = "Staff1"
                        },
                        new
                        {
                            UserId = 5,
                            CreatedDate = new DateTime(2024, 5, 26, 3, 33, 39, 736, DateTimeKind.Utc).AddTicks(9892),
                            Email = "it1@example.com",
                            FullName = "Security One",
                            Password = "123",
                            PhoneNumber = "0334445556",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 3, 33, 39, 736, DateTimeKind.Utc).AddTicks(9893),
                            UserName = "Security1"
                        },
                        new
                        {
                            UserId = 6,
                            CreatedDate = new DateTime(2024, 9, 19, 7, 0, 36, 308, DateTimeKind.Unspecified).AddTicks(8859),
                            Email = "gmail.com_Witting87@hotmail.com",
                            FullName = "Jake Mohr",
                            Password = "3kj8ln",
                            PhoneNumber = "0816565743",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 19, 7, 0, 36, 308, DateTimeKind.Unspecified).AddTicks(8859),
                            UserName = "Rossie_Marvin"
                        },
                        new
                        {
                            UserId = 7,
                            CreatedDate = new DateTime(2024, 9, 14, 7, 24, 45, 213, DateTimeKind.Unspecified).AddTicks(689),
                            Email = "gmail.com.Braun@hotmail.com",
                            FullName = "Damian Lehner",
                            Password = "yh37m1",
                            PhoneNumber = "0457631742",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 14, 7, 24, 45, 213, DateTimeKind.Unspecified).AddTicks(689),
                            UserName = "Macie_Pfannerstill43"
                        },
                        new
                        {
                            UserId = 8,
                            CreatedDate = new DateTime(2024, 9, 7, 1, 53, 12, 662, DateTimeKind.Unspecified).AddTicks(6751),
                            Email = "gmail.com.Graham@yahoo.com",
                            FullName = "Krystina Leffler",
                            Password = "mv3di2",
                            PhoneNumber = "0715379980",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 7, 1, 53, 12, 662, DateTimeKind.Unspecified).AddTicks(6751),
                            UserName = "Ava.Gibson28"
                        },
                        new
                        {
                            UserId = 9,
                            CreatedDate = new DateTime(2024, 9, 25, 22, 6, 14, 513, DateTimeKind.Unspecified).AddTicks(2081),
                            Email = "gmail.com_Jacobs@gmail.com",
                            FullName = "Camden Conn",
                            Password = "4ce9w0",
                            PhoneNumber = "0617720404",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 25, 22, 6, 14, 513, DateTimeKind.Unspecified).AddTicks(2081),
                            UserName = "Mabelle_Carroll"
                        },
                        new
                        {
                            UserId = 10,
                            CreatedDate = new DateTime(2024, 9, 21, 16, 1, 45, 433, DateTimeKind.Unspecified).AddTicks(4475),
                            Email = "gmail.com_Ebert26@gmail.com",
                            FullName = "Hadley Parisian",
                            Password = "s2xzb8",
                            PhoneNumber = "0751827197",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 21, 16, 1, 45, 433, DateTimeKind.Unspecified).AddTicks(4475),
                            UserName = "Barrett20"
                        },
                        new
                        {
                            UserId = 11,
                            CreatedDate = new DateTime(2024, 9, 2, 3, 7, 45, 401, DateTimeKind.Unspecified).AddTicks(5097),
                            Email = "gmail.com_Ullrich@gmail.com",
                            FullName = "Holden Williamson",
                            Password = "69ylw2",
                            PhoneNumber = "0699063021",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 2, 3, 7, 45, 401, DateTimeKind.Unspecified).AddTicks(5097),
                            UserName = "Micheal.Toy"
                        },
                        new
                        {
                            UserId = 12,
                            CreatedDate = new DateTime(2024, 9, 9, 4, 45, 16, 537, DateTimeKind.Unspecified).AddTicks(2496),
                            Email = "gmail.com_Heidenreich86@yahoo.com",
                            FullName = "Elenora Gusikowski",
                            Password = "x2pa7h",
                            PhoneNumber = "0740903208",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 9, 4, 45, 16, 537, DateTimeKind.Unspecified).AddTicks(2496),
                            UserName = "Marianne.Batz40"
                        },
                        new
                        {
                            UserId = 13,
                            CreatedDate = new DateTime(2024, 9, 8, 19, 14, 6, 946, DateTimeKind.Unspecified).AddTicks(1537),
                            Email = "gmail.com_Roob@hotmail.com",
                            FullName = "Blake Jacobson",
                            Password = "srjobn",
                            PhoneNumber = "0831496216",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 8, 19, 14, 6, 946, DateTimeKind.Unspecified).AddTicks(1537),
                            UserName = "Jermey9"
                        },
                        new
                        {
                            UserId = 14,
                            CreatedDate = new DateTime(2024, 9, 20, 21, 49, 29, 442, DateTimeKind.Unspecified).AddTicks(6733),
                            Email = "gmail.com.Borer@yahoo.com",
                            FullName = "Edwin Kulas",
                            Password = "o2doqx",
                            PhoneNumber = "0449828222",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 20, 21, 49, 29, 442, DateTimeKind.Unspecified).AddTicks(6733),
                            UserName = "Sabrina.Rice76"
                        },
                        new
                        {
                            UserId = 15,
                            CreatedDate = new DateTime(2024, 9, 12, 23, 19, 28, 69, DateTimeKind.Unspecified).AddTicks(2263),
                            Email = "gmail.com82@yahoo.com",
                            FullName = "Jeremy Hills",
                            Password = "y69063",
                            PhoneNumber = "0722110419",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 12, 23, 19, 28, 69, DateTimeKind.Unspecified).AddTicks(2263),
                            UserName = "Gwen_Sauer"
                        },
                        new
                        {
                            UserId = 16,
                            CreatedDate = new DateTime(2024, 9, 7, 22, 45, 50, 593, DateTimeKind.Unspecified).AddTicks(7056),
                            Email = "gmail.com.Crooks@hotmail.com",
                            FullName = "Okey Larkin",
                            Password = "6bdq99",
                            PhoneNumber = "0607236253",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 7, 22, 45, 50, 593, DateTimeKind.Unspecified).AddTicks(7056),
                            UserName = "Jo.Tremblay97"
                        },
                        new
                        {
                            UserId = 17,
                            CreatedDate = new DateTime(2024, 9, 15, 12, 29, 53, 22, DateTimeKind.Unspecified).AddTicks(2230),
                            Email = "gmail.com.Reinger@gmail.com",
                            FullName = "Marilyne Langosh",
                            Password = "46fp48",
                            PhoneNumber = "0120430110",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 15, 12, 29, 53, 22, DateTimeKind.Unspecified).AddTicks(2230),
                            UserName = "Barrett_DAmore"
                        },
                        new
                        {
                            UserId = 18,
                            CreatedDate = new DateTime(2024, 9, 1, 14, 1, 48, 651, DateTimeKind.Unspecified).AddTicks(3715),
                            Email = "gmail.com.Dach@gmail.com",
                            FullName = "Kiley Leffler",
                            Password = "58zo8x",
                            PhoneNumber = "0479382672",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 1, 14, 1, 48, 651, DateTimeKind.Unspecified).AddTicks(3715),
                            UserName = "Owen_Lockman46"
                        },
                        new
                        {
                            UserId = 19,
                            CreatedDate = new DateTime(2024, 9, 4, 10, 59, 11, 522, DateTimeKind.Unspecified).AddTicks(7344),
                            Email = "gmail.com.Hirthe@hotmail.com",
                            FullName = "Addie O'Kon",
                            Password = "5mgfji",
                            PhoneNumber = "0587664167",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 4, 10, 59, 11, 522, DateTimeKind.Unspecified).AddTicks(7344),
                            UserName = "Eudora.Hauck"
                        },
                        new
                        {
                            UserId = 20,
                            CreatedDate = new DateTime(2024, 9, 4, 8, 53, 11, 347, DateTimeKind.Unspecified).AddTicks(9523),
                            Email = "gmail.com7@hotmail.com",
                            FullName = "Brianne Barton",
                            Password = "p2qq8l",
                            PhoneNumber = "0701253582",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 4, 8, 53, 11, 347, DateTimeKind.Unspecified).AddTicks(9523),
                            UserName = "Bryana36"
                        },
                        new
                        {
                            UserId = 21,
                            CreatedDate = new DateTime(2024, 9, 18, 6, 33, 18, 245, DateTimeKind.Unspecified).AddTicks(5037),
                            Email = "gmail.com.Bashirian60@gmail.com",
                            FullName = "Deshaun Walker",
                            Password = "ra76yv",
                            PhoneNumber = "0377019089",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 18, 6, 33, 18, 245, DateTimeKind.Unspecified).AddTicks(5037),
                            UserName = "Brian.Casper"
                        },
                        new
                        {
                            UserId = 22,
                            CreatedDate = new DateTime(2024, 9, 25, 8, 52, 3, 822, DateTimeKind.Unspecified).AddTicks(8271),
                            Email = "gmail.com.Schiller@hotmail.com",
                            FullName = "Jannie Kshlerin",
                            Password = "rkvg0w",
                            PhoneNumber = "0917218440",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 25, 8, 52, 3, 822, DateTimeKind.Unspecified).AddTicks(8271),
                            UserName = "Jaydon.Schiller"
                        },
                        new
                        {
                            UserId = 23,
                            CreatedDate = new DateTime(2024, 9, 5, 9, 9, 44, 342, DateTimeKind.Unspecified).AddTicks(8392),
                            Email = "gmail.com22@yahoo.com",
                            FullName = "Jerald Terry",
                            Password = "x7wdm6",
                            PhoneNumber = "0495002427",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 5, 9, 9, 44, 342, DateTimeKind.Unspecified).AddTicks(8392),
                            UserName = "Lula.DAmore95"
                        },
                        new
                        {
                            UserId = 24,
                            CreatedDate = new DateTime(2024, 9, 24, 1, 35, 23, 117, DateTimeKind.Unspecified).AddTicks(7025),
                            Email = "gmail.com.Cruickshank9@gmail.com",
                            FullName = "Maurice Grady",
                            Password = "h0h3f2",
                            PhoneNumber = "0316855727",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 24, 1, 35, 23, 117, DateTimeKind.Unspecified).AddTicks(7025),
                            UserName = "Luz.OConnell"
                        },
                        new
                        {
                            UserId = 25,
                            CreatedDate = new DateTime(2024, 9, 5, 15, 29, 5, 122, DateTimeKind.Unspecified).AddTicks(163),
                            Email = "gmail.com91@gmail.com",
                            FullName = "Mavis Veum",
                            Password = "dgbapa",
                            PhoneNumber = "0725773473",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 5, 15, 29, 5, 122, DateTimeKind.Unspecified).AddTicks(163),
                            UserName = "Addison.Bergnaum71"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.UserDepartment", b =>
                {
                    b.Property<int>("UserDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserDepartmentId"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserDepartmentId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDepartments");

                    b.HasData(
                        new
                        {
                            UserDepartmentId = 1,
                            DepartmentId = 1,
                            UserId = 3
                        },
                        new
                        {
                            UserDepartmentId = 2,
                            DepartmentId = 1,
                            UserId = 4
                        },
                        new
                        {
                            UserDepartmentId = 3,
                            DepartmentId = 2,
                            UserId = 3
                        },
                        new
                        {
                            UserDepartmentId = 4,
                            DepartmentId = 5,
                            UserId = 24
                        },
                        new
                        {
                            UserDepartmentId = 5,
                            DepartmentId = 1,
                            UserId = 25
                        },
                        new
                        {
                            UserDepartmentId = 6,
                            DepartmentId = 9,
                            UserId = 21
                        },
                        new
                        {
                            UserDepartmentId = 7,
                            DepartmentId = 8,
                            UserId = 8
                        },
                        new
                        {
                            UserDepartmentId = 8,
                            DepartmentId = 5,
                            UserId = 9
                        },
                        new
                        {
                            UserDepartmentId = 9,
                            DepartmentId = 1,
                            UserId = 17
                        },
                        new
                        {
                            UserDepartmentId = 10,
                            DepartmentId = 9,
                            UserId = 15
                        },
                        new
                        {
                            UserDepartmentId = 11,
                            DepartmentId = 4,
                            UserId = 23
                        },
                        new
                        {
                            UserDepartmentId = 12,
                            DepartmentId = 1,
                            UserId = 22
                        },
                        new
                        {
                            UserDepartmentId = 13,
                            DepartmentId = 9,
                            UserId = 18
                        },
                        new
                        {
                            UserDepartmentId = 14,
                            DepartmentId = 6,
                            UserId = 8
                        },
                        new
                        {
                            UserDepartmentId = 15,
                            DepartmentId = 4,
                            UserId = 16
                        },
                        new
                        {
                            UserDepartmentId = 16,
                            DepartmentId = 6,
                            UserId = 13
                        },
                        new
                        {
                            UserDepartmentId = 17,
                            DepartmentId = 8,
                            UserId = 15
                        },
                        new
                        {
                            UserDepartmentId = 18,
                            DepartmentId = 4,
                            UserId = 14
                        },
                        new
                        {
                            UserDepartmentId = 19,
                            DepartmentId = 2,
                            UserId = 10
                        },
                        new
                        {
                            UserDepartmentId = 20,
                            DepartmentId = 9,
                            UserId = 20
                        },
                        new
                        {
                            UserDepartmentId = 21,
                            DepartmentId = 4,
                            UserId = 10
                        },
                        new
                        {
                            UserDepartmentId = 22,
                            DepartmentId = 5,
                            UserId = 21
                        },
                        new
                        {
                            UserDepartmentId = 23,
                            DepartmentId = 3,
                            UserId = 25
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.Property<int>("VehicleSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleSessionId"));

                    b.Property<DateTime>("CheckinTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckoutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GateId")
                        .HasColumnType("int");

                    b.Property<int>("SecurityID")
                        .HasColumnType("int");

                    b.Property<int>("VisitDetailId")
                        .HasColumnType("int");

                    b.HasKey("VehicleSessionId");

                    b.HasIndex("GateId");

                    b.HasIndex("SecurityID");

                    b.HasIndex("VisitDetailId");

                    b.ToTable("VehicleSessions");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSessionImage", b =>
                {
                    b.Property<int>("VehicleSessionImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleSessionImageId"));

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleSessionId")
                        .HasColumnType("int");

                    b.Property<string>("VehicleSessionImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleSessionImageId");

                    b.HasIndex("VehicleSessionId");

                    b.ToTable("VehicleSessionImages");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.Property<int>("VisitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitId"));

                    b.Property<int>("AcceptLevel")
                        .HasColumnType("int");

                    b.Property<int>("CreateById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRegister")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UpdateById")
                        .HasColumnType("int");

                    b.Property<string>("VisitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitQuantity")
                        .HasColumnType("int");

                    b.Property<string>("VisitType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitId");

                    b.HasIndex("CreateById");

                    b.HasIndex("UpdateById");

                    b.ToTable("Visits");

                    b.HasData(
                        new
                        {
                            VisitId = 1,
                            AcceptLevel = 1,
                            CreateById = 3,
                            DateRegister = new DateTime(2024, 9, 24, 10, 33, 39, 748, DateTimeKind.Local).AddTicks(2354),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        },
                        new
                        {
                            VisitId = 2,
                            AcceptLevel = 2,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 26, 3, 33, 39, 761, DateTimeKind.Utc).AddTicks(149),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        },
                        new
                        {
                            VisitId = 3,
                            AcceptLevel = 2,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 26, 3, 33, 39, 761, DateTimeKind.Utc).AddTicks(303),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        },
                        new
                        {
                            VisitId = 4,
                            AcceptLevel = 2,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 26, 3, 33, 39, 761, DateTimeKind.Utc).AddTicks(316),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        },
                        new
                        {
                            VisitId = 5,
                            AcceptLevel = 2,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 26, 3, 33, 39, 761, DateTimeKind.Utc).AddTicks(324),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        },
                        new
                        {
                            VisitId = 6,
                            AcceptLevel = 2,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 26, 3, 33, 39, 761, DateTimeKind.Utc).AddTicks(333),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.Property<int>("VisitDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitDetailId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ExpectedEndTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("ExpectedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ExpectedStartTime")
                        .HasColumnType("time");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.Property<int>("VisitorId")
                        .HasColumnType("int");

                    b.HasKey("VisitDetailId");

                    b.HasIndex("VisitId");

                    b.HasIndex("VisitorId");

                    b.ToTable("VisitDetails");

                    b.HasData(
                        new
                        {
                            VisitDetailId = 1,
                            Description = "Sed praesentium autem rem sit ipsa explicabo. Consequuntur eum quo. Ipsa non molestias nisi ipsam.",
                            ExpectedEndDate = new DateTime(2024, 10, 25, 10, 33, 39, 759, DateTimeKind.Local).AddTicks(7883),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 25, 10, 33, 39, 759, DateTimeKind.Local).AddTicks(7822),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 1,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitDetailId = 2,
                            Description = "Molestiae asperiores suscipit eaque doloremque aliquam sit hic est. Molestiae aut facilis doloribus. Ut quas ducimus atque et iure deserunt consequatur.",
                            ExpectedEndDate = new DateTime(2024, 10, 25, 10, 33, 39, 759, DateTimeKind.Local).AddTicks(8277),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 25, 10, 33, 39, 759, DateTimeKind.Local).AddTicks(8275),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 1,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitDetailId = 3,
                            Description = "Qui magnam quidem atque aliquam mollitia velit non est adipisci. Velit autem accusamus voluptas. Sed tenetur inventore optio necessitatibus modi enim.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 33, 39, 762, DateTimeKind.Local).AddTicks(2095),
                            ExpectedEndTime = new TimeSpan(0, 0, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 33, 39, 762, DateTimeKind.Local).AddTicks(2126),
                            ExpectedStartTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = true,
                            VisitId = 2,
                            VisitorId = 3
                        },
                        new
                        {
                            VisitDetailId = 4,
                            Description = "Quia nam impedit recusandae natus explicabo. Voluptas dolore laudantium ut et vel sed. Id odit et voluptatem similique tempore id explicabo placeat. Ipsa sit reiciendis et quos cum omnis corrupti dolores officia. Odit cumque minus rem nesciunt quisquam quas.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 33, 39, 762, DateTimeKind.Local).AddTicks(2382),
                            ExpectedEndTime = new TimeSpan(0, 0, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 33, 39, 762, DateTimeKind.Local).AddTicks(2385),
                            ExpectedStartTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = true,
                            VisitId = 2,
                            VisitorId = 8
                        },
                        new
                        {
                            VisitDetailId = 5,
                            Description = "Deserunt quis dolorem est dolor voluptas quaerat. Aut ut quaerat non. Quam ducimus dolores nisi tempora aliquid.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 33, 39, 763, DateTimeKind.Local).AddTicks(5718),
                            ExpectedEndTime = new TimeSpan(0, 0, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 33, 39, 763, DateTimeKind.Local).AddTicks(5749),
                            ExpectedStartTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = false,
                            VisitId = 2,
                            VisitorId = 9
                        },
                        new
                        {
                            VisitDetailId = 6,
                            Description = "Et nam omnis ea laboriosam omnis perspiciatis soluta ut similique. Ut omnis culpa et necessitatibus. Amet delectus fugiat ipsam neque corrupti cumque in molestiae alias.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 33, 39, 763, DateTimeKind.Local).AddTicks(5952),
                            ExpectedEndTime = new TimeSpan(0, 0, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 33, 39, 763, DateTimeKind.Local).AddTicks(5954),
                            ExpectedStartTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = false,
                            VisitId = 2,
                            VisitorId = 7
                        },
                        new
                        {
                            VisitDetailId = 7,
                            Description = "Et molestiae labore a qui. Deserunt veniam voluptas et magni dolore eligendi voluptatibus aut rem. Sit voluptatem eligendi ut. Placeat debitis possimus ut debitis earum accusantium ad blanditiis omnis.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 33, 39, 764, DateTimeKind.Local).AddTicks(7938),
                            ExpectedEndTime = new TimeSpan(0, 0, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 33, 39, 764, DateTimeKind.Local).AddTicks(7965),
                            ExpectedStartTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = true,
                            VisitId = 2,
                            VisitorId = 6
                        },
                        new
                        {
                            VisitDetailId = 8,
                            Description = "Natus ut et a dolore voluptatem ipsum. Laborum rerum tempora error ut dolore dolore iste nihil. Hic molestias quia quia. Doloremque aspernatur soluta.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 33, 39, 764, DateTimeKind.Local).AddTicks(8304),
                            ExpectedEndTime = new TimeSpan(0, 0, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 33, 39, 764, DateTimeKind.Local).AddTicks(8307),
                            ExpectedStartTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = false,
                            VisitId = 2,
                            VisitorId = 4
                        },
                        new
                        {
                            VisitDetailId = 9,
                            Description = "Commodi perspiciatis officiis. Aliquam ut impedit quaerat perspiciatis nobis dolorem quis distinctio similique. Officia hic officiis repudiandae incidunt nulla aut facere.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 33, 39, 765, DateTimeKind.Local).AddTicks(9307),
                            ExpectedEndTime = new TimeSpan(0, 0, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 33, 39, 765, DateTimeKind.Local).AddTicks(9336),
                            ExpectedStartTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = true,
                            VisitId = 3,
                            VisitorId = 3
                        },
                        new
                        {
                            VisitDetailId = 10,
                            Description = "Nihil quo minus aperiam eligendi ea nemo voluptatem cumque. Doloremque cumque illo molestiae odit corporis et optio deserunt. Aut libero omnis. Nam quisquam beatae blanditiis maxime.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 33, 39, 765, DateTimeKind.Local).AddTicks(9529),
                            ExpectedEndTime = new TimeSpan(0, 0, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 33, 39, 765, DateTimeKind.Local).AddTicks(9532),
                            ExpectedStartTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = true,
                            VisitId = 3,
                            VisitorId = 6
                        },
                        new
                        {
                            VisitDetailId = 11,
                            Description = "Quia excepturi tempore eius et et distinctio odio. Quis ut animi voluptas architecto quia. Voluptatem sit voluptatem enim rerum asperiores perferendis consequatur maiores molestiae.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 33, 39, 767, DateTimeKind.Local).AddTicks(436),
                            ExpectedEndTime = new TimeSpan(0, 0, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 33, 39, 767, DateTimeKind.Local).AddTicks(462),
                            ExpectedStartTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = true,
                            VisitId = 3,
                            VisitorId = 4
                        },
                        new
                        {
                            VisitDetailId = 12,
                            Description = "Est consequatur qui suscipit quas dicta minima nisi alias cum. Ea rerum deserunt sit placeat possimus commodi quia. Temporibus dignissimos quibusdam et dolore deleniti velit. Voluptatum aut excepturi neque magni.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 33, 39, 767, DateTimeKind.Local).AddTicks(660),
                            ExpectedEndTime = new TimeSpan(0, 0, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 33, 39, 767, DateTimeKind.Local).AddTicks(662),
                            ExpectedStartTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = false,
                            VisitId = 3,
                            VisitorId = 5
                        },
                        new
                        {
                            VisitDetailId = 13,
                            Description = "Quos eius alias. Et facere qui quia debitis distinctio laudantium ipsam. Et et animi expedita culpa mollitia. Tenetur tempore dolorum deleniti ea. Soluta quam officia sed omnis qui qui sed. Ut sed ea qui et consequatur modi molestias velit.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 33, 39, 770, DateTimeKind.Local).AddTicks(319),
                            ExpectedEndTime = new TimeSpan(0, 0, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 33, 39, 770, DateTimeKind.Local).AddTicks(364),
                            ExpectedStartTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = false,
                            VisitId = 3,
                            VisitorId = 3
                        },
                        new
                        {
                            VisitDetailId = 14,
                            Description = "Cupiditate culpa inventore laborum sint aspernatur voluptatibus dolorem ut tenetur. Dolor voluptatem qui numquam aut corrupti excepturi rerum nulla. Itaque et nam est quasi omnis. Ea repellendus illum. Voluptatem neque architecto incidunt ut amet.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 33, 39, 770, DateTimeKind.Local).AddTicks(617),
                            ExpectedEndTime = new TimeSpan(0, 0, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 33, 39, 770, DateTimeKind.Local).AddTicks(619),
                            ExpectedStartTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = true,
                            VisitId = 3,
                            VisitorId = 5
                        },
                        new
                        {
                            VisitDetailId = 15,
                            Description = "Doloribus eligendi incidunt qui aut velit assumenda nam. Rerum ducimus enim quae. Odit velit nisi pariatur occaecati perferendis dolores accusamus consectetur est.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 33, 39, 771, DateTimeKind.Local).AddTicks(4610),
                            ExpectedEndTime = new TimeSpan(0, 0, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 33, 39, 771, DateTimeKind.Local).AddTicks(4712),
                            ExpectedStartTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 4
                        },
                        new
                        {
                            VisitDetailId = 16,
                            Description = "Rerum ullam iusto dignissimos facere hic non. Labore asperiores explicabo tenetur aliquam veniam magnam repudiandae quo quibusdam. Pariatur accusantium deleniti similique corrupti deserunt qui. Maiores et id neque est nobis eum.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 33, 39, 771, DateTimeKind.Local).AddTicks(5157),
                            ExpectedEndTime = new TimeSpan(0, 0, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 33, 39, 771, DateTimeKind.Local).AddTicks(5160),
                            ExpectedStartTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 7
                        },
                        new
                        {
                            VisitDetailId = 17,
                            Description = "Fugiat qui occaecati. Deleniti aperiam cumque rerum et sit exercitationem optio recusandae. In eveniet animi id architecto magnam qui in ipsum repellat.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 33, 39, 772, DateTimeKind.Local).AddTicks(8703),
                            ExpectedEndTime = new TimeSpan(0, 0, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 33, 39, 772, DateTimeKind.Local).AddTicks(8734),
                            ExpectedStartTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 6
                        },
                        new
                        {
                            VisitDetailId = 18,
                            Description = "Cum iste quia recusandae error accusamus. Corrupti quis et et id autem qui omnis. Laboriosam libero quo harum neque voluptas nemo occaecati atque. In beatae non eveniet rerum ducimus aut.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 33, 39, 772, DateTimeKind.Local).AddTicks(8937),
                            ExpectedEndTime = new TimeSpan(0, 0, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 33, 39, 772, DateTimeKind.Local).AddTicks(8940),
                            ExpectedStartTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = false,
                            VisitId = 4,
                            VisitorId = 6
                        },
                        new
                        {
                            VisitDetailId = 19,
                            Description = "Explicabo veritatis ipsa rem iste eaque perspiciatis rem. Totam consequatur consectetur ut inventore ut id eligendi. Molestias at minima dolores. Adipisci et corporis numquam sed eum. Provident quo deleniti porro consequatur ipsum neque molestiae.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 33, 39, 773, DateTimeKind.Local).AddTicks(9997),
                            ExpectedEndTime = new TimeSpan(0, 0, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 33, 39, 774, DateTimeKind.Local).AddTicks(23),
                            ExpectedStartTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 6
                        },
                        new
                        {
                            VisitDetailId = 20,
                            Description = "Voluptatibus libero totam doloremque enim amet. Corporis doloribus vitae aut suscipit non accusantium. Sed dicta dolorem ut quae aliquam natus porro. Vel dolorem id soluta eos. Nesciunt ut dolor. Tempora nisi quas recusandae magni dicta dicta.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 33, 39, 774, DateTimeKind.Local).AddTicks(234),
                            ExpectedEndTime = new TimeSpan(0, 0, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 33, 39, 774, DateTimeKind.Local).AddTicks(236),
                            ExpectedStartTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 10
                        },
                        new
                        {
                            VisitDetailId = 21,
                            Description = "Et omnis omnis laborum aliquam sit. Facere architecto dolores est repellendus molestiae magni. Enim non repellendus iste nam id. Quidem blanditiis aspernatur. Nostrum rerum dolores ullam molestiae odit quo fugit consequatur. Reiciendis et voluptas ut cupiditate amet quo laudantium.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 33, 39, 775, DateTimeKind.Local).AddTicks(1254),
                            ExpectedEndTime = new TimeSpan(0, 0, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 33, 39, 775, DateTimeKind.Local).AddTicks(1283),
                            ExpectedStartTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = false,
                            VisitId = 5,
                            VisitorId = 9
                        },
                        new
                        {
                            VisitDetailId = 22,
                            Description = "Facere in nesciunt necessitatibus. Quos quia est velit. Sed fuga temporibus impedit sint et inventore. Soluta quis qui qui explicabo magni rem. Iste dolore consequatur commodi est inventore in voluptas illum.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 33, 39, 775, DateTimeKind.Local).AddTicks(1491),
                            ExpectedEndTime = new TimeSpan(0, 0, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 33, 39, 775, DateTimeKind.Local).AddTicks(1493),
                            ExpectedStartTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = true,
                            VisitId = 5,
                            VisitorId = 9
                        },
                        new
                        {
                            VisitDetailId = 23,
                            Description = "Voluptates illo voluptas modi perspiciatis ducimus quidem fuga sed. Et maiores veritatis officiis soluta. Aspernatur asperiores reprehenderit dolorem voluptatem adipisci. Sunt quia maiores magnam sequi voluptatem est repudiandae. Excepturi explicabo nihil minima sit praesentium aliquid. Doloremque nobis dolorum libero sed voluptas exercitationem.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 33, 39, 776, DateTimeKind.Local).AddTicks(2168),
                            ExpectedEndTime = new TimeSpan(0, 0, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 33, 39, 776, DateTimeKind.Local).AddTicks(2212),
                            ExpectedStartTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = true,
                            VisitId = 5,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitDetailId = 24,
                            Description = "Cupiditate ipsum autem ut voluptas at rerum occaecati. Molestiae exercitationem dolore est molestiae repudiandae deleniti rerum est. Et id ut. Itaque delectus qui excepturi vero provident.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 33, 39, 776, DateTimeKind.Local).AddTicks(2395),
                            ExpectedEndTime = new TimeSpan(0, 0, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 33, 39, 776, DateTimeKind.Local).AddTicks(2397),
                            ExpectedStartTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = true,
                            VisitId = 5,
                            VisitorId = 5
                        },
                        new
                        {
                            VisitDetailId = 25,
                            Description = "Illo et aut. Repellendus tempora corporis architecto culpa maiores inventore aut hic sit. Incidunt expedita doloribus quisquam sit.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 33, 39, 777, DateTimeKind.Local).AddTicks(3002),
                            ExpectedEndTime = new TimeSpan(0, 0, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 33, 39, 777, DateTimeKind.Local).AddTicks(3030),
                            ExpectedStartTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = false,
                            VisitId = 5,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitDetailId = 26,
                            Description = "Quae deleniti magni id iure nemo. Autem corporis veniam. Ut iure esse quidem assumenda est fugit pariatur assumenda consequuntur. Voluptatem in consequatur quia dignissimos qui dolores tempora beatae totam. Est in corrupti excepturi quia hic veritatis laudantium rerum.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 33, 39, 777, DateTimeKind.Local).AddTicks(3328),
                            ExpectedEndTime = new TimeSpan(0, 0, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 33, 39, 777, DateTimeKind.Local).AddTicks(3330),
                            ExpectedStartTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = false,
                            VisitId = 5,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitDetailId = 27,
                            Description = "Debitis veritatis fuga aut deserunt. Atque vel sunt sed consequatur dolorem velit. Soluta dolorem dolores omnis nemo architecto sit. Beatae sed quia expedita dolor consequuntur quia. Laborum cumque aspernatur saepe dolores cumque fuga aut.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 33, 39, 778, DateTimeKind.Local).AddTicks(3789),
                            ExpectedEndTime = new TimeSpan(0, 0, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 33, 39, 778, DateTimeKind.Local).AddTicks(3817),
                            ExpectedStartTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = false,
                            VisitId = 6,
                            VisitorId = 10
                        },
                        new
                        {
                            VisitDetailId = 28,
                            Description = "Rerum doloribus nam magni pariatur beatae recusandae dolores quibusdam. Aperiam facilis quam adipisci ea laudantium recusandae aut. Maxime ut totam sapiente nostrum blanditiis eveniet. Veniam debitis sunt dolorem non. Aut eaque minus expedita doloribus est qui.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 33, 39, 778, DateTimeKind.Local).AddTicks(4030),
                            ExpectedEndTime = new TimeSpan(0, 0, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 33, 39, 778, DateTimeKind.Local).AddTicks(4032),
                            ExpectedStartTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = false,
                            VisitId = 6,
                            VisitorId = 4
                        },
                        new
                        {
                            VisitDetailId = 29,
                            Description = "Debitis ratione eaque exercitationem reprehenderit et vero sunt exercitationem corporis. Corrupti aliquid eos quasi fugiat eum. Vel velit incidunt quis quibusdam omnis hic facere. Quia hic ipsam sed facere facere cumque qui dolorem. Itaque est ea id culpa ducimus aut. Necessitatibus enim quae eum culpa velit quidem et.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 33, 39, 780, DateTimeKind.Local).AddTicks(3824),
                            ExpectedEndTime = new TimeSpan(0, 0, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 33, 39, 780, DateTimeKind.Local).AddTicks(3856),
                            ExpectedStartTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = true,
                            VisitId = 6,
                            VisitorId = 4
                        },
                        new
                        {
                            VisitDetailId = 30,
                            Description = "Quae quaerat molestias nesciunt. Delectus animi ea inventore quo. Aliquid provident voluptatem vitae voluptate nihil est culpa.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 33, 39, 780, DateTimeKind.Local).AddTicks(4031),
                            ExpectedEndTime = new TimeSpan(0, 0, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 33, 39, 780, DateTimeKind.Local).AddTicks(4033),
                            ExpectedStartTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = false,
                            VisitId = 6,
                            VisitorId = 8
                        },
                        new
                        {
                            VisitDetailId = 31,
                            Description = "Quas nisi molestiae et ullam sint. Voluptatem blanditiis minus veniam. Id natus consectetur ut tempora illum sint quia. Beatae sint sapiente quia sunt quam. Quia modi in doloremque.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 33, 39, 781, DateTimeKind.Local).AddTicks(5498),
                            ExpectedEndTime = new TimeSpan(0, 0, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 33, 39, 781, DateTimeKind.Local).AddTicks(5527),
                            ExpectedStartTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = true,
                            VisitId = 6,
                            VisitorId = 7
                        },
                        new
                        {
                            VisitDetailId = 32,
                            Description = "Voluptatem sapiente voluptas consequatur sunt rem et nihil neque est. Iste possimus veniam voluptatem alias. Fugiat aut voluptas labore qui laborum aut.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 33, 39, 781, DateTimeKind.Local).AddTicks(5783),
                            ExpectedEndTime = new TimeSpan(0, 0, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 33, 39, 781, DateTimeKind.Local).AddTicks(5785),
                            ExpectedStartTime = new TimeSpan(0, 0, 0, 0, 0),
                            Status = false,
                            VisitId = 6,
                            VisitorId = 1
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitProcess", b =>
                {
                    b.Property<int>("VisitProcessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitProcessId"));

                    b.Property<string>("DaysOfProcess")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ExpectedEndTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("ExpectedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ExpectedStartTime")
                        .HasColumnType("time");

                    b.Property<int>("ProcessId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.Property<int>("VisitQuantity")
                        .HasColumnType("int");

                    b.HasKey("VisitProcessId");

                    b.HasIndex("ProcessId");

                    b.HasIndex("VisitId");

                    b.ToTable("VisitProjects");

                    b.HasData(
                        new
                        {
                            VisitProcessId = 1,
                            DaysOfProcess = "Monday",
                            ExpectedEndDate = new DateTime(2024, 10, 25, 10, 33, 39, 749, DateTimeKind.Local).AddTicks(3522),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 25, 10, 33, 39, 749, DateTimeKind.Local).AddTicks(3488),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            ProcessId = 1,
                            Status = "Processing",
                            VisitId = 1,
                            VisitQuantity = 2
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitType", b =>
                {
                    b.Property<int>("VisitTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitTypeId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VisitTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitTypeId");

                    b.ToTable("VisitTypes");

                    b.HasData(
                        new
                        {
                            VisitTypeId = 1,
                            Description = "Process trong tuần",
                            VisitTypeName = "ProcessWeek"
                        },
                        new
                        {
                            VisitTypeId = 2,
                            Description = "Process trong tháng",
                            VisitTypeName = "ProcessMonth"
                        },
                        new
                        {
                            VisitTypeId = 3,
                            Description = "Project",
                            VisitTypeName = "Project"
                        },
                        new
                        {
                            VisitTypeId = 4,
                            Description = "Visit được tạo bởi staff",
                            VisitTypeName = "VisitStaff"
                        },
                        new
                        {
                            VisitTypeId = 5,
                            Description = "Visit được tạo bởi security",
                            VisitTypeName = "VisitSecurity"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.Property<int>("VisitorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorId"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreateById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CredentialCardTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CredentialsCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("VisitorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitorId");

                    b.HasIndex("CreateById");

                    b.HasIndex("CredentialCardTypeId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Visitors");

                    b.HasData(
                        new
                        {
                            VisitorId = 1,
                            CompanyName = "Veum - Macejkovic",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 16, 5, 2, 48, 837, DateTimeKind.Unspecified).AddTicks(1954),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "fla2me9dro",
                            PhoneNumber = "0366515124",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 16, 5, 2, 48, 837, DateTimeKind.Unspecified).AddTicks(1954),
                            VisitorName = "Elbert Rippin"
                        },
                        new
                        {
                            VisitorId = 2,
                            CompanyName = "Thompson - Brown",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 6, 18, 0, 59, 557, DateTimeKind.Unspecified).AddTicks(3059),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "jc8hwp17jr",
                            PhoneNumber = "0424629675",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 6, 18, 0, 59, 557, DateTimeKind.Unspecified).AddTicks(3059),
                            VisitorName = "Ashly Kessler"
                        },
                        new
                        {
                            VisitorId = 3,
                            CompanyName = "Kirlin - Veum",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 25, 0, 18, 15, 246, DateTimeKind.Unspecified).AddTicks(5086),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "04hiqp4rte",
                            PhoneNumber = "0150176053",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 25, 0, 18, 15, 246, DateTimeKind.Unspecified).AddTicks(5086),
                            VisitorName = "Alexander Robel"
                        },
                        new
                        {
                            VisitorId = 4,
                            CompanyName = "Friesen Group",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 13, 17, 13, 22, 423, DateTimeKind.Unspecified).AddTicks(3486),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "z878cushvu",
                            PhoneNumber = "0913845818",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 13, 17, 13, 22, 423, DateTimeKind.Unspecified).AddTicks(3486),
                            VisitorName = "Hanna Monahan"
                        },
                        new
                        {
                            VisitorId = 5,
                            CompanyName = "Lubowitz, Hoppe and Kilback",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 18, 0, 51, 0, 481, DateTimeKind.Unspecified).AddTicks(5150),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "fy48mcdqne",
                            PhoneNumber = "0270704305",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 18, 0, 51, 0, 481, DateTimeKind.Unspecified).AddTicks(5150),
                            VisitorName = "Addison Zulauf"
                        },
                        new
                        {
                            VisitorId = 6,
                            CompanyName = "O'Kon - Kilback",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 5, 19, 7, 29, 233, DateTimeKind.Unspecified).AddTicks(1471),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "xpyivd0v6t",
                            PhoneNumber = "0702122086",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 5, 19, 7, 29, 233, DateTimeKind.Unspecified).AddTicks(1471),
                            VisitorName = "Alicia Smith"
                        },
                        new
                        {
                            VisitorId = 7,
                            CompanyName = "Ledner - Wolf",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 12, 22, 27, 29, 304, DateTimeKind.Unspecified).AddTicks(6576),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "0q98jaomat",
                            PhoneNumber = "0216217526",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 12, 22, 27, 29, 304, DateTimeKind.Unspecified).AddTicks(6576),
                            VisitorName = "Karen Roberts"
                        },
                        new
                        {
                            VisitorId = 8,
                            CompanyName = "Gleichner - Wilkinson",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 2, 20, 31, 47, 691, DateTimeKind.Unspecified).AddTicks(2915),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "3ad836w0e0",
                            PhoneNumber = "0329699322",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 2, 20, 31, 47, 691, DateTimeKind.Unspecified).AddTicks(2915),
                            VisitorName = "Destin Quigley"
                        },
                        new
                        {
                            VisitorId = 9,
                            CompanyName = "Balistreri - Rau",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 7, 15, 52, 35, 822, DateTimeKind.Unspecified).AddTicks(9562),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "im1cxlc8lo",
                            PhoneNumber = "0108138373",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 7, 15, 52, 35, 822, DateTimeKind.Unspecified).AddTicks(9562),
                            VisitorName = "Keanu Zemlak"
                        },
                        new
                        {
                            VisitorId = 10,
                            CompanyName = "Kling, VonRueden and Donnelly",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 4, 2, 48, 47, 925, DateTimeKind.Unspecified).AddTicks(995),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "fdv8ktqskj",
                            PhoneNumber = "0707725852",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 4, 2, 48, 47, 925, DateTimeKind.Unspecified).AddTicks(995),
                            VisitorName = "Baron Kulas"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.Property<int>("VisitorSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorSessionId"));

                    b.Property<DateTime>("CheckinTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CheckoutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GateInId")
                        .HasColumnType("int");

                    b.Property<int?>("GateOutId")
                        .HasColumnType("int");

                    b.Property<int>("QRCardId")
                        .HasColumnType("int");

                    b.Property<int>("SecurityInId")
                        .HasColumnType("int");

                    b.Property<int?>("SecurityOutId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitDetailId")
                        .HasColumnType("int");

                    b.HasKey("VisitorSessionId");

                    b.HasIndex("GateInId");

                    b.HasIndex("GateOutId");

                    b.HasIndex("QRCardId");

                    b.HasIndex("SecurityInId");

                    b.HasIndex("SecurityOutId");

                    b.HasIndex("VisitDetailId");

                    b.ToTable("VisitorSessions");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSessionsImage", b =>
                {
                    b.Property<int>("VisitorSessionsImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorSessionsImageId"));

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitorSessionId")
                        .HasColumnType("int");

                    b.HasKey("VisitorSessionsImageId");

                    b.HasIndex("VisitorSessionId");

                    b.ToTable("VisitorSessionsImages");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.NotificationUsers", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Notification", "Notification")
                        .WithMany("NotificationUsers")
                        .HasForeignKey("NotificationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Receiver")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Sender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Process", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.User", "User")
                        .WithMany("Project")
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.VisitType", "VisitType")
                        .WithMany("VisitTypes")
                        .HasForeignKey("VisitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("VisitType");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.QRCardStatus", "QRCardStatus")
                        .WithMany("QRCards")
                        .HasForeignKey("QRCardStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.QRCardType", "QRCardType")
                        .WithMany("QRCards")
                        .HasForeignKey("QRCardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QRCardStatus");

                    b.Navigation("QRCardType");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Role", "Role")
                        .WithMany("User")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.UserDepartment", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Department", "Department")
                        .WithMany("UserDepartment")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "User")
                        .WithMany("UserDepartment")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Gate", "Gate")
                        .WithMany("VehicleSession")
                        .HasForeignKey("GateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Security")
                        .WithMany("VehicleSession")
                        .HasForeignKey("SecurityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.VisitDetail", "VisitDetail")
                        .WithMany("VehicleSession")
                        .HasForeignKey("VisitDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gate");

                    b.Navigation("Security");

                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSessionImage", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.VehicleSession", "VehicleSession")
                        .WithMany("Images")
                        .HasForeignKey("VehicleSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.User", "CreateBy")
                        .WithMany("CreatedVisits")
                        .HasForeignKey("CreateById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "UpdateBy")
                        .WithMany("UpdatedVisits")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreateBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Visit", "Visit")
                        .WithMany("VisitDetail")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Visitor", "Visitor")
                        .WithMany("VisitDetail")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visit");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitProcess", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Process", "Process")
                        .WithMany("VisitProject")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Visit", "Visit")
                        .WithMany("VisitProject")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Process");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.UserDepartment", "UserDepartment")
                        .WithMany("Visitors")
                        .HasForeignKey("CreateById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.CredentialCardType", "CredentialCardType")
                        .WithMany("Visitor")
                        .HasForeignKey("CredentialCardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "User")
                        .WithOne("Visitor")
                        .HasForeignKey("SecurityGateApv.Domain.Models.Visitor", "UserId");

                    b.Navigation("CredentialCardType");

                    b.Navigation("User");

                    b.Navigation("UserDepartment");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Gate", "GateIn")
                        .WithMany("VisitorSessionsIn")
                        .HasForeignKey("GateInId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Gate", "GateOut")
                        .WithMany("VisitorSessionsOut")
                        .HasForeignKey("GateOutId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SecurityGateApv.Domain.Models.QRCard", "QRCard")
                        .WithMany("VisitorSession")
                        .HasForeignKey("QRCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "SecurityIn")
                        .WithMany("SecurityInSessions")
                        .HasForeignKey("SecurityInId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "SecurityOut")
                        .WithMany("SecurityOutSessions")
                        .HasForeignKey("SecurityOutId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SecurityGateApv.Domain.Models.VisitDetail", "VisitDetail")
                        .WithMany("VisitorSession")
                        .HasForeignKey("VisitDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GateIn");

                    b.Navigation("GateOut");

                    b.Navigation("QRCard");

                    b.Navigation("SecurityIn");

                    b.Navigation("SecurityOut");

                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSessionsImage", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.VisitorSession", "VisitorSession")
                        .WithMany("Images")
                        .HasForeignKey("VisitorSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.CredentialCardType", b =>
                {
                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Department", b =>
                {
                    b.Navigation("UserDepartment");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Gate", b =>
                {
                    b.Navigation("VehicleSession");

                    b.Navigation("VisitorSessionsIn");

                    b.Navigation("VisitorSessionsOut");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Notification", b =>
                {
                    b.Navigation("NotificationUsers");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Process", b =>
                {
                    b.Navigation("VisitProject");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardStatus", b =>
                {
                    b.Navigation("QRCards");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardType", b =>
                {
                    b.Navigation("QRCards");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Role", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.Navigation("CreatedVisits");

                    b.Navigation("Project");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("SecurityInSessions");

                    b.Navigation("SecurityOutSessions");

                    b.Navigation("SentNotifications");

                    b.Navigation("UpdatedVisits");

                    b.Navigation("UserDepartment");

                    b.Navigation("VehicleSession");

                    b.Navigation("Visitor")
                        .IsRequired();
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.UserDepartment", b =>
                {
                    b.Navigation("Visitors");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.Navigation("VisitDetail");

                    b.Navigation("VisitProject");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.Navigation("VehicleSession");

                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitType", b =>
                {
                    b.Navigation("VisitTypes");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
