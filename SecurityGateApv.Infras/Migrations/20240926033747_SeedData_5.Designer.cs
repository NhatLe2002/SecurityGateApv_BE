// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SecurityGateApv.Infras.DBContext;

#nullable disable

namespace SecurityGateApv.Infras.Migrations
{
    [DbContext(typeof(SecurityGateApvDbContext))]
    [Migration("20240926033747_SeedData_5")]
    partial class SeedData_5
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SecurityGateApv.Domain.Models.CredentialCardType", b =>
                {
                    b.Property<int>("CredentialCardTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CredentialCardTypeId"));

                    b.Property<string>("CredentialCardTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CredentialCardTypeId");

                    b.ToTable("CredentialCardTypes");

                    b.HasData(
                        new
                        {
                            CredentialCardTypeId = 1,
                            CredentialCardTypeName = "Căn cước công dân"
                        },
                        new
                        {
                            CredentialCardTypeId = 2,
                            CredentialCardTypeName = "Giấy phép lái xe"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<int>("AcceptLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            AcceptLevel = 1,
                            CreateDate = new DateTime(2024, 9, 21, 6, 34, 11, 248, DateTimeKind.Utc).AddTicks(6602),
                            DepartmentName = "Phòng Chăm sóc khách hàng",
                            Description = "Quam iure non.",
                            UpdatedDate = new DateTime(2024, 9, 21, 6, 34, 11, 248, DateTimeKind.Utc).AddTicks(6602)
                        },
                        new
                        {
                            DepartmentId = 2,
                            AcceptLevel = 5,
                            CreateDate = new DateTime(2024, 9, 22, 18, 42, 20, 926, DateTimeKind.Utc).AddTicks(350),
                            DepartmentName = "Phòng Nhân sự",
                            Description = "Accusamus id corporis enim.",
                            UpdatedDate = new DateTime(2024, 9, 22, 18, 42, 20, 926, DateTimeKind.Utc).AddTicks(350)
                        },
                        new
                        {
                            DepartmentId = 3,
                            AcceptLevel = 2,
                            CreateDate = new DateTime(2024, 9, 15, 12, 25, 59, 440, DateTimeKind.Utc).AddTicks(3325),
                            DepartmentName = "Phòng R&D",
                            Description = "Vero est ex.",
                            UpdatedDate = new DateTime(2024, 9, 15, 12, 25, 59, 440, DateTimeKind.Utc).AddTicks(3325)
                        },
                        new
                        {
                            DepartmentId = 4,
                            AcceptLevel = 1,
                            CreateDate = new DateTime(2024, 9, 3, 20, 21, 27, 45, DateTimeKind.Utc).AddTicks(9847),
                            DepartmentName = "Phòng Nhân sự",
                            Description = "Consequuntur eum reprehenderit sunt tenetur ad eligendi qui.",
                            UpdatedDate = new DateTime(2024, 9, 3, 20, 21, 27, 45, DateTimeKind.Utc).AddTicks(9847)
                        },
                        new
                        {
                            DepartmentId = 5,
                            AcceptLevel = 4,
                            CreateDate = new DateTime(2024, 9, 4, 9, 20, 48, 357, DateTimeKind.Utc).AddTicks(7729),
                            DepartmentName = "Phòng Pháp chế",
                            Description = "Sit qui quod enim a quam est aut.",
                            UpdatedDate = new DateTime(2024, 9, 4, 9, 20, 48, 357, DateTimeKind.Utc).AddTicks(7729)
                        },
                        new
                        {
                            DepartmentId = 6,
                            AcceptLevel = 5,
                            CreateDate = new DateTime(2024, 9, 7, 11, 55, 13, 592, DateTimeKind.Utc).AddTicks(5825),
                            DepartmentName = "Phòng R&D",
                            Description = "Esse voluptatem minus dolores commodi voluptas.",
                            UpdatedDate = new DateTime(2024, 9, 7, 11, 55, 13, 592, DateTimeKind.Utc).AddTicks(5825)
                        },
                        new
                        {
                            DepartmentId = 7,
                            AcceptLevel = 1,
                            CreateDate = new DateTime(2024, 9, 25, 11, 53, 53, 220, DateTimeKind.Utc).AddTicks(9329),
                            DepartmentName = "Phòng Kinh doanh",
                            Description = "Et accusantium nesciunt et.",
                            UpdatedDate = new DateTime(2024, 9, 25, 11, 53, 53, 220, DateTimeKind.Utc).AddTicks(9329)
                        },
                        new
                        {
                            DepartmentId = 8,
                            AcceptLevel = 1,
                            CreateDate = new DateTime(2024, 9, 25, 13, 15, 48, 720, DateTimeKind.Utc).AddTicks(7835),
                            DepartmentName = "Phòng Hành chính",
                            Description = "Non voluptates consequuntur saepe odit minima quam nemo dolorem suscipit.",
                            UpdatedDate = new DateTime(2024, 9, 25, 13, 15, 48, 720, DateTimeKind.Utc).AddTicks(7835)
                        },
                        new
                        {
                            DepartmentId = 9,
                            AcceptLevel = 5,
                            CreateDate = new DateTime(2024, 9, 11, 6, 51, 1, 178, DateTimeKind.Utc).AddTicks(1393),
                            DepartmentName = "Phòng Pháp chế",
                            Description = "Et odio debitis cumque perferendis sunt.",
                            UpdatedDate = new DateTime(2024, 9, 11, 6, 51, 1, 178, DateTimeKind.Utc).AddTicks(1393)
                        },
                        new
                        {
                            DepartmentId = 10,
                            AcceptLevel = 4,
                            CreateDate = new DateTime(2024, 9, 13, 8, 10, 17, 906, DateTimeKind.Utc).AddTicks(6360),
                            DepartmentName = "Phòng IT",
                            Description = "Et quidem aut.",
                            UpdatedDate = new DateTime(2024, 9, 13, 8, 10, 17, 906, DateTimeKind.Utc).AddTicks(6360)
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Gate", b =>
                {
                    b.Property<int>("GateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GateId"));

                    b.Property<string>("GateCoordinate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GateId");

                    b.ToTable("Gates");

                    b.HasData(
                        new
                        {
                            GateId = 1,
                            GateCoordinate = "Ra vào trong ngày",
                            GateName = "Cổng 1"
                        },
                        new
                        {
                            GateId = 2,
                            GateCoordinate = "Ra vào trong ngày",
                            GateName = "Cổng 2"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.NotificationUsers", b =>
                {
                    b.Property<int>("NotificationUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationUserID"));

                    b.Property<int>("NotificationID")
                        .HasColumnType("int");

                    b.Property<bool>("ReadStatus")
                        .HasColumnType("bit");

                    b.Property<int>("ReceiverID")
                        .HasColumnType("int");

                    b.Property<int>("SenderID")
                        .HasColumnType("int");

                    b.HasKey("NotificationUserID");

                    b.HasIndex("NotificationID");

                    b.HasIndex("ReceiverID");

                    b.HasIndex("SenderID");

                    b.ToTable("NotificationUsers");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Process", b =>
                {
                    b.Property<int>("ProcessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProcessId"));

                    b.Property<int>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("VisitTypeId")
                        .HasColumnType("int");

                    b.HasKey("ProcessId");

                    b.HasIndex("CreateBy");

                    b.HasIndex("VisitTypeId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            ProcessId = 1,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 24, 3, 37, 46, 498, DateTimeKind.Utc).AddTicks(2497),
                            Description = "",
                            ProcessName = "Gorgeous Plastic Fish",
                            Status = false,
                            VisitTypeId = 1
                        },
                        new
                        {
                            ProcessId = 2,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 24, 3, 37, 46, 498, DateTimeKind.Utc).AddTicks(4245),
                            Description = "",
                            ProcessName = "Tasty Soft Gloves",
                            Status = false,
                            VisitTypeId = 1
                        },
                        new
                        {
                            ProcessId = 3,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 24, 3, 37, 46, 498, DateTimeKind.Utc).AddTicks(4273),
                            Description = "",
                            ProcessName = "Rustic Steel Bacon",
                            Status = true,
                            VisitTypeId = 1
                        },
                        new
                        {
                            ProcessId = 4,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 24, 3, 37, 46, 498, DateTimeKind.Utc).AddTicks(4293),
                            Description = "",
                            ProcessName = "Awesome Wooden Chicken",
                            Status = false,
                            VisitTypeId = 1
                        },
                        new
                        {
                            ProcessId = 5,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 24, 3, 37, 46, 498, DateTimeKind.Utc).AddTicks(4311),
                            Description = "",
                            ProcessName = "Handmade Cotton Hat",
                            Status = false,
                            VisitTypeId = 1
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.Property<int>("QRCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardId"));

                    b.Property<Guid>("CardGuidId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastCancelDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QRCardStatusId")
                        .HasColumnType("int");

                    b.Property<int>("QRCardTypeId")
                        .HasColumnType("int");

                    b.HasKey("QRCardId");

                    b.HasIndex("QRCardStatusId");

                    b.HasIndex("QRCardTypeId");

                    b.ToTable("QRCards");

                    b.HasData(
                        new
                        {
                            QRCardId = 1,
                            CardGuidId = new Guid("76ab3780-b8cc-4a0a-866e-9bd546f46a97"),
                            CreateDate = new DateTime(2024, 9, 26, 10, 37, 46, 532, DateTimeKind.Local).AddTicks(749),
                            LastCancelDate = new DateTime(2024, 10, 26, 10, 37, 46, 532, DateTimeKind.Local).AddTicks(749),
                            QRCardStatusId = 1,
                            QRCardTypeId = 2
                        },
                        new
                        {
                            QRCardId = 2,
                            CardGuidId = new Guid("1f3a948e-5e97-43cf-afef-8a7871003b4f"),
                            CreateDate = new DateTime(2024, 9, 26, 10, 37, 46, 532, DateTimeKind.Local).AddTicks(917),
                            LastCancelDate = new DateTime(2024, 10, 26, 10, 37, 46, 532, DateTimeKind.Local).AddTicks(917),
                            QRCardStatusId = 2,
                            QRCardTypeId = 2
                        },
                        new
                        {
                            QRCardId = 3,
                            CardGuidId = new Guid("0f1debf3-dbb9-4063-9dc8-7566c08c5b63"),
                            CreateDate = new DateTime(2024, 9, 26, 10, 37, 46, 532, DateTimeKind.Local).AddTicks(939),
                            LastCancelDate = new DateTime(2024, 10, 26, 10, 37, 46, 532, DateTimeKind.Local).AddTicks(939),
                            QRCardStatusId = 1,
                            QRCardTypeId = 1
                        },
                        new
                        {
                            QRCardId = 4,
                            CardGuidId = new Guid("b8985168-d4ce-40f9-b138-e1fcd0415099"),
                            CreateDate = new DateTime(2024, 9, 26, 10, 37, 46, 532, DateTimeKind.Local).AddTicks(948),
                            LastCancelDate = new DateTime(2024, 10, 26, 10, 37, 46, 532, DateTimeKind.Local).AddTicks(948),
                            QRCardStatusId = 1,
                            QRCardTypeId = 2
                        },
                        new
                        {
                            QRCardId = 5,
                            CardGuidId = new Guid("71c864bf-9b41-4e9e-a140-d1f34c02bec0"),
                            CreateDate = new DateTime(2024, 9, 26, 10, 37, 46, 532, DateTimeKind.Local).AddTicks(956),
                            LastCancelDate = new DateTime(2024, 10, 26, 10, 37, 46, 532, DateTimeKind.Local).AddTicks(956),
                            QRCardStatusId = 2,
                            QRCardTypeId = 2
                        },
                        new
                        {
                            QRCardId = 6,
                            CardGuidId = new Guid("eac4d56a-17fd-428f-8ec8-5874184a3c42"),
                            CreateDate = new DateTime(2024, 9, 26, 10, 37, 46, 532, DateTimeKind.Local).AddTicks(963),
                            LastCancelDate = new DateTime(2024, 10, 26, 10, 37, 46, 532, DateTimeKind.Local).AddTicks(963),
                            QRCardStatusId = 2,
                            QRCardTypeId = 1
                        },
                        new
                        {
                            QRCardId = 7,
                            CardGuidId = new Guid("87e28ded-8302-4f08-8407-535cd548c029"),
                            CreateDate = new DateTime(2024, 9, 26, 10, 37, 46, 532, DateTimeKind.Local).AddTicks(970),
                            LastCancelDate = new DateTime(2024, 10, 26, 10, 37, 46, 532, DateTimeKind.Local).AddTicks(970),
                            QRCardStatusId = 2,
                            QRCardTypeId = 1
                        },
                        new
                        {
                            QRCardId = 8,
                            CardGuidId = new Guid("fa5d6e8d-1fe8-4001-809a-29e578998bb2"),
                            CreateDate = new DateTime(2024, 9, 26, 10, 37, 46, 532, DateTimeKind.Local).AddTicks(977),
                            LastCancelDate = new DateTime(2024, 10, 26, 10, 37, 46, 532, DateTimeKind.Local).AddTicks(977),
                            QRCardStatusId = 1,
                            QRCardTypeId = 2
                        },
                        new
                        {
                            QRCardId = 9,
                            CardGuidId = new Guid("b482ac66-b645-4531-8778-233c1cc82c2c"),
                            CreateDate = new DateTime(2024, 9, 26, 10, 37, 46, 532, DateTimeKind.Local).AddTicks(989),
                            LastCancelDate = new DateTime(2024, 10, 26, 10, 37, 46, 532, DateTimeKind.Local).AddTicks(989),
                            QRCardStatusId = 2,
                            QRCardTypeId = 1
                        },
                        new
                        {
                            QRCardId = 10,
                            CardGuidId = new Guid("62e19307-2f5c-4ce6-ba81-3ffa603e9106"),
                            CreateDate = new DateTime(2024, 9, 26, 10, 37, 46, 532, DateTimeKind.Local).AddTicks(996),
                            LastCancelDate = new DateTime(2024, 10, 26, 10, 37, 46, 532, DateTimeKind.Local).AddTicks(996),
                            QRCardStatusId = 1,
                            QRCardTypeId = 1
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardStatus", b =>
                {
                    b.Property<int>("QRCardStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardStatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusNumber")
                        .HasColumnType("int");

                    b.HasKey("QRCardStatusId");

                    b.ToTable("QRCardStatus");

                    b.HasData(
                        new
                        {
                            QRCardStatusId = 1,
                            StatusName = "Active",
                            StatusNumber = 1
                        },
                        new
                        {
                            QRCardStatusId = 2,
                            StatusName = "Inactive",
                            StatusNumber = 0
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardType", b =>
                {
                    b.Property<int>("QRCardTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardTypeId"));

                    b.Property<string>("CardTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QRCardTypeId");

                    b.ToTable("QRCardType");

                    b.HasData(
                        new
                        {
                            QRCardTypeId = 1,
                            CardTypeName = "Employee",
                            TypeDescription = "Employee QR Card"
                        },
                        new
                        {
                            QRCardTypeId = 2,
                            CardTypeName = "Visitor",
                            TypeDescription = "Visitor QR Card"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Description = "Quản lý toàn bộ hệ thống",
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            Description = "Quản lý toàn bộ công ty",
                            RoleName = "Manager"
                        },
                        new
                        {
                            RoleId = 3,
                            Description = "Quản lý toàn bộ phòng ban",
                            RoleName = "DepartmentManaager"
                        },
                        new
                        {
                            RoleId = 4,
                            Description = "Tạo và quản lý khách ra vào của phòng ban",
                            RoleName = "Staff"
                        },
                        new
                        {
                            RoleId = 5,
                            Description = "Quản lý khách ra vào tại cổng",
                            RoleName = "Security"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedDate = new DateTime(2024, 3, 26, 3, 37, 46, 489, DateTimeKind.Utc).AddTicks(457),
                            Email = "admin1@example.com",
                            FullName = "Admin One",
                            Password = "123",
                            PhoneNumber = "0123456789",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 3, 37, 46, 489, DateTimeKind.Utc).AddTicks(464),
                            UserName = "admin1"
                        },
                        new
                        {
                            UserId = 2,
                            CreatedDate = new DateTime(2024, 6, 26, 3, 37, 46, 489, DateTimeKind.Utc).AddTicks(467),
                            Email = "manager1@example.com",
                            FullName = "Manager One",
                            Password = "123",
                            PhoneNumber = "0987654321",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 3, 37, 46, 489, DateTimeKind.Utc).AddTicks(467),
                            UserName = "manager1"
                        },
                        new
                        {
                            UserId = 3,
                            CreatedDate = new DateTime(2024, 7, 26, 3, 37, 46, 489, DateTimeKind.Utc).AddTicks(469),
                            Email = "employee1@example.com",
                            FullName = "Department Manager One",
                            Password = "123",
                            PhoneNumber = "0112223334",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 3, 37, 46, 489, DateTimeKind.Utc).AddTicks(470),
                            UserName = "DM1"
                        },
                        new
                        {
                            UserId = 4,
                            CreatedDate = new DateTime(2024, 8, 26, 3, 37, 46, 489, DateTimeKind.Utc).AddTicks(472),
                            Email = "hr1@example.com",
                            FullName = "Staff One",
                            Password = "123",
                            PhoneNumber = "0223334445",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 3, 37, 46, 489, DateTimeKind.Utc).AddTicks(472),
                            UserName = "Staff1"
                        },
                        new
                        {
                            UserId = 5,
                            CreatedDate = new DateTime(2024, 5, 26, 3, 37, 46, 489, DateTimeKind.Utc).AddTicks(474),
                            Email = "it1@example.com",
                            FullName = "Security One",
                            Password = "123",
                            PhoneNumber = "0334445556",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 3, 37, 46, 489, DateTimeKind.Utc).AddTicks(474),
                            UserName = "Security1"
                        },
                        new
                        {
                            UserId = 6,
                            CreatedDate = new DateTime(2024, 9, 24, 6, 46, 55, 959, DateTimeKind.Unspecified).AddTicks(2103),
                            Email = "gmail.com43@yahoo.com",
                            FullName = "King Torp",
                            Password = "0imnq9",
                            PhoneNumber = "0802649440",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 24, 6, 46, 55, 959, DateTimeKind.Unspecified).AddTicks(2103),
                            UserName = "Jordan37"
                        },
                        new
                        {
                            UserId = 7,
                            CreatedDate = new DateTime(2024, 9, 12, 19, 18, 24, 930, DateTimeKind.Unspecified).AddTicks(2141),
                            Email = "gmail.com.Johns@yahoo.com",
                            FullName = "Gavin Marvin",
                            Password = "7jzda5",
                            PhoneNumber = "0601503519",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 12, 19, 18, 24, 930, DateTimeKind.Unspecified).AddTicks(2141),
                            UserName = "Jaeden_Rippin"
                        },
                        new
                        {
                            UserId = 8,
                            CreatedDate = new DateTime(2024, 9, 11, 6, 52, 5, 994, DateTimeKind.Unspecified).AddTicks(5987),
                            Email = "gmail.com16@yahoo.com",
                            FullName = "Vince Anderson",
                            Password = "5icz3x",
                            PhoneNumber = "0356080466",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 11, 6, 52, 5, 994, DateTimeKind.Unspecified).AddTicks(5987),
                            UserName = "Willis_Rogahn99"
                        },
                        new
                        {
                            UserId = 9,
                            CreatedDate = new DateTime(2024, 9, 15, 3, 41, 26, 998, DateTimeKind.Unspecified).AddTicks(7127),
                            Email = "gmail.com_Johns77@hotmail.com",
                            FullName = "Josefina Lind",
                            Password = "wapuio",
                            PhoneNumber = "0217542496",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 15, 3, 41, 26, 998, DateTimeKind.Unspecified).AddTicks(7127),
                            UserName = "Mellie95"
                        },
                        new
                        {
                            UserId = 10,
                            CreatedDate = new DateTime(2024, 9, 15, 8, 28, 32, 458, DateTimeKind.Unspecified).AddTicks(6272),
                            Email = "gmail.com_Hahn38@gmail.com",
                            FullName = "Myron Dooley",
                            Password = "7berxh",
                            PhoneNumber = "0382593385",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 15, 8, 28, 32, 458, DateTimeKind.Unspecified).AddTicks(6272),
                            UserName = "Bernita37"
                        },
                        new
                        {
                            UserId = 11,
                            CreatedDate = new DateTime(2024, 9, 14, 15, 22, 9, 946, DateTimeKind.Unspecified).AddTicks(7338),
                            Email = "gmail.com_Schoen58@yahoo.com",
                            FullName = "Trystan Ortiz",
                            Password = "rem8qq",
                            PhoneNumber = "0790122859",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 14, 15, 22, 9, 946, DateTimeKind.Unspecified).AddTicks(7338),
                            UserName = "Melyssa_MacGyver55"
                        },
                        new
                        {
                            UserId = 12,
                            CreatedDate = new DateTime(2024, 9, 12, 9, 7, 3, 242, DateTimeKind.Unspecified).AddTicks(5109),
                            Email = "gmail.com18@hotmail.com",
                            FullName = "Porter D'Amore",
                            Password = "3a8f6i",
                            PhoneNumber = "0234341175",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 12, 9, 7, 3, 242, DateTimeKind.Unspecified).AddTicks(5109),
                            UserName = "Madelynn83"
                        },
                        new
                        {
                            UserId = 13,
                            CreatedDate = new DateTime(2024, 9, 17, 17, 37, 37, 226, DateTimeKind.Unspecified).AddTicks(8961),
                            Email = "gmail.com23@gmail.com",
                            FullName = "Timothy Littel",
                            Password = "exdp90",
                            PhoneNumber = "0424770673",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 17, 17, 37, 37, 226, DateTimeKind.Unspecified).AddTicks(8961),
                            UserName = "Keshaun_Steuber"
                        },
                        new
                        {
                            UserId = 14,
                            CreatedDate = new DateTime(2024, 9, 19, 9, 51, 13, 329, DateTimeKind.Unspecified).AddTicks(5580),
                            Email = "gmail.com.Balistreri@hotmail.com",
                            FullName = "Stewart Purdy",
                            Password = "nf16z6",
                            PhoneNumber = "0703612668",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 19, 9, 51, 13, 329, DateTimeKind.Unspecified).AddTicks(5580),
                            UserName = "Verner59"
                        },
                        new
                        {
                            UserId = 15,
                            CreatedDate = new DateTime(2024, 9, 13, 23, 46, 42, 483, DateTimeKind.Unspecified).AddTicks(8899),
                            Email = "gmail.com_Mraz@gmail.com",
                            FullName = "Alice Roob",
                            Password = "k2p1ex",
                            PhoneNumber = "0618048868",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 13, 23, 46, 42, 483, DateTimeKind.Unspecified).AddTicks(8899),
                            UserName = "Damon.Buckridge65"
                        },
                        new
                        {
                            UserId = 16,
                            CreatedDate = new DateTime(2024, 9, 14, 1, 13, 4, 651, DateTimeKind.Unspecified).AddTicks(4847),
                            Email = "gmail.com_Heathcote@yahoo.com",
                            FullName = "Johann Pfeffer",
                            Password = "ayvs6t",
                            PhoneNumber = "0846020965",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 14, 1, 13, 4, 651, DateTimeKind.Unspecified).AddTicks(4847),
                            UserName = "Macy.Smitham"
                        },
                        new
                        {
                            UserId = 17,
                            CreatedDate = new DateTime(2024, 9, 7, 21, 47, 24, 526, DateTimeKind.Unspecified).AddTicks(7138),
                            Email = "gmail.com2@yahoo.com",
                            FullName = "Ludie Conroy",
                            Password = "mp54ev",
                            PhoneNumber = "0846285375",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 7, 21, 47, 24, 526, DateTimeKind.Unspecified).AddTicks(7138),
                            UserName = "Alfonso_Goyette27"
                        },
                        new
                        {
                            UserId = 18,
                            CreatedDate = new DateTime(2024, 9, 6, 14, 59, 47, 522, DateTimeKind.Unspecified).AddTicks(8540),
                            Email = "gmail.com_Runolfsson@hotmail.com",
                            FullName = "Jerad Lowe",
                            Password = "1tmdem",
                            PhoneNumber = "0274544479",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 6, 14, 59, 47, 522, DateTimeKind.Unspecified).AddTicks(8540),
                            UserName = "Estevan.Mitchell"
                        },
                        new
                        {
                            UserId = 19,
                            CreatedDate = new DateTime(2024, 9, 12, 11, 45, 18, 666, DateTimeKind.Unspecified).AddTicks(378),
                            Email = "gmail.com_Mayert26@gmail.com",
                            FullName = "Janis Gutkowski",
                            Password = "wptsg8",
                            PhoneNumber = "0981421746",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 12, 11, 45, 18, 666, DateTimeKind.Unspecified).AddTicks(378),
                            UserName = "Cheyanne41"
                        },
                        new
                        {
                            UserId = 20,
                            CreatedDate = new DateTime(2024, 9, 10, 16, 14, 45, 586, DateTimeKind.Unspecified).AddTicks(4452),
                            Email = "gmail.com.Kuphal95@hotmail.com",
                            FullName = "Dillon Grant",
                            Password = "f6gngb",
                            PhoneNumber = "0498073103",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 10, 16, 14, 45, 586, DateTimeKind.Unspecified).AddTicks(4452),
                            UserName = "Margie_Cummerata72"
                        },
                        new
                        {
                            UserId = 21,
                            CreatedDate = new DateTime(2024, 9, 11, 3, 23, 36, 596, DateTimeKind.Unspecified).AddTicks(4054),
                            Email = "gmail.com97@hotmail.com",
                            FullName = "Junius Kautzer",
                            Password = "285io9",
                            PhoneNumber = "0223839799",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 11, 3, 23, 36, 596, DateTimeKind.Unspecified).AddTicks(4054),
                            UserName = "Eva27"
                        },
                        new
                        {
                            UserId = 22,
                            CreatedDate = new DateTime(2024, 9, 11, 1, 12, 12, 34, DateTimeKind.Unspecified).AddTicks(2285),
                            Email = "gmail.com.Mohr30@gmail.com",
                            FullName = "Britney Dach",
                            Password = "er87iz",
                            PhoneNumber = "0238522230",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 11, 1, 12, 12, 34, DateTimeKind.Unspecified).AddTicks(2285),
                            UserName = "Fredrick81"
                        },
                        new
                        {
                            UserId = 23,
                            CreatedDate = new DateTime(2024, 9, 9, 4, 55, 15, 219, DateTimeKind.Unspecified).AddTicks(8965),
                            Email = "gmail.com.Feeney@gmail.com",
                            FullName = "Dale King",
                            Password = "uomu6y",
                            PhoneNumber = "0866935268",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 9, 4, 55, 15, 219, DateTimeKind.Unspecified).AddTicks(8965),
                            UserName = "Pete_Kohler71"
                        },
                        new
                        {
                            UserId = 24,
                            CreatedDate = new DateTime(2024, 9, 14, 7, 10, 36, 659, DateTimeKind.Unspecified).AddTicks(9504),
                            Email = "gmail.com60@gmail.com",
                            FullName = "Talon Harber",
                            Password = "g6baxt",
                            PhoneNumber = "0900914495",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 14, 7, 10, 36, 659, DateTimeKind.Unspecified).AddTicks(9504),
                            UserName = "Elda.Collins58"
                        },
                        new
                        {
                            UserId = 25,
                            CreatedDate = new DateTime(2024, 9, 1, 11, 10, 19, 518, DateTimeKind.Unspecified).AddTicks(745),
                            Email = "gmail.com_Swaniawski@gmail.com",
                            FullName = "London Douglas",
                            Password = "o5olbu",
                            PhoneNumber = "0357180130",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 1, 11, 10, 19, 518, DateTimeKind.Unspecified).AddTicks(745),
                            UserName = "Anastacio_DuBuque24"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.UserDepartment", b =>
                {
                    b.Property<int>("UserDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserDepartmentId"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserDepartmentId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDepartments");

                    b.HasData(
                        new
                        {
                            UserDepartmentId = 1,
                            DepartmentId = 1,
                            UserId = 3
                        },
                        new
                        {
                            UserDepartmentId = 2,
                            DepartmentId = 1,
                            UserId = 4
                        },
                        new
                        {
                            UserDepartmentId = 3,
                            DepartmentId = 2,
                            UserId = 3
                        },
                        new
                        {
                            UserDepartmentId = 4,
                            DepartmentId = 10,
                            UserId = 9
                        },
                        new
                        {
                            UserDepartmentId = 5,
                            DepartmentId = 2,
                            UserId = 21
                        },
                        new
                        {
                            UserDepartmentId = 6,
                            DepartmentId = 2,
                            UserId = 21
                        },
                        new
                        {
                            UserDepartmentId = 7,
                            DepartmentId = 4,
                            UserId = 18
                        },
                        new
                        {
                            UserDepartmentId = 8,
                            DepartmentId = 5,
                            UserId = 15
                        },
                        new
                        {
                            UserDepartmentId = 9,
                            DepartmentId = 2,
                            UserId = 11
                        },
                        new
                        {
                            UserDepartmentId = 10,
                            DepartmentId = 7,
                            UserId = 20
                        },
                        new
                        {
                            UserDepartmentId = 11,
                            DepartmentId = 7,
                            UserId = 14
                        },
                        new
                        {
                            UserDepartmentId = 12,
                            DepartmentId = 5,
                            UserId = 13
                        },
                        new
                        {
                            UserDepartmentId = 13,
                            DepartmentId = 3,
                            UserId = 23
                        },
                        new
                        {
                            UserDepartmentId = 14,
                            DepartmentId = 2,
                            UserId = 12
                        },
                        new
                        {
                            UserDepartmentId = 15,
                            DepartmentId = 5,
                            UserId = 7
                        },
                        new
                        {
                            UserDepartmentId = 16,
                            DepartmentId = 3,
                            UserId = 11
                        },
                        new
                        {
                            UserDepartmentId = 17,
                            DepartmentId = 4,
                            UserId = 21
                        },
                        new
                        {
                            UserDepartmentId = 18,
                            DepartmentId = 3,
                            UserId = 22
                        },
                        new
                        {
                            UserDepartmentId = 19,
                            DepartmentId = 7,
                            UserId = 21
                        },
                        new
                        {
                            UserDepartmentId = 20,
                            DepartmentId = 10,
                            UserId = 24
                        },
                        new
                        {
                            UserDepartmentId = 21,
                            DepartmentId = 2,
                            UserId = 18
                        },
                        new
                        {
                            UserDepartmentId = 22,
                            DepartmentId = 1,
                            UserId = 21
                        },
                        new
                        {
                            UserDepartmentId = 23,
                            DepartmentId = 3,
                            UserId = 20
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.Property<int>("VehicleSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleSessionId"));

                    b.Property<DateTime>("CheckinTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckoutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GateId")
                        .HasColumnType("int");

                    b.Property<int>("SecurityID")
                        .HasColumnType("int");

                    b.Property<int>("VisitDetailId")
                        .HasColumnType("int");

                    b.HasKey("VehicleSessionId");

                    b.HasIndex("GateId");

                    b.HasIndex("SecurityID");

                    b.HasIndex("VisitDetailId");

                    b.ToTable("VehicleSessions");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSessionImage", b =>
                {
                    b.Property<int>("VehicleSessionImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleSessionImageId"));

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleSessionId")
                        .HasColumnType("int");

                    b.Property<string>("VehicleSessionImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleSessionImageId");

                    b.HasIndex("VehicleSessionId");

                    b.ToTable("VehicleSessionImages");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.Property<int>("VisitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitId"));

                    b.Property<int>("AcceptLevel")
                        .HasColumnType("int");

                    b.Property<int>("CreateById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRegister")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UpdateById")
                        .HasColumnType("int");

                    b.Property<string>("VisitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitQuantity")
                        .HasColumnType("int");

                    b.Property<string>("VisitType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitId");

                    b.HasIndex("CreateById");

                    b.HasIndex("UpdateById");

                    b.ToTable("Visits");

                    b.HasData(
                        new
                        {
                            VisitId = 1,
                            AcceptLevel = 1,
                            CreateById = 3,
                            DateRegister = new DateTime(2024, 9, 24, 10, 37, 46, 499, DateTimeKind.Local).AddTicks(5245),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        },
                        new
                        {
                            VisitId = 2,
                            AcceptLevel = 2,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 26, 3, 37, 46, 511, DateTimeKind.Utc).AddTicks(2361),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        },
                        new
                        {
                            VisitId = 3,
                            AcceptLevel = 2,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 26, 3, 37, 46, 511, DateTimeKind.Utc).AddTicks(2520),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        },
                        new
                        {
                            VisitId = 4,
                            AcceptLevel = 2,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 26, 3, 37, 46, 511, DateTimeKind.Utc).AddTicks(2533),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        },
                        new
                        {
                            VisitId = 5,
                            AcceptLevel = 2,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 26, 3, 37, 46, 511, DateTimeKind.Utc).AddTicks(2542),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        },
                        new
                        {
                            VisitId = 6,
                            AcceptLevel = 2,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 26, 3, 37, 46, 511, DateTimeKind.Utc).AddTicks(2551),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.Property<int>("VisitDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitDetailId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ExpectedEndTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("ExpectedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ExpectedStartTime")
                        .HasColumnType("time");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.Property<int>("VisitorId")
                        .HasColumnType("int");

                    b.HasKey("VisitDetailId");

                    b.HasIndex("VisitId");

                    b.HasIndex("VisitorId");

                    b.ToTable("VisitDetails");

                    b.HasData(
                        new
                        {
                            VisitDetailId = 1,
                            Description = "Perferendis rem eum quibusdam accusantium tenetur. Ea distinctio nesciunt fugiat beatae dicta ab nisi quaerat minima. Possimus consectetur sit consectetur aliquid voluptatem quisquam repellendus. Iure eum sit.",
                            ExpectedEndDate = new DateTime(2024, 10, 25, 10, 37, 46, 510, DateTimeKind.Local).AddTicks(797),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 25, 10, 37, 46, 510, DateTimeKind.Local).AddTicks(742),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 1,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitDetailId = 2,
                            Description = "Dolorum assumenda accusantium ea eligendi saepe et dolores. Ea provident officiis fugiat temporibus voluptatum. Velit nesciunt temporibus perspiciatis qui. Vitae nulla qui officiis quia. Saepe est rerum non aliquid nisi aut optio. Reprehenderit animi est minima eaque voluptatem.",
                            ExpectedEndDate = new DateTime(2024, 10, 25, 10, 37, 46, 510, DateTimeKind.Local).AddTicks(1243),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 25, 10, 37, 46, 510, DateTimeKind.Local).AddTicks(1241),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 1,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitDetailId = 3,
                            Description = "Doloribus delectus consequatur et et veritatis harum et atque qui. Eos ratione nostrum. Magnam temporibus quam sed dolor repellendus.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 10, 37, 46, 512, DateTimeKind.Local).AddTicks(3742),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 10, 37, 46, 512, DateTimeKind.Local).AddTicks(3707),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 2,
                            VisitorId = 5
                        },
                        new
                        {
                            VisitDetailId = 4,
                            Description = "Quia at facere ut ipsa explicabo rerum officiis. Exercitationem est totam nisi sint cupiditate suscipit voluptas labore unde. Blanditiis repellat nam sit sed. Corrupti deserunt tempore sit deserunt repellendus a aut provident rerum. Ut et et sapiente.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 10, 37, 46, 512, DateTimeKind.Local).AddTicks(4021),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 10, 37, 46, 512, DateTimeKind.Local).AddTicks(4018),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 2,
                            VisitorId = 2
                        },
                        new
                        {
                            VisitDetailId = 5,
                            Description = "Facere beatae quia. Ipsa fuga autem quo praesentium sit. Magni dolor eum dolorem et. Soluta voluptatem qui deleniti. Libero recusandae qui voluptatibus rerum quam dignissimos perferendis. Alias cupiditate quis qui veritatis qui deleniti.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 10, 37, 46, 513, DateTimeKind.Local).AddTicks(4735),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 10, 37, 46, 513, DateTimeKind.Local).AddTicks(4710),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 2,
                            VisitorId = 8
                        },
                        new
                        {
                            VisitDetailId = 6,
                            Description = "Voluptatum quasi dolorem cumque. Harum quam eaque nisi ut placeat autem et nisi. Reprehenderit id vel architecto consectetur veritatis laborum voluptatibus ducimus.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 10, 37, 46, 513, DateTimeKind.Local).AddTicks(4945),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 10, 37, 46, 513, DateTimeKind.Local).AddTicks(4943),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 2,
                            VisitorId = 3
                        },
                        new
                        {
                            VisitDetailId = 7,
                            Description = "Commodi omnis deserunt dolor nesciunt. Mollitia quidem sit nostrum facere nobis blanditiis nulla omnis nobis. Facilis modi modi totam eligendi vero atque tempore qui sed.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 10, 37, 46, 514, DateTimeKind.Local).AddTicks(5875),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 10, 37, 46, 514, DateTimeKind.Local).AddTicks(5849),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 2,
                            VisitorId = 6
                        },
                        new
                        {
                            VisitDetailId = 8,
                            Description = "Et ipsum laboriosam. Ut aut officia nesciunt vel qui quia odit eum exercitationem. Alias odio quae accusamus aut autem perferendis sed. Eum et nobis necessitatibus non blanditiis numquam nisi cumque tempore. Non dolor quae. Doloremque et minus quia adipisci dolor totam.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 10, 37, 46, 514, DateTimeKind.Local).AddTicks(6147),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 10, 37, 46, 514, DateTimeKind.Local).AddTicks(6145),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 2,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitDetailId = 9,
                            Description = "Vel est quo dolor. Quidem aspernatur occaecati sed aut sed necessitatibus saepe. Quo commodi et consequatur aut qui accusantium necessitatibus ducimus cumque. Et omnis delectus blanditiis tempora iusto.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 10, 37, 46, 515, DateTimeKind.Local).AddTicks(6859),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 10, 37, 46, 515, DateTimeKind.Local).AddTicks(6834),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 3,
                            VisitorId = 8
                        },
                        new
                        {
                            VisitDetailId = 10,
                            Description = "Quos maiores at consequuntur quidem doloremque velit ullam facere sed. Quaerat officia officia et totam atque. Est ut sunt iusto earum natus laborum. Dolores eius autem architecto et eaque. Autem alias vitae consequuntur aut.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 10, 37, 46, 515, DateTimeKind.Local).AddTicks(7099),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 10, 37, 46, 515, DateTimeKind.Local).AddTicks(7097),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 3,
                            VisitorId = 9
                        },
                        new
                        {
                            VisitDetailId = 11,
                            Description = "Itaque velit exercitationem a iste assumenda minus est a commodi. Et voluptas similique omnis. Temporibus neque voluptatum veniam excepturi voluptatem voluptate commodi porro. Quia eum voluptas soluta accusamus ea cum culpa. Consequatur beatae velit odio. Laboriosam officiis quo sed recusandae.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 10, 37, 46, 516, DateTimeKind.Local).AddTicks(7719),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 10, 37, 46, 516, DateTimeKind.Local).AddTicks(7693),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 3,
                            VisitorId = 2
                        },
                        new
                        {
                            VisitDetailId = 12,
                            Description = "Laborum et voluptatum. Aut eos id laboriosam et atque soluta deleniti beatae odio. Voluptatum unde in dolor ipsa provident mollitia officiis enim. Molestiae vel et veritatis rerum minima perferendis dolorem.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 10, 37, 46, 516, DateTimeKind.Local).AddTicks(7951),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 10, 37, 46, 516, DateTimeKind.Local).AddTicks(7949),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 3,
                            VisitorId = 2
                        },
                        new
                        {
                            VisitDetailId = 13,
                            Description = "Autem ullam cum perferendis dolorem cupiditate laborum. Impedit et quos fugit quis autem ea. Accusamus et ducimus quia animi debitis sapiente minus quia. Et necessitatibus incidunt adipisci laboriosam ut quod libero et. Quos ducimus beatae eum. Quibusdam excepturi atque in.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 10, 37, 46, 519, DateTimeKind.Local).AddTicks(5570),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 10, 37, 46, 519, DateTimeKind.Local).AddTicks(5542),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 3,
                            VisitorId = 3
                        },
                        new
                        {
                            VisitDetailId = 14,
                            Description = "Assumenda autem fuga dolorum optio deserunt ab quasi sunt. Qui perspiciatis repellendus inventore inventore ea. Harum sed nihil quia consequatur qui eligendi eligendi. Perferendis ea optio vero qui fuga sed alias maxime. Aperiam ullam qui adipisci eligendi.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 10, 37, 46, 519, DateTimeKind.Local).AddTicks(5831),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 10, 37, 46, 519, DateTimeKind.Local).AddTicks(5829),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 3,
                            VisitorId = 6
                        },
                        new
                        {
                            VisitDetailId = 15,
                            Description = "Sit itaque necessitatibus ab unde mollitia necessitatibus corporis aperiam. Quia velit accusamus et est et ipsa aut recusandae quisquam. Qui molestias iure. Sit magnam et consequuntur.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 10, 37, 46, 520, DateTimeKind.Local).AddTicks(7109),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 10, 37, 46, 520, DateTimeKind.Local).AddTicks(7083),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 5
                        },
                        new
                        {
                            VisitDetailId = 16,
                            Description = "Qui aut vel eius beatae magnam dolores consequatur. Id sint eum minima voluptatem eum molestiae vitae omnis. Temporibus modi culpa voluptas in voluptatibus. Voluptatem hic odit. Voluptatem earum in est enim et laborum rerum beatae. Eos dolorem magnam.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 10, 37, 46, 520, DateTimeKind.Local).AddTicks(7360),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 10, 37, 46, 520, DateTimeKind.Local).AddTicks(7358),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 7
                        },
                        new
                        {
                            VisitDetailId = 17,
                            Description = "Quod sed quis quaerat unde nulla. Ad dolores enim ducimus quisquam occaecati vel et. Non ullam exercitationem nisi veniam illo cupiditate dolores voluptas doloremque. Vel non beatae sed nobis aut perspiciatis corrupti qui. Inventore aliquid harum molestiae tenetur earum accusantium earum. Vel perspiciatis quis dolor et quos aut voluptate.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 10, 37, 46, 521, DateTimeKind.Local).AddTicks(8268),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 10, 37, 46, 521, DateTimeKind.Local).AddTicks(8242),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 5
                        },
                        new
                        {
                            VisitDetailId = 18,
                            Description = "Et et et quo voluptates ullam quis. Nulla veniam ea est facilis quia iure consequuntur a ut. Sed debitis explicabo dicta expedita beatae est omnis praesentium. Ipsa aut similique.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 10, 37, 46, 521, DateTimeKind.Local).AddTicks(8497),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 10, 37, 46, 521, DateTimeKind.Local).AddTicks(8495),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitDetailId = 19,
                            Description = "Nobis sunt voluptas aut deserunt iure rerum dolores similique suscipit. Vel odio inventore ut eum corporis reiciendis. Fugit repellendus magnam tempore occaecati sunt. Quas et cumque est ut repudiandae atque libero. Ad maxime amet ab nesciunt illum animi dolore.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 10, 37, 46, 523, DateTimeKind.Local).AddTicks(2110),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 10, 37, 46, 523, DateTimeKind.Local).AddTicks(2075),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 8
                        },
                        new
                        {
                            VisitDetailId = 20,
                            Description = "Facere quia accusantium delectus eveniet omnis in ratione nihil officia. Repellendus magnam sunt et nesciunt deserunt sunt reprehenderit velit. Aspernatur quia et quae et qui tempora repellat et. Qui ut qui impedit aspernatur dolor deleniti rerum provident. Distinctio dicta pariatur sit eos.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 10, 37, 46, 523, DateTimeKind.Local).AddTicks(2414),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 10, 37, 46, 523, DateTimeKind.Local).AddTicks(2412),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 10
                        },
                        new
                        {
                            VisitDetailId = 21,
                            Description = "Velit nihil enim repellendus. Facere perspiciatis commodi numquam dignissimos facere. Quia voluptatem ipsum inventore sunt non dolore ea nihil. Error sint incidunt rerum modi aut. Vel sapiente debitis eos. Voluptatibus distinctio rem quidem laudantium quia incidunt dolores itaque repellendus.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 10, 37, 46, 524, DateTimeKind.Local).AddTicks(4487),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 10, 37, 46, 524, DateTimeKind.Local).AddTicks(4454),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 5,
                            VisitorId = 6
                        },
                        new
                        {
                            VisitDetailId = 22,
                            Description = "Ullam ullam ex deleniti similique quis quia totam qui aspernatur. Labore voluptatem aliquid aspernatur possimus. Veritatis autem ut maxime ipsum.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 10, 37, 46, 524, DateTimeKind.Local).AddTicks(4791),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 10, 37, 46, 524, DateTimeKind.Local).AddTicks(4788),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 5,
                            VisitorId = 2
                        },
                        new
                        {
                            VisitDetailId = 23,
                            Description = "Placeat culpa tempora id dolorem qui sunt aspernatur distinctio. Laborum dolores corporis totam. Dolores sit explicabo aut vel velit earum natus.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 10, 37, 46, 525, DateTimeKind.Local).AddTicks(5537),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 10, 37, 46, 525, DateTimeKind.Local).AddTicks(5510),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 5,
                            VisitorId = 5
                        },
                        new
                        {
                            VisitDetailId = 24,
                            Description = "Eligendi magnam nulla nisi. Labore laudantium quasi perspiciatis eveniet voluptatem vel adipisci magni ut. Enim asperiores omnis sapiente odit molestiae eveniet velit eos. Est aut pariatur voluptatem sed reprehenderit quam. Fugiat dignissimos corrupti dolor et at vitae qui culpa et. Eum qui dicta est eius.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 10, 37, 46, 525, DateTimeKind.Local).AddTicks(5814),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 10, 37, 46, 525, DateTimeKind.Local).AddTicks(5812),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 5,
                            VisitorId = 8
                        },
                        new
                        {
                            VisitDetailId = 25,
                            Description = "Iure similique consectetur. Eum omnis iusto vero ea quibusdam ab sint. Labore sapiente nesciunt voluptatem velit et velit magni rerum explicabo. Sit sed quia id ut amet cupiditate. Voluptas iusto aut enim.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 10, 37, 46, 526, DateTimeKind.Local).AddTicks(6620),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 10, 37, 46, 526, DateTimeKind.Local).AddTicks(6594),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 5,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitDetailId = 26,
                            Description = "Dignissimos ut eos provident dicta. Omnis ab aut et provident dolores aspernatur laboriosam. Ipsa deleniti iste aut ea natus quibusdam. Eaque aliquam consequatur ut.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 10, 37, 46, 526, DateTimeKind.Local).AddTicks(6835),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 10, 37, 46, 526, DateTimeKind.Local).AddTicks(6833),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 5,
                            VisitorId = 10
                        },
                        new
                        {
                            VisitDetailId = 27,
                            Description = "Unde perferendis quasi doloribus architecto rerum. Dolorum est vel perspiciatis reprehenderit quaerat optio. Ipsam ullam rerum qui nesciunt.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 10, 37, 46, 527, DateTimeKind.Local).AddTicks(7475),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 10, 37, 46, 527, DateTimeKind.Local).AddTicks(7449),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 6,
                            VisitorId = 7
                        },
                        new
                        {
                            VisitDetailId = 28,
                            Description = "Ab dicta qui maiores sint aut. Soluta quas deleniti. Assumenda ea ut. Omnis neque sint corporis accusamus quia quam modi adipisci fuga. At eligendi sint soluta. Necessitatibus enim deserunt consequatur reiciendis nesciunt sit.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 10, 37, 46, 527, DateTimeKind.Local).AddTicks(7714),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 10, 37, 46, 527, DateTimeKind.Local).AddTicks(7712),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 6,
                            VisitorId = 3
                        },
                        new
                        {
                            VisitDetailId = 29,
                            Description = "Eos saepe in modi est neque possimus consequatur eum. Voluptate quis explicabo nobis doloremque eum maiores sunt id. Quaerat ut dolorem vel necessitatibus non ullam expedita error. Sunt at distinctio repudiandae ea autem. Qui pariatur quo minima fugit.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 10, 37, 46, 529, DateTimeKind.Local).AddTicks(6758),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 10, 37, 46, 529, DateTimeKind.Local).AddTicks(6724),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 6,
                            VisitorId = 9
                        },
                        new
                        {
                            VisitDetailId = 30,
                            Description = "Qui velit consequatur labore eius. Expedita aliquam quos praesentium enim qui debitis quaerat. Exercitationem maxime et sequi dolores. Ut occaecati et consequuntur est esse.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 10, 37, 46, 529, DateTimeKind.Local).AddTicks(6978),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 10, 37, 46, 529, DateTimeKind.Local).AddTicks(6976),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 6,
                            VisitorId = 8
                        },
                        new
                        {
                            VisitDetailId = 31,
                            Description = "Iusto blanditiis id ut placeat quia molestiae eos illum. Animi sint nobis adipisci. Consectetur voluptates similique officia accusantium.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 10, 37, 46, 530, DateTimeKind.Local).AddTicks(8160),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 10, 37, 46, 530, DateTimeKind.Local).AddTicks(8124),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 6,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitDetailId = 32,
                            Description = "Omnis ab officia sit atque ratione eum aperiam. Necessitatibus totam alias labore. Eos dignissimos ab ut quia.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 10, 37, 46, 530, DateTimeKind.Local).AddTicks(8368),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 10, 37, 46, 530, DateTimeKind.Local).AddTicks(8366),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 6,
                            VisitorId = 4
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitProcess", b =>
                {
                    b.Property<int>("VisitProcessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitProcessId"));

                    b.Property<string>("DaysOfProcess")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ExpectedEndTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("ExpectedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ExpectedStartTime")
                        .HasColumnType("time");

                    b.Property<int>("ProcessId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.Property<int>("VisitQuantity")
                        .HasColumnType("int");

                    b.HasKey("VisitProcessId");

                    b.HasIndex("ProcessId");

                    b.HasIndex("VisitId");

                    b.ToTable("VisitProjects");

                    b.HasData(
                        new
                        {
                            VisitProcessId = 1,
                            DaysOfProcess = "Monday",
                            ExpectedEndDate = new DateTime(2024, 10, 25, 10, 37, 46, 500, DateTimeKind.Local).AddTicks(6558),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 25, 10, 37, 46, 500, DateTimeKind.Local).AddTicks(6521),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            ProcessId = 1,
                            Status = "Processing",
                            VisitId = 1,
                            VisitQuantity = 2
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitType", b =>
                {
                    b.Property<int>("VisitTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitTypeId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VisitTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitTypeId");

                    b.ToTable("VisitTypes");

                    b.HasData(
                        new
                        {
                            VisitTypeId = 1,
                            Description = "Process trong tuần",
                            VisitTypeName = "ProcessWeek"
                        },
                        new
                        {
                            VisitTypeId = 2,
                            Description = "Process trong tháng",
                            VisitTypeName = "ProcessMonth"
                        },
                        new
                        {
                            VisitTypeId = 3,
                            Description = "Project",
                            VisitTypeName = "Project"
                        },
                        new
                        {
                            VisitTypeId = 4,
                            Description = "Visit được tạo bởi staff",
                            VisitTypeName = "VisitStaff"
                        },
                        new
                        {
                            VisitTypeId = 5,
                            Description = "Visit được tạo bởi security",
                            VisitTypeName = "VisitSecurity"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.Property<int>("VisitorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorId"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreateById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CredentialCardTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CredentialsCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("VisitorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitorId");

                    b.HasIndex("CreateById");

                    b.HasIndex("CredentialCardTypeId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Visitors");

                    b.HasData(
                        new
                        {
                            VisitorId = 1,
                            CompanyName = "Marquardt - Yundt",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 18, 5, 17, 24, 30, DateTimeKind.Unspecified).AddTicks(9787),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "pvc7uan331",
                            PhoneNumber = "0490385705",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 18, 5, 17, 24, 30, DateTimeKind.Unspecified).AddTicks(9787),
                            VisitorName = "Sandrine Leuschke"
                        },
                        new
                        {
                            VisitorId = 2,
                            CompanyName = "Green - O'Reilly",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 13, 14, 55, 0, 674, DateTimeKind.Unspecified).AddTicks(3630),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "s6er3nssjs",
                            PhoneNumber = "0383993078",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 13, 14, 55, 0, 674, DateTimeKind.Unspecified).AddTicks(3630),
                            VisitorName = "Drew Stanton"
                        },
                        new
                        {
                            VisitorId = 3,
                            CompanyName = "Ebert LLC",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 9, 4, 0, 41, 603, DateTimeKind.Unspecified).AddTicks(5646),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "4ns90cdp5u",
                            PhoneNumber = "0891297487",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 9, 4, 0, 41, 603, DateTimeKind.Unspecified).AddTicks(5646),
                            VisitorName = "Sherwood Farrell"
                        },
                        new
                        {
                            VisitorId = 4,
                            CompanyName = "Carter, Carroll and Wehner",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 23, 21, 41, 9, 449, DateTimeKind.Unspecified).AddTicks(7119),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "zav15xkr1t",
                            PhoneNumber = "0376460894",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 23, 21, 41, 9, 449, DateTimeKind.Unspecified).AddTicks(7119),
                            VisitorName = "Alessandro Effertz"
                        },
                        new
                        {
                            VisitorId = 5,
                            CompanyName = "Hoppe, Zboncak and Wyman",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 16, 3, 57, 47, 302, DateTimeKind.Unspecified).AddTicks(4037),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "p82hnkwaqp",
                            PhoneNumber = "0989444664",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 16, 3, 57, 47, 302, DateTimeKind.Unspecified).AddTicks(4037),
                            VisitorName = "Liza Ernser"
                        },
                        new
                        {
                            VisitorId = 6,
                            CompanyName = "Blanda, Halvorson and Hand",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 5, 8, 33, 52, 310, DateTimeKind.Unspecified).AddTicks(1414),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "0q2vzusmvv",
                            PhoneNumber = "0637470226",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 5, 8, 33, 52, 310, DateTimeKind.Unspecified).AddTicks(1414),
                            VisitorName = "Destin Gottlieb"
                        },
                        new
                        {
                            VisitorId = 7,
                            CompanyName = "Erdman - Lowe",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 6, 23, 5, 50, 586, DateTimeKind.Unspecified).AddTicks(6761),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "8m1qqp38zp",
                            PhoneNumber = "0570849680",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 23, 5, 50, 586, DateTimeKind.Unspecified).AddTicks(6761),
                            VisitorName = "Braulio Cormier"
                        },
                        new
                        {
                            VisitorId = 8,
                            CompanyName = "Wisozk and Sons",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 22, 21, 33, 42, 723, DateTimeKind.Unspecified).AddTicks(7889),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "nr6x3jq57f",
                            PhoneNumber = "0883931216",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 22, 21, 33, 42, 723, DateTimeKind.Unspecified).AddTicks(7889),
                            VisitorName = "Roderick Dooley"
                        },
                        new
                        {
                            VisitorId = 9,
                            CompanyName = "McDermott, Larson and Jast",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 3, 16, 49, 31, 156, DateTimeKind.Unspecified).AddTicks(2632),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "alg07j5uo3",
                            PhoneNumber = "0975273201",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 3, 16, 49, 31, 156, DateTimeKind.Unspecified).AddTicks(2632),
                            VisitorName = "Lorenza Haag"
                        },
                        new
                        {
                            VisitorId = 10,
                            CompanyName = "Batz, Walter and Lehner",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 14, 7, 6, 38, 637, DateTimeKind.Unspecified).AddTicks(7634),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "xqr9rp76gp",
                            PhoneNumber = "0149874652",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 14, 7, 6, 38, 637, DateTimeKind.Unspecified).AddTicks(7634),
                            VisitorName = "Ilene Fisher"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.Property<int>("VisitorSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorSessionId"));

                    b.Property<DateTime>("CheckinTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CheckoutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GateInId")
                        .HasColumnType("int");

                    b.Property<int?>("GateOutId")
                        .HasColumnType("int");

                    b.Property<int>("QRCardId")
                        .HasColumnType("int");

                    b.Property<int>("SecurityInId")
                        .HasColumnType("int");

                    b.Property<int?>("SecurityOutId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitDetailId")
                        .HasColumnType("int");

                    b.HasKey("VisitorSessionId");

                    b.HasIndex("GateInId");

                    b.HasIndex("GateOutId");

                    b.HasIndex("QRCardId");

                    b.HasIndex("SecurityInId");

                    b.HasIndex("SecurityOutId");

                    b.HasIndex("VisitDetailId");

                    b.ToTable("VisitorSessions");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSessionsImage", b =>
                {
                    b.Property<int>("VisitorSessionsImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorSessionsImageId"));

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitorSessionId")
                        .HasColumnType("int");

                    b.HasKey("VisitorSessionsImageId");

                    b.HasIndex("VisitorSessionId");

                    b.ToTable("VisitorSessionsImages");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.NotificationUsers", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Notification", "Notification")
                        .WithMany("NotificationUsers")
                        .HasForeignKey("NotificationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Receiver")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Sender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Process", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.User", "User")
                        .WithMany("Project")
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.VisitType", "VisitType")
                        .WithMany("VisitTypes")
                        .HasForeignKey("VisitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("VisitType");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.QRCardStatus", "QRCardStatus")
                        .WithMany("QRCards")
                        .HasForeignKey("QRCardStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.QRCardType", "QRCardType")
                        .WithMany("QRCards")
                        .HasForeignKey("QRCardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QRCardStatus");

                    b.Navigation("QRCardType");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Role", "Role")
                        .WithMany("User")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.UserDepartment", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Department", "Department")
                        .WithMany("UserDepartment")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "User")
                        .WithMany("UserDepartment")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Gate", "Gate")
                        .WithMany("VehicleSession")
                        .HasForeignKey("GateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Security")
                        .WithMany("VehicleSession")
                        .HasForeignKey("SecurityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.VisitDetail", "VisitDetail")
                        .WithMany("VehicleSession")
                        .HasForeignKey("VisitDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gate");

                    b.Navigation("Security");

                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSessionImage", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.VehicleSession", "VehicleSession")
                        .WithMany("Images")
                        .HasForeignKey("VehicleSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.User", "CreateBy")
                        .WithMany("CreatedVisits")
                        .HasForeignKey("CreateById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "UpdateBy")
                        .WithMany("UpdatedVisits")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreateBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Visit", "Visit")
                        .WithMany("VisitDetail")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Visitor", "Visitor")
                        .WithMany("VisitDetail")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visit");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitProcess", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Process", "Process")
                        .WithMany("VisitProject")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Visit", "Visit")
                        .WithMany("VisitProject")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Process");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.UserDepartment", "UserDepartment")
                        .WithMany("Visitors")
                        .HasForeignKey("CreateById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.CredentialCardType", "CredentialCardType")
                        .WithMany("Visitor")
                        .HasForeignKey("CredentialCardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "User")
                        .WithOne("Visitor")
                        .HasForeignKey("SecurityGateApv.Domain.Models.Visitor", "UserId");

                    b.Navigation("CredentialCardType");

                    b.Navigation("User");

                    b.Navigation("UserDepartment");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Gate", "GateIn")
                        .WithMany("VisitorSessionsIn")
                        .HasForeignKey("GateInId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Gate", "GateOut")
                        .WithMany("VisitorSessionsOut")
                        .HasForeignKey("GateOutId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SecurityGateApv.Domain.Models.QRCard", "QRCard")
                        .WithMany("VisitorSession")
                        .HasForeignKey("QRCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "SecurityIn")
                        .WithMany("SecurityInSessions")
                        .HasForeignKey("SecurityInId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "SecurityOut")
                        .WithMany("SecurityOutSessions")
                        .HasForeignKey("SecurityOutId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SecurityGateApv.Domain.Models.VisitDetail", "VisitDetail")
                        .WithMany("VisitorSession")
                        .HasForeignKey("VisitDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GateIn");

                    b.Navigation("GateOut");

                    b.Navigation("QRCard");

                    b.Navigation("SecurityIn");

                    b.Navigation("SecurityOut");

                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSessionsImage", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.VisitorSession", "VisitorSession")
                        .WithMany("Images")
                        .HasForeignKey("VisitorSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.CredentialCardType", b =>
                {
                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Department", b =>
                {
                    b.Navigation("UserDepartment");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Gate", b =>
                {
                    b.Navigation("VehicleSession");

                    b.Navigation("VisitorSessionsIn");

                    b.Navigation("VisitorSessionsOut");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Notification", b =>
                {
                    b.Navigation("NotificationUsers");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Process", b =>
                {
                    b.Navigation("VisitProject");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardStatus", b =>
                {
                    b.Navigation("QRCards");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardType", b =>
                {
                    b.Navigation("QRCards");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Role", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.Navigation("CreatedVisits");

                    b.Navigation("Project");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("SecurityInSessions");

                    b.Navigation("SecurityOutSessions");

                    b.Navigation("SentNotifications");

                    b.Navigation("UpdatedVisits");

                    b.Navigation("UserDepartment");

                    b.Navigation("VehicleSession");

                    b.Navigation("Visitor")
                        .IsRequired();
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.UserDepartment", b =>
                {
                    b.Navigation("Visitors");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.Navigation("VisitDetail");

                    b.Navigation("VisitProject");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.Navigation("VehicleSession");

                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitType", b =>
                {
                    b.Navigation("VisitTypes");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
