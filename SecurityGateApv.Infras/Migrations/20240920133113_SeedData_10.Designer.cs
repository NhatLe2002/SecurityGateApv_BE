// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SecurityGateApv.Infras.DBContext;

#nullable disable

namespace SecurityGateApv.Infras.Migrations
{
    [DbContext(typeof(SecurityGateApvDbContext))]
    [Migration("20240920133113_SeedData_10")]
    partial class SeedData_10
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SecurityGateApv.Domain.Models.CredentialCardType", b =>
                {
                    b.Property<int>("CredentialCardTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CredentialCardTypeId"));

                    b.Property<string>("CredentialCardTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CredentialCardTypeId");

                    b.ToTable("CredentialCardTypes");

                    b.HasData(
                        new
                        {
                            CredentialCardTypeId = 1,
                            CredentialCardTypeName = "Giấy phép lái xe"
                        },
                        new
                        {
                            CredentialCardTypeId = 2,
                            CredentialCardTypeName = "Căn cước công dân"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<int>("AcceptLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            AcceptLevel = 1,
                            CreateDate = new DateTime(2024, 9, 3, 3, 24, 58, 272, DateTimeKind.Utc).AddTicks(5537),
                            DepartmentName = "Phòng Chăm sóc khách hàng",
                            Description = "Doloribus saepe non et.",
                            UpdatedDate = new DateTime(2024, 9, 3, 3, 24, 58, 272, DateTimeKind.Utc).AddTicks(5537)
                        },
                        new
                        {
                            DepartmentId = 2,
                            AcceptLevel = 1,
                            CreateDate = new DateTime(2024, 9, 14, 7, 54, 11, 975, DateTimeKind.Utc).AddTicks(5368),
                            DepartmentName = "Phòng R&D",
                            Description = "Voluptatem sit tempora iure possimus tenetur exercitationem laudantium dignissimos.",
                            UpdatedDate = new DateTime(2024, 9, 14, 7, 54, 11, 975, DateTimeKind.Utc).AddTicks(5368)
                        },
                        new
                        {
                            DepartmentId = 3,
                            AcceptLevel = 3,
                            CreateDate = new DateTime(2024, 9, 12, 2, 11, 10, 720, DateTimeKind.Utc).AddTicks(5675),
                            DepartmentName = "Phòng Sản xuất",
                            Description = "Dicta tempore magni est est iure.",
                            UpdatedDate = new DateTime(2024, 9, 12, 2, 11, 10, 720, DateTimeKind.Utc).AddTicks(5675)
                        },
                        new
                        {
                            DepartmentId = 4,
                            AcceptLevel = 5,
                            CreateDate = new DateTime(2024, 9, 14, 10, 52, 5, 257, DateTimeKind.Utc).AddTicks(1465),
                            DepartmentName = "Phòng Marketing",
                            Description = "Minima quos sapiente in sit voluptatem.",
                            UpdatedDate = new DateTime(2024, 9, 14, 10, 52, 5, 257, DateTimeKind.Utc).AddTicks(1465)
                        },
                        new
                        {
                            DepartmentId = 5,
                            AcceptLevel = 5,
                            CreateDate = new DateTime(2024, 9, 17, 10, 8, 12, 913, DateTimeKind.Utc).AddTicks(1825),
                            DepartmentName = "Phòng Sản xuất",
                            Description = "Et et laudantium aut vel est aspernatur eos.",
                            UpdatedDate = new DateTime(2024, 9, 17, 10, 8, 12, 913, DateTimeKind.Utc).AddTicks(1825)
                        },
                        new
                        {
                            DepartmentId = 6,
                            AcceptLevel = 2,
                            CreateDate = new DateTime(2024, 9, 14, 4, 50, 36, 589, DateTimeKind.Utc).AddTicks(4797),
                            DepartmentName = "Phòng Kế toán",
                            Description = "Facilis sed dolorem.",
                            UpdatedDate = new DateTime(2024, 9, 14, 4, 50, 36, 589, DateTimeKind.Utc).AddTicks(4797)
                        },
                        new
                        {
                            DepartmentId = 7,
                            AcceptLevel = 5,
                            CreateDate = new DateTime(2024, 9, 16, 2, 32, 55, 679, DateTimeKind.Utc).AddTicks(8436),
                            DepartmentName = "Phòng Nhân sự",
                            Description = "Labore aspernatur autem dolores veritatis voluptas deleniti quod.",
                            UpdatedDate = new DateTime(2024, 9, 16, 2, 32, 55, 679, DateTimeKind.Utc).AddTicks(8436)
                        },
                        new
                        {
                            DepartmentId = 8,
                            AcceptLevel = 1,
                            CreateDate = new DateTime(2024, 9, 9, 21, 13, 38, 907, DateTimeKind.Utc).AddTicks(508),
                            DepartmentName = "Phòng Pháp chế",
                            Description = "Quidem illum ipsum repellendus earum quis.",
                            UpdatedDate = new DateTime(2024, 9, 9, 21, 13, 38, 907, DateTimeKind.Utc).AddTicks(508)
                        },
                        new
                        {
                            DepartmentId = 9,
                            AcceptLevel = 4,
                            CreateDate = new DateTime(2024, 9, 5, 1, 48, 13, 832, DateTimeKind.Utc).AddTicks(4632),
                            DepartmentName = "Phòng Hành chính",
                            Description = "Saepe sunt iusto at quaerat ipsa occaecati eos maxime asperiores.",
                            UpdatedDate = new DateTime(2024, 9, 5, 1, 48, 13, 832, DateTimeKind.Utc).AddTicks(4632)
                        },
                        new
                        {
                            DepartmentId = 10,
                            AcceptLevel = 4,
                            CreateDate = new DateTime(2024, 9, 17, 9, 46, 18, 768, DateTimeKind.Utc).AddTicks(187),
                            DepartmentName = "Phòng Kinh doanh",
                            Description = "Et inventore qui totam velit.",
                            UpdatedDate = new DateTime(2024, 9, 17, 9, 46, 18, 768, DateTimeKind.Utc).AddTicks(187)
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.DepartmentReason", b =>
                {
                    b.Property<int>("DepartmentReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentReasonId"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReasonId")
                        .HasColumnType("int");

                    b.HasKey("DepartmentReasonId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ReasonId");

                    b.ToTable("DepartmentReasons");

                    b.HasData(
                        new
                        {
                            DepartmentReasonId = 1,
                            DepartmentId = 1,
                            Description = "Possimus eum fugit harum debitis unde qui sit dignissimos sed.",
                            Name = "Small Granite Chips",
                            ReasonId = 1
                        },
                        new
                        {
                            DepartmentReasonId = 2,
                            DepartmentId = 2,
                            Description = "Sunt saepe eos in.",
                            Name = "Unbranded Plastic Ball",
                            ReasonId = 5
                        },
                        new
                        {
                            DepartmentReasonId = 3,
                            DepartmentId = 1,
                            Description = "Tenetur voluptas repudiandae ex.",
                            Name = "Fantastic Concrete Gloves",
                            ReasonId = 5
                        },
                        new
                        {
                            DepartmentReasonId = 4,
                            DepartmentId = 3,
                            Description = "Voluptatem ipsam explicabo veritatis placeat autem corrupti.",
                            Name = "Small Rubber Shoes",
                            ReasonId = 5
                        },
                        new
                        {
                            DepartmentReasonId = 5,
                            DepartmentId = 6,
                            Description = "Sed voluptas nemo est vel porro enim commodi aliquam corrupti.",
                            Name = "Handmade Fresh Gloves",
                            ReasonId = 2
                        },
                        new
                        {
                            DepartmentReasonId = 6,
                            DepartmentId = 1,
                            Description = "Molestiae exercitationem vitae ea fugit tempore magni ut a.",
                            Name = "Ergonomic Granite Towels",
                            ReasonId = 1
                        },
                        new
                        {
                            DepartmentReasonId = 7,
                            DepartmentId = 6,
                            Description = "Maxime quod aut dolorem.",
                            Name = "Small Cotton Fish",
                            ReasonId = 4
                        },
                        new
                        {
                            DepartmentReasonId = 8,
                            DepartmentId = 5,
                            Description = "Quis totam non distinctio harum a voluptatibus voluptas qui molestiae.",
                            Name = "Intelligent Metal Car",
                            ReasonId = 4
                        },
                        new
                        {
                            DepartmentReasonId = 9,
                            DepartmentId = 5,
                            Description = "Occaecati sequi natus cupiditate neque qui aut aut.",
                            Name = "Intelligent Soft Chair",
                            ReasonId = 1
                        },
                        new
                        {
                            DepartmentReasonId = 10,
                            DepartmentId = 5,
                            Description = "Aut sunt consequatur et ut.",
                            Name = "Awesome Fresh Salad",
                            ReasonId = 3
                        },
                        new
                        {
                            DepartmentReasonId = 11,
                            DepartmentId = 3,
                            Description = "Saepe saepe consequatur error perferendis facilis sit sit ad aperiam.",
                            Name = "Generic Fresh Chair",
                            ReasonId = 4
                        },
                        new
                        {
                            DepartmentReasonId = 12,
                            DepartmentId = 4,
                            Description = "Cum non et quaerat eius.",
                            Name = "Licensed Soft Mouse",
                            ReasonId = 5
                        },
                        new
                        {
                            DepartmentReasonId = 13,
                            DepartmentId = 9,
                            Description = "Et voluptas esse velit ut excepturi.",
                            Name = "Practical Concrete Keyboard",
                            ReasonId = 1
                        },
                        new
                        {
                            DepartmentReasonId = 14,
                            DepartmentId = 6,
                            Description = "Eaque maxime aut possimus ut sint.",
                            Name = "Handmade Steel Fish",
                            ReasonId = 1
                        },
                        new
                        {
                            DepartmentReasonId = 15,
                            DepartmentId = 9,
                            Description = "Iure soluta et expedita in facere unde sint quae culpa.",
                            Name = "Practical Cotton Pizza",
                            ReasonId = 5
                        },
                        new
                        {
                            DepartmentReasonId = 16,
                            DepartmentId = 6,
                            Description = "Qui illum quidem repellat qui.",
                            Name = "Intelligent Metal Tuna",
                            ReasonId = 4
                        },
                        new
                        {
                            DepartmentReasonId = 17,
                            DepartmentId = 3,
                            Description = "Dolore ut iusto asperiores assumenda quam.",
                            Name = "Refined Metal Computer",
                            ReasonId = 1
                        },
                        new
                        {
                            DepartmentReasonId = 18,
                            DepartmentId = 9,
                            Description = "Autem aperiam dolores dolorum at nulla temporibus.",
                            Name = "Sleek Steel Chair",
                            ReasonId = 2
                        },
                        new
                        {
                            DepartmentReasonId = 19,
                            DepartmentId = 5,
                            Description = "Temporibus et est praesentium id ea.",
                            Name = "Incredible Granite Pizza",
                            ReasonId = 4
                        },
                        new
                        {
                            DepartmentReasonId = 20,
                            DepartmentId = 7,
                            Description = "Eaque vitae maiores occaecati pariatur dolorum ullam.",
                            Name = "Refined Fresh Hat",
                            ReasonId = 2
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Gate", b =>
                {
                    b.Property<int>("GateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GateId"));

                    b.Property<string>("GateCoordinate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GateId");

                    b.ToTable("Gates");

                    b.HasData(
                        new
                        {
                            GateId = 1,
                            GateCoordinate = "Ra vào trong ngày",
                            GateName = "Cổng 1"
                        },
                        new
                        {
                            GateId = 2,
                            GateCoordinate = "Ra vào trong ngày",
                            GateName = "Cổng 2"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.NotificationUsers", b =>
                {
                    b.Property<int>("NotificationUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationUserID"));

                    b.Property<int>("NotificationID")
                        .HasColumnType("int");

                    b.Property<bool>("ReadStatus")
                        .HasColumnType("bit");

                    b.Property<int>("ReceiverID")
                        .HasColumnType("int");

                    b.Property<int>("SenderID")
                        .HasColumnType("int");

                    b.HasKey("NotificationUserID");

                    b.HasIndex("NotificationID");

                    b.HasIndex("ReceiverID");

                    b.HasIndex("SenderID");

                    b.ToTable("NotificationUsers");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<int>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ProjectId");

                    b.HasIndex("CreateBy");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 19, 0, 51, 55, 470, DateTimeKind.Unspecified).AddTicks(3766),
                            ProjectName = "Gorgeous Wooden Pizza",
                            Status = true
                        },
                        new
                        {
                            ProjectId = 2,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 11, 19, 10, 35, 631, DateTimeKind.Unspecified).AddTicks(5264),
                            ProjectName = "Small Metal Keyboard",
                            Status = false
                        },
                        new
                        {
                            ProjectId = 3,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 15, 1, 25, 1, 969, DateTimeKind.Unspecified).AddTicks(2034),
                            ProjectName = "Incredible Granite Towels",
                            Status = true
                        },
                        new
                        {
                            ProjectId = 4,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 19, 8, 1, 40, 192, DateTimeKind.Unspecified).AddTicks(4225),
                            ProjectName = "Incredible Concrete Pizza",
                            Status = false
                        },
                        new
                        {
                            ProjectId = 5,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 3, 23, 12, 59, 211, DateTimeKind.Unspecified).AddTicks(8372),
                            ProjectName = "Intelligent Plastic Sausages",
                            Status = true
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.Property<int>("QRCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardId"));

                    b.Property<Guid>("CardGuidId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastCancelDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QRCardStatusId")
                        .HasColumnType("int");

                    b.Property<int>("QRCardTypeId")
                        .HasColumnType("int");

                    b.HasKey("QRCardId");

                    b.HasIndex("QRCardStatusId");

                    b.HasIndex("QRCardTypeId");

                    b.ToTable("QRCards");

                    b.HasData(
                        new
                        {
                            QRCardId = 1,
                            CardGuidId = new Guid("b5ac846e-5635-4d52-a03c-84b264e2fe55"),
                            CreateDate = new DateTime(2024, 9, 20, 20, 31, 13, 126, DateTimeKind.Local).AddTicks(5529),
                            LastCancelDate = new DateTime(2024, 10, 20, 20, 31, 13, 126, DateTimeKind.Local).AddTicks(5529),
                            QRCardStatusId = 2,
                            QRCardTypeId = 1
                        },
                        new
                        {
                            QRCardId = 2,
                            CardGuidId = new Guid("1fb7d064-9030-4a22-b2b0-931190d91ce0"),
                            CreateDate = new DateTime(2024, 9, 20, 20, 31, 13, 126, DateTimeKind.Local).AddTicks(5838),
                            LastCancelDate = new DateTime(2024, 10, 20, 20, 31, 13, 126, DateTimeKind.Local).AddTicks(5838),
                            QRCardStatusId = 2,
                            QRCardTypeId = 1
                        },
                        new
                        {
                            QRCardId = 3,
                            CardGuidId = new Guid("f967afd5-dbb6-4463-ae95-1a1a0cf9c525"),
                            CreateDate = new DateTime(2024, 9, 20, 20, 31, 13, 126, DateTimeKind.Local).AddTicks(5851),
                            LastCancelDate = new DateTime(2024, 10, 20, 20, 31, 13, 126, DateTimeKind.Local).AddTicks(5851),
                            QRCardStatusId = 1,
                            QRCardTypeId = 2
                        },
                        new
                        {
                            QRCardId = 4,
                            CardGuidId = new Guid("c98fae66-6ac9-4480-96f9-ec55e7200646"),
                            CreateDate = new DateTime(2024, 9, 20, 20, 31, 13, 126, DateTimeKind.Local).AddTicks(5859),
                            LastCancelDate = new DateTime(2024, 10, 20, 20, 31, 13, 126, DateTimeKind.Local).AddTicks(5859),
                            QRCardStatusId = 2,
                            QRCardTypeId = 1
                        },
                        new
                        {
                            QRCardId = 5,
                            CardGuidId = new Guid("07c7cfdf-0d73-4ea5-b6bf-90f04cc40052"),
                            CreateDate = new DateTime(2024, 9, 20, 20, 31, 13, 126, DateTimeKind.Local).AddTicks(5867),
                            LastCancelDate = new DateTime(2024, 10, 20, 20, 31, 13, 126, DateTimeKind.Local).AddTicks(5867),
                            QRCardStatusId = 1,
                            QRCardTypeId = 2
                        },
                        new
                        {
                            QRCardId = 6,
                            CardGuidId = new Guid("18c45d89-22d6-465c-9ae1-07b54a651954"),
                            CreateDate = new DateTime(2024, 9, 20, 20, 31, 13, 126, DateTimeKind.Local).AddTicks(5875),
                            LastCancelDate = new DateTime(2024, 10, 20, 20, 31, 13, 126, DateTimeKind.Local).AddTicks(5875),
                            QRCardStatusId = 2,
                            QRCardTypeId = 2
                        },
                        new
                        {
                            QRCardId = 7,
                            CardGuidId = new Guid("42acc0b2-2dad-45ed-8b7b-d4fcfc720d52"),
                            CreateDate = new DateTime(2024, 9, 20, 20, 31, 13, 126, DateTimeKind.Local).AddTicks(5895),
                            LastCancelDate = new DateTime(2024, 10, 20, 20, 31, 13, 126, DateTimeKind.Local).AddTicks(5895),
                            QRCardStatusId = 1,
                            QRCardTypeId = 1
                        },
                        new
                        {
                            QRCardId = 8,
                            CardGuidId = new Guid("9cdddf5e-0b42-41b0-90b4-c52901505cd9"),
                            CreateDate = new DateTime(2024, 9, 20, 20, 31, 13, 126, DateTimeKind.Local).AddTicks(5902),
                            LastCancelDate = new DateTime(2024, 10, 20, 20, 31, 13, 126, DateTimeKind.Local).AddTicks(5902),
                            QRCardStatusId = 1,
                            QRCardTypeId = 1
                        },
                        new
                        {
                            QRCardId = 9,
                            CardGuidId = new Guid("64eb06bd-f98c-4de1-9c2a-bfcd9ffb02a3"),
                            CreateDate = new DateTime(2024, 9, 20, 20, 31, 13, 126, DateTimeKind.Local).AddTicks(5910),
                            LastCancelDate = new DateTime(2024, 10, 20, 20, 31, 13, 126, DateTimeKind.Local).AddTicks(5910),
                            QRCardStatusId = 2,
                            QRCardTypeId = 1
                        },
                        new
                        {
                            QRCardId = 10,
                            CardGuidId = new Guid("9bf6d36f-1e94-4a2d-88a2-341358c84b8a"),
                            CreateDate = new DateTime(2024, 9, 20, 20, 31, 13, 126, DateTimeKind.Local).AddTicks(5917),
                            LastCancelDate = new DateTime(2024, 10, 20, 20, 31, 13, 126, DateTimeKind.Local).AddTicks(5917),
                            QRCardStatusId = 1,
                            QRCardTypeId = 1
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardStatus", b =>
                {
                    b.Property<int>("QRCardStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardStatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusNumber")
                        .HasColumnType("int");

                    b.HasKey("QRCardStatusId");

                    b.ToTable("QRCardStatus");

                    b.HasData(
                        new
                        {
                            QRCardStatusId = 1,
                            StatusName = "Active",
                            StatusNumber = 1
                        },
                        new
                        {
                            QRCardStatusId = 2,
                            StatusName = "Inactive",
                            StatusNumber = 0
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardType", b =>
                {
                    b.Property<int>("QRCardTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardTypeId"));

                    b.Property<string>("CardTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QRCardTypeId");

                    b.ToTable("QRCardType");

                    b.HasData(
                        new
                        {
                            QRCardTypeId = 1,
                            CardTypeName = "Employee",
                            TypeDescription = "Employee QR Card"
                        },
                        new
                        {
                            QRCardTypeId = 2,
                            CardTypeName = "Visitor",
                            TypeDescription = "Visitor QR Card"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Reason", b =>
                {
                    b.Property<int>("ReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReasonId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReasonId");

                    b.ToTable("Reasons");

                    b.HasData(
                        new
                        {
                            ReasonId = 1,
                            Description = "Et itaque sunt voluptate voluptatem.",
                            ReasonName = "Refined Fresh Shirt"
                        },
                        new
                        {
                            ReasonId = 2,
                            Description = "Ut corporis labore.",
                            ReasonName = "Handcrafted Fresh Salad"
                        },
                        new
                        {
                            ReasonId = 3,
                            Description = "Ipsum incidunt sit consequatur.",
                            ReasonName = "Fantastic Frozen Fish"
                        },
                        new
                        {
                            ReasonId = 4,
                            Description = "Fuga omnis placeat magni est iusto dolores provident libero.",
                            ReasonName = "Unbranded Wooden Salad"
                        },
                        new
                        {
                            ReasonId = 5,
                            Description = "Repellat consectetur ad sed id aut.",
                            ReasonName = "Tasty Metal Table"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Description = "Quản lý toàn bộ hệ thống",
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            Description = "Quản lý toàn bộ công ty",
                            RoleName = "Manager"
                        },
                        new
                        {
                            RoleId = 3,
                            Description = "Quản lý toàn bộ phòng ban",
                            RoleName = "DepartmentManaager"
                        },
                        new
                        {
                            RoleId = 4,
                            Description = "Tạo và quản lý khách ra vào của phòng ban",
                            RoleName = "Staff"
                        },
                        new
                        {
                            RoleId = 5,
                            Description = "Quản lý khách ra vào tại cổng",
                            RoleName = "Security"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedDate = new DateTime(2024, 3, 20, 13, 31, 13, 107, DateTimeKind.Utc).AddTicks(5434),
                            Email = "admin1@example.com",
                            FullName = "Admin One",
                            Password = "123",
                            PhoneNumber = "0123456789",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 20, 13, 31, 13, 107, DateTimeKind.Utc).AddTicks(5442),
                            UserName = "admin1"
                        },
                        new
                        {
                            UserId = 2,
                            CreatedDate = new DateTime(2024, 6, 20, 13, 31, 13, 107, DateTimeKind.Utc).AddTicks(5445),
                            Email = "manager1@example.com",
                            FullName = "Manager One",
                            Password = "123",
                            PhoneNumber = "0987654321",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 20, 13, 31, 13, 107, DateTimeKind.Utc).AddTicks(5445),
                            UserName = "manager1"
                        },
                        new
                        {
                            UserId = 3,
                            CreatedDate = new DateTime(2024, 7, 20, 13, 31, 13, 107, DateTimeKind.Utc).AddTicks(5447),
                            Email = "employee1@example.com",
                            FullName = "Department Manager One",
                            Password = "123",
                            PhoneNumber = "0112223334",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 20, 13, 31, 13, 107, DateTimeKind.Utc).AddTicks(5447),
                            UserName = "DM1"
                        },
                        new
                        {
                            UserId = 4,
                            CreatedDate = new DateTime(2024, 8, 20, 13, 31, 13, 107, DateTimeKind.Utc).AddTicks(5449),
                            Email = "hr1@example.com",
                            FullName = "Staff One",
                            Password = "123",
                            PhoneNumber = "0223334445",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 20, 13, 31, 13, 107, DateTimeKind.Utc).AddTicks(5450),
                            UserName = "Staff1"
                        },
                        new
                        {
                            UserId = 5,
                            CreatedDate = new DateTime(2024, 5, 20, 13, 31, 13, 107, DateTimeKind.Utc).AddTicks(5451),
                            Email = "it1@example.com",
                            FullName = "Security One",
                            Password = "123",
                            PhoneNumber = "0334445556",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 20, 13, 31, 13, 107, DateTimeKind.Utc).AddTicks(5452),
                            UserName = "Security1"
                        },
                        new
                        {
                            UserId = 6,
                            CreatedDate = new DateTime(2024, 9, 17, 22, 41, 53, 373, DateTimeKind.Unspecified).AddTicks(3108),
                            Email = "gmail.com_Kuhn46@hotmail.com",
                            FullName = "Ebony Ward",
                            Password = "jiafxl",
                            PhoneNumber = "0386472083",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 17, 22, 41, 53, 373, DateTimeKind.Unspecified).AddTicks(3108),
                            UserName = "Valentine.Runolfsson"
                        },
                        new
                        {
                            UserId = 7,
                            CreatedDate = new DateTime(2024, 9, 17, 3, 16, 29, 940, DateTimeKind.Unspecified).AddTicks(6637),
                            Email = "gmail.com_Murazik@yahoo.com",
                            FullName = "Julian Price",
                            Password = "vw223v",
                            PhoneNumber = "0632256349",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 17, 3, 16, 29, 940, DateTimeKind.Unspecified).AddTicks(6637),
                            UserName = "Adalberto61"
                        },
                        new
                        {
                            UserId = 8,
                            CreatedDate = new DateTime(2024, 9, 6, 11, 18, 17, 596, DateTimeKind.Unspecified).AddTicks(2785),
                            Email = "gmail.com76@yahoo.com",
                            FullName = "Mary Boehm",
                            Password = "lo9t10",
                            PhoneNumber = "0210030197",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 6, 11, 18, 17, 596, DateTimeKind.Unspecified).AddTicks(2785),
                            UserName = "Jazlyn8"
                        },
                        new
                        {
                            UserId = 9,
                            CreatedDate = new DateTime(2024, 9, 14, 14, 46, 37, 833, DateTimeKind.Unspecified).AddTicks(9567),
                            Email = "gmail.com_Roberts@hotmail.com",
                            FullName = "Karlie Lindgren",
                            Password = "o95323",
                            PhoneNumber = "0759399387",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 14, 14, 46, 37, 833, DateTimeKind.Unspecified).AddTicks(9567),
                            UserName = "Lesly91"
                        },
                        new
                        {
                            UserId = 10,
                            CreatedDate = new DateTime(2024, 9, 15, 11, 6, 50, 611, DateTimeKind.Unspecified).AddTicks(4239),
                            Email = "gmail.com_Brakus1@hotmail.com",
                            FullName = "Giuseppe Stamm",
                            Password = "ljbbux",
                            PhoneNumber = "0322867257",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 15, 11, 6, 50, 611, DateTimeKind.Unspecified).AddTicks(4239),
                            UserName = "Madyson.Botsford1"
                        },
                        new
                        {
                            UserId = 11,
                            CreatedDate = new DateTime(2024, 9, 2, 5, 32, 2, 509, DateTimeKind.Unspecified).AddTicks(1465),
                            Email = "gmail.com.Prosacco39@yahoo.com",
                            FullName = "Coty Baumbach",
                            Password = "k57v02",
                            PhoneNumber = "0465731781",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 2, 5, 32, 2, 509, DateTimeKind.Unspecified).AddTicks(1465),
                            UserName = "Rashad.Frami"
                        },
                        new
                        {
                            UserId = 12,
                            CreatedDate = new DateTime(2024, 9, 15, 20, 26, 50, 295, DateTimeKind.Unspecified).AddTicks(5937),
                            Email = "gmail.com_Reichel20@yahoo.com",
                            FullName = "Gregg Smitham",
                            Password = "ie0l7m",
                            PhoneNumber = "0187824268",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 15, 20, 26, 50, 295, DateTimeKind.Unspecified).AddTicks(5937),
                            UserName = "Keyshawn.Mayer29"
                        },
                        new
                        {
                            UserId = 13,
                            CreatedDate = new DateTime(2024, 9, 4, 19, 21, 11, 901, DateTimeKind.Unspecified).AddTicks(4714),
                            Email = "gmail.com67@yahoo.com",
                            FullName = "Harvey Will",
                            Password = "5m6fef",
                            PhoneNumber = "0102510450",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 4, 19, 21, 11, 901, DateTimeKind.Unspecified).AddTicks(4714),
                            UserName = "Neal98"
                        },
                        new
                        {
                            UserId = 14,
                            CreatedDate = new DateTime(2024, 9, 4, 21, 26, 10, 741, DateTimeKind.Unspecified).AddTicks(7537),
                            Email = "gmail.com_Ankunding53@gmail.com",
                            FullName = "Arnaldo Batz",
                            Password = "gl52mo",
                            PhoneNumber = "0223161036",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 4, 21, 26, 10, 741, DateTimeKind.Unspecified).AddTicks(7537),
                            UserName = "Braxton_Walker"
                        },
                        new
                        {
                            UserId = 15,
                            CreatedDate = new DateTime(2024, 9, 10, 11, 46, 14, 77, DateTimeKind.Unspecified).AddTicks(6760),
                            Email = "gmail.com.Kunde@gmail.com",
                            FullName = "Adelle Zulauf",
                            Password = "cbqhj2",
                            PhoneNumber = "0291645746",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 10, 11, 46, 14, 77, DateTimeKind.Unspecified).AddTicks(6760),
                            UserName = "Fatima35"
                        },
                        new
                        {
                            UserId = 16,
                            CreatedDate = new DateTime(2024, 9, 18, 23, 51, 31, 865, DateTimeKind.Unspecified).AddTicks(7017),
                            Email = "gmail.com65@yahoo.com",
                            FullName = "Franco Fritsch",
                            Password = "pry80h",
                            PhoneNumber = "0812212460",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 18, 23, 51, 31, 865, DateTimeKind.Unspecified).AddTicks(7017),
                            UserName = "Kathlyn.Hintz"
                        },
                        new
                        {
                            UserId = 17,
                            CreatedDate = new DateTime(2024, 9, 11, 14, 15, 40, 398, DateTimeKind.Unspecified).AddTicks(1352),
                            Email = "gmail.com.Barton91@yahoo.com",
                            FullName = "Deangelo Morar",
                            Password = "r3hgmp",
                            PhoneNumber = "0121599493",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 11, 14, 15, 40, 398, DateTimeKind.Unspecified).AddTicks(1352),
                            UserName = "Noelia.McLaughlin"
                        },
                        new
                        {
                            UserId = 18,
                            CreatedDate = new DateTime(2024, 9, 17, 2, 15, 12, 507, DateTimeKind.Unspecified).AddTicks(8222),
                            Email = "gmail.com_Strosin@gmail.com",
                            FullName = "Cletus Wyman",
                            Password = "jny220",
                            PhoneNumber = "0605142838",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 17, 2, 15, 12, 507, DateTimeKind.Unspecified).AddTicks(8222),
                            UserName = "Shana.Wisoky60"
                        },
                        new
                        {
                            UserId = 19,
                            CreatedDate = new DateTime(2024, 9, 4, 8, 9, 55, 317, DateTimeKind.Unspecified).AddTicks(3467),
                            Email = "gmail.com_Weimann@hotmail.com",
                            FullName = "Buck Ullrich",
                            Password = "2sby6h",
                            PhoneNumber = "0314180521",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 4, 8, 9, 55, 317, DateTimeKind.Unspecified).AddTicks(3467),
                            UserName = "Veronica_Torp23"
                        },
                        new
                        {
                            UserId = 20,
                            CreatedDate = new DateTime(2024, 9, 16, 16, 49, 6, 10, DateTimeKind.Unspecified).AddTicks(4104),
                            Email = "gmail.com.Rath82@yahoo.com",
                            FullName = "Claude Mayer",
                            Password = "j14mdc",
                            PhoneNumber = "0834050665",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 16, 16, 49, 6, 10, DateTimeKind.Unspecified).AddTicks(4104),
                            UserName = "Giovanny_Hayes93"
                        },
                        new
                        {
                            UserId = 21,
                            CreatedDate = new DateTime(2024, 9, 13, 9, 4, 55, 913, DateTimeKind.Unspecified).AddTicks(378),
                            Email = "gmail.com_Feeney@hotmail.com",
                            FullName = "Adrian Dach",
                            Password = "ljgl3c",
                            PhoneNumber = "0936366957",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 13, 9, 4, 55, 913, DateTimeKind.Unspecified).AddTicks(378),
                            UserName = "Jessica_Kiehn30"
                        },
                        new
                        {
                            UserId = 22,
                            CreatedDate = new DateTime(2024, 9, 11, 18, 43, 44, 960, DateTimeKind.Unspecified).AddTicks(6439),
                            Email = "gmail.com_Turcotte72@gmail.com",
                            FullName = "Augustus Lakin",
                            Password = "vedujm",
                            PhoneNumber = "0436094886",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 11, 18, 43, 44, 960, DateTimeKind.Unspecified).AddTicks(6439),
                            UserName = "Hobart.Christiansen"
                        },
                        new
                        {
                            UserId = 23,
                            CreatedDate = new DateTime(2024, 9, 15, 11, 5, 47, 42, DateTimeKind.Unspecified).AddTicks(2717),
                            Email = "gmail.com_Ankunding88@hotmail.com",
                            FullName = "Jasen Hagenes",
                            Password = "woy4al",
                            PhoneNumber = "0588169454",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 15, 11, 5, 47, 42, DateTimeKind.Unspecified).AddTicks(2717),
                            UserName = "Trevion_Cormier72"
                        },
                        new
                        {
                            UserId = 24,
                            CreatedDate = new DateTime(2024, 9, 18, 12, 23, 26, 717, DateTimeKind.Unspecified).AddTicks(8348),
                            Email = "gmail.com48@yahoo.com",
                            FullName = "Evert O'Connell",
                            Password = "ygraur",
                            PhoneNumber = "0206421415",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 18, 12, 23, 26, 717, DateTimeKind.Unspecified).AddTicks(8348),
                            UserName = "Lexie_Kozey"
                        },
                        new
                        {
                            UserId = 25,
                            CreatedDate = new DateTime(2024, 9, 4, 17, 53, 59, 76, DateTimeKind.Unspecified).AddTicks(6149),
                            Email = "gmail.com.Crooks50@yahoo.com",
                            FullName = "Ubaldo Fisher",
                            Password = "p3l9cn",
                            PhoneNumber = "0806005067",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 4, 17, 53, 59, 76, DateTimeKind.Unspecified).AddTicks(6149),
                            UserName = "Napoleon.Maggio"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.UserDepartment", b =>
                {
                    b.Property<int>("UserDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserDepartmentId"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserDepartmentId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDepartments");

                    b.HasData(
                        new
                        {
                            UserDepartmentId = 1,
                            DepartmentId = 7,
                            UserId = 15
                        },
                        new
                        {
                            UserDepartmentId = 2,
                            DepartmentId = 6,
                            UserId = 6
                        },
                        new
                        {
                            UserDepartmentId = 3,
                            DepartmentId = 7,
                            UserId = 20
                        },
                        new
                        {
                            UserDepartmentId = 4,
                            DepartmentId = 7,
                            UserId = 9
                        },
                        new
                        {
                            UserDepartmentId = 5,
                            DepartmentId = 7,
                            UserId = 17
                        },
                        new
                        {
                            UserDepartmentId = 6,
                            DepartmentId = 2,
                            UserId = 16
                        },
                        new
                        {
                            UserDepartmentId = 7,
                            DepartmentId = 3,
                            UserId = 16
                        },
                        new
                        {
                            UserDepartmentId = 8,
                            DepartmentId = 7,
                            UserId = 11
                        },
                        new
                        {
                            UserDepartmentId = 9,
                            DepartmentId = 7,
                            UserId = 20
                        },
                        new
                        {
                            UserDepartmentId = 10,
                            DepartmentId = 10,
                            UserId = 17
                        },
                        new
                        {
                            UserDepartmentId = 11,
                            DepartmentId = 3,
                            UserId = 7
                        },
                        new
                        {
                            UserDepartmentId = 12,
                            DepartmentId = 6,
                            UserId = 15
                        },
                        new
                        {
                            UserDepartmentId = 13,
                            DepartmentId = 9,
                            UserId = 2
                        },
                        new
                        {
                            UserDepartmentId = 14,
                            DepartmentId = 8,
                            UserId = 24
                        },
                        new
                        {
                            UserDepartmentId = 15,
                            DepartmentId = 9,
                            UserId = 7
                        },
                        new
                        {
                            UserDepartmentId = 16,
                            DepartmentId = 7,
                            UserId = 18
                        },
                        new
                        {
                            UserDepartmentId = 17,
                            DepartmentId = 10,
                            UserId = 19
                        },
                        new
                        {
                            UserDepartmentId = 18,
                            DepartmentId = 4,
                            UserId = 7
                        },
                        new
                        {
                            UserDepartmentId = 19,
                            DepartmentId = 4,
                            UserId = 17
                        },
                        new
                        {
                            UserDepartmentId = 20,
                            DepartmentId = 4,
                            UserId = 14
                        },
                        new
                        {
                            UserDepartmentId = 21,
                            DepartmentId = 10,
                            UserId = 15
                        },
                        new
                        {
                            UserDepartmentId = 22,
                            DepartmentId = 10,
                            UserId = 21
                        },
                        new
                        {
                            UserDepartmentId = 23,
                            DepartmentId = 3,
                            UserId = 10
                        },
                        new
                        {
                            UserDepartmentId = 24,
                            DepartmentId = 9,
                            UserId = 10
                        },
                        new
                        {
                            UserDepartmentId = 25,
                            DepartmentId = 10,
                            UserId = 9
                        },
                        new
                        {
                            UserDepartmentId = 26,
                            DepartmentId = 2,
                            UserId = 10
                        },
                        new
                        {
                            UserDepartmentId = 27,
                            DepartmentId = 10,
                            UserId = 17
                        },
                        new
                        {
                            UserDepartmentId = 28,
                            DepartmentId = 9,
                            UserId = 6
                        },
                        new
                        {
                            UserDepartmentId = 29,
                            DepartmentId = 1,
                            UserId = 19
                        },
                        new
                        {
                            UserDepartmentId = 30,
                            DepartmentId = 10,
                            UserId = 19
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.Property<int>("VehicleSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleSessionId"));

                    b.Property<DateTime>("CheckinTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckoutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GateId")
                        .HasColumnType("int");

                    b.Property<int>("SecurityID")
                        .HasColumnType("int");

                    b.Property<int>("VisitDetailId")
                        .HasColumnType("int");

                    b.HasKey("VehicleSessionId");

                    b.HasIndex("GateId");

                    b.HasIndex("SecurityID");

                    b.HasIndex("VisitDetailId");

                    b.ToTable("VehicleSessions");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSessionImage", b =>
                {
                    b.Property<int>("VehicleSessionImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleSessionImageId"));

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleSessionId")
                        .HasColumnType("int");

                    b.Property<string>("VehicleSessionImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleSessionImageId");

                    b.HasIndex("VehicleSessionId");

                    b.ToTable("VehicleSessionImages");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.Property<int>("VisitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitId"));

                    b.Property<int>("AcceptLevel")
                        .HasColumnType("int");

                    b.Property<int>("CreateById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRegister")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentReasonId")
                        .HasColumnType("int");

                    b.Property<int>("UpdateById")
                        .HasColumnType("int");

                    b.Property<int>("VisitQuantity")
                        .HasColumnType("int");

                    b.HasKey("VisitId");

                    b.HasIndex("CreateById");

                    b.HasIndex("DepartmentReasonId");

                    b.HasIndex("UpdateById");

                    b.ToTable("Visits");

                    b.HasData(
                        new
                        {
                            VisitId = 1,
                            AcceptLevel = 3,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 3, 10, 13, 2, 245, DateTimeKind.Unspecified).AddTicks(6124),
                            DepartmentReasonId = 3,
                            UpdateById = 4,
                            VisitQuantity = 6
                        },
                        new
                        {
                            VisitId = 2,
                            AcceptLevel = 4,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 4, 17, 26, 7, 116, DateTimeKind.Unspecified).AddTicks(2251),
                            DepartmentReasonId = 2,
                            UpdateById = 4,
                            VisitQuantity = 8
                        },
                        new
                        {
                            VisitId = 3,
                            AcceptLevel = 2,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 9, 1, 53, 30, 318, DateTimeKind.Unspecified).AddTicks(745),
                            DepartmentReasonId = 3,
                            UpdateById = 4,
                            VisitQuantity = 4
                        },
                        new
                        {
                            VisitId = 4,
                            AcceptLevel = 2,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 11, 23, 7, 12, 381, DateTimeKind.Unspecified).AddTicks(9518),
                            DepartmentReasonId = 5,
                            UpdateById = 4,
                            VisitQuantity = 2
                        },
                        new
                        {
                            VisitId = 5,
                            AcceptLevel = 3,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 2, 10, 7, 41, 631, DateTimeKind.Unspecified).AddTicks(6281),
                            DepartmentReasonId = 1,
                            UpdateById = 4,
                            VisitQuantity = 2
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.Property<int>("VisitDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitDetailId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpectedTimeIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpectedTimeOut")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("VisitDetailName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.Property<int>("VisitorId")
                        .HasColumnType("int");

                    b.HasKey("VisitDetailId");

                    b.HasIndex("VisitId");

                    b.HasIndex("VisitorId");

                    b.ToTable("VisitDetails");

                    b.HasData(
                        new
                        {
                            VisitDetailId = 1,
                            Description = "Mollitia minima quia velit quas. Quia quia itaque dicta voluptatem autem consectetur. Sed consequatur ex et. Excepturi earum nemo aspernatur sit at.",
                            ExpectedTimeIn = new DateTime(2024, 9, 20, 20, 31, 13, 125, DateTimeKind.Local).AddTicks(1835),
                            ExpectedTimeOut = new DateTime(2024, 9, 21, 20, 31, 13, 125, DateTimeKind.Local).AddTicks(1878),
                            Status = true,
                            VisitDetailName = "Fantastic Frozen Soap",
                            VisitId = 5,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitDetailId = 2,
                            Description = "Nihil ut enim nobis magni eum repudiandae. Nihil sint nihil ab facere laborum molestiae magnam adipisci. Rem inventore error natus aspernatur reprehenderit ducimus aut. Aut magnam harum magnam autem illum aut aliquid voluptas. Esse sequi natus et sapiente error est eum. Non ut porro ut odio aut et doloremque.",
                            ExpectedTimeIn = new DateTime(2024, 9, 20, 20, 31, 13, 125, DateTimeKind.Local).AddTicks(2955),
                            ExpectedTimeOut = new DateTime(2024, 9, 21, 20, 31, 13, 125, DateTimeKind.Local).AddTicks(2960),
                            Status = false,
                            VisitDetailName = "Generic Cotton Pants",
                            VisitId = 1,
                            VisitorId = 6
                        },
                        new
                        {
                            VisitDetailId = 3,
                            Description = "Corporis deleniti suscipit iste sed quia ex id officiis. Qui explicabo ut laborum aut. Quas ut ad ut non rerum. Est alias delectus ipsum qui sed et et quos. Necessitatibus pariatur unde harum molestias.",
                            ExpectedTimeIn = new DateTime(2024, 9, 20, 20, 31, 13, 125, DateTimeKind.Local).AddTicks(3170),
                            ExpectedTimeOut = new DateTime(2024, 9, 21, 20, 31, 13, 125, DateTimeKind.Local).AddTicks(3173),
                            Status = false,
                            VisitDetailName = "Handcrafted Plastic Pants",
                            VisitId = 3,
                            VisitorId = 10
                        },
                        new
                        {
                            VisitDetailId = 4,
                            Description = "Itaque hic id voluptas at. Sit qui et architecto et et. Fugiat voluptas eos nisi facilis sequi.",
                            ExpectedTimeIn = new DateTime(2024, 9, 20, 20, 31, 13, 125, DateTimeKind.Local).AddTicks(3255),
                            ExpectedTimeOut = new DateTime(2024, 9, 21, 20, 31, 13, 125, DateTimeKind.Local).AddTicks(3257),
                            Status = true,
                            VisitDetailName = "Rustic Frozen Chair",
                            VisitId = 5,
                            VisitorId = 4
                        },
                        new
                        {
                            VisitDetailId = 5,
                            Description = "Natus aut nostrum consequatur eveniet itaque molestias molestiae. Sequi reiciendis magni quia cupiditate consequuntur accusantium in ab hic. Doloribus deleniti fugiat alias eum corrupti maiores. Maxime repudiandae nisi eveniet quos eos dolore pariatur et perferendis. Consectetur amet qui repellendus nostrum aut et.",
                            ExpectedTimeIn = new DateTime(2024, 9, 20, 20, 31, 13, 125, DateTimeKind.Local).AddTicks(3389),
                            ExpectedTimeOut = new DateTime(2024, 9, 21, 20, 31, 13, 125, DateTimeKind.Local).AddTicks(3390),
                            Status = false,
                            VisitDetailName = "Unbranded Wooden Pizza",
                            VisitId = 2,
                            VisitorId = 2
                        },
                        new
                        {
                            VisitDetailId = 6,
                            Description = "Assumenda ut commodi facere mollitia. Fuga aut dolores excepturi quia cumque suscipit rerum quo. Corporis ut facilis magni repellendus distinctio rem ex. Est earum et et optio unde aut et. Fugiat quam doloribus doloremque rerum. Quaerat quibusdam ut.",
                            ExpectedTimeIn = new DateTime(2024, 9, 20, 20, 31, 13, 125, DateTimeKind.Local).AddTicks(3508),
                            ExpectedTimeOut = new DateTime(2024, 9, 21, 20, 31, 13, 125, DateTimeKind.Local).AddTicks(3510),
                            Status = false,
                            VisitDetailName = "Handmade Granite Car",
                            VisitId = 2,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitDetailId = 7,
                            Description = "Omnis quidem quae nesciunt libero voluptatibus. Autem porro aliquid iste vero adipisci repellat in. Accusantium esse est qui vero ipsam. Pariatur quasi et minus et.",
                            ExpectedTimeIn = new DateTime(2024, 9, 20, 20, 31, 13, 125, DateTimeKind.Local).AddTicks(3598),
                            ExpectedTimeOut = new DateTime(2024, 9, 21, 20, 31, 13, 125, DateTimeKind.Local).AddTicks(3599),
                            Status = true,
                            VisitDetailName = "Unbranded Steel Soap",
                            VisitId = 4,
                            VisitorId = 3
                        },
                        new
                        {
                            VisitDetailId = 8,
                            Description = "Et sed at. Dolor officiis nostrum itaque natus est. Et et tempora incidunt qui dolore asperiores eligendi. Harum laborum culpa. Dolorem facilis quis nihil repellendus. Dolorum esse aut quia ab ad et.",
                            ExpectedTimeIn = new DateTime(2024, 9, 20, 20, 31, 13, 125, DateTimeKind.Local).AddTicks(3710),
                            ExpectedTimeOut = new DateTime(2024, 9, 21, 20, 31, 13, 125, DateTimeKind.Local).AddTicks(3711),
                            Status = true,
                            VisitDetailName = "Unbranded Concrete Hat",
                            VisitId = 1,
                            VisitorId = 5
                        },
                        new
                        {
                            VisitDetailId = 9,
                            Description = "Dolor quaerat molestias dolorem. Consectetur maxime quis aspernatur magnam sint id omnis aspernatur. Inventore maiores aut nisi architecto aut occaecati sit. Eos est laborum impedit autem alias rerum accusamus. Dolorem ea quos nobis hic voluptatem nostrum accusantium. Amet et modi ipsam possimus autem dolorem molestiae.",
                            ExpectedTimeIn = new DateTime(2024, 9, 20, 20, 31, 13, 125, DateTimeKind.Local).AddTicks(3843),
                            ExpectedTimeOut = new DateTime(2024, 9, 21, 20, 31, 13, 125, DateTimeKind.Local).AddTicks(3849),
                            Status = true,
                            VisitDetailName = "Refined Plastic Pants",
                            VisitId = 5,
                            VisitorId = 10
                        },
                        new
                        {
                            VisitDetailId = 10,
                            Description = "Vitae occaecati ipsa soluta velit iusto eaque cum. Fugit praesentium quisquam suscipit totam ut. Harum quia in eos et est. Nesciunt aut sit praesentium sequi est sapiente ut iste. Vel dolor mollitia laborum. Nulla harum ea blanditiis nesciunt.",
                            ExpectedTimeIn = new DateTime(2024, 9, 20, 20, 31, 13, 125, DateTimeKind.Local).AddTicks(3966),
                            ExpectedTimeOut = new DateTime(2024, 9, 21, 20, 31, 13, 125, DateTimeKind.Local).AddTicks(3966),
                            Status = true,
                            VisitDetailName = "Gorgeous Soft Bacon",
                            VisitId = 3,
                            VisitorId = 8
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitProject", b =>
                {
                    b.Property<int>("VisitProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitProjectId"));

                    b.Property<DateTime>("ExpectedTimeIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpectedTimeOut")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("QuantityOfVisit")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.Property<string>("VisitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitProjectId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("VisitId");

                    b.ToTable("VisitProjects");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.Property<int>("VisitorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorId"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CredentialCardTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CredentialsCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VisitorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitorId");

                    b.HasIndex("CredentialCardTypeId");

                    b.ToTable("Visitors");

                    b.HasData(
                        new
                        {
                            VisitorId = 1,
                            CompanyName = "Price - Bahringer",
                            CreatedDate = new DateTime(2024, 9, 14, 3, 7, 53, 72, DateTimeKind.Unspecified).AddTicks(7101),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "sh9ostzuvh",
                            PhoneNumber = "0452634738",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 14, 3, 7, 53, 72, DateTimeKind.Unspecified).AddTicks(7101),
                            VisitorName = "Precious Heaney"
                        },
                        new
                        {
                            VisitorId = 2,
                            CompanyName = "Reichert - Larson",
                            CreatedDate = new DateTime(2024, 9, 7, 9, 28, 14, 272, DateTimeKind.Unspecified).AddTicks(9687),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "3qnesktsis",
                            PhoneNumber = "0727092702",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 7, 9, 28, 14, 272, DateTimeKind.Unspecified).AddTicks(9687),
                            VisitorName = "Laverna Marquardt"
                        },
                        new
                        {
                            VisitorId = 3,
                            CompanyName = "McCullough and Sons",
                            CreatedDate = new DateTime(2024, 9, 20, 12, 24, 39, 345, DateTimeKind.Unspecified).AddTicks(5878),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "ikajbhvugb",
                            PhoneNumber = "0270991238",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 20, 12, 24, 39, 345, DateTimeKind.Unspecified).AddTicks(5878),
                            VisitorName = "Lawrence Mayer"
                        },
                        new
                        {
                            VisitorId = 4,
                            CompanyName = "Kuhn - Raynor",
                            CreatedDate = new DateTime(2024, 9, 12, 0, 53, 26, 508, DateTimeKind.Unspecified).AddTicks(7000),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "3at6c547os",
                            PhoneNumber = "0786124272",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 12, 0, 53, 26, 508, DateTimeKind.Unspecified).AddTicks(7000),
                            VisitorName = "Nyasia Stanton"
                        },
                        new
                        {
                            VisitorId = 5,
                            CompanyName = "Osinski Group",
                            CreatedDate = new DateTime(2024, 9, 5, 14, 18, 23, 614, DateTimeKind.Unspecified).AddTicks(4311),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "psbpnabtgu",
                            PhoneNumber = "0340274050",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 5, 14, 18, 23, 614, DateTimeKind.Unspecified).AddTicks(4311),
                            VisitorName = "Wade Bins"
                        },
                        new
                        {
                            VisitorId = 6,
                            CompanyName = "Senger - Bartoletti",
                            CreatedDate = new DateTime(2024, 9, 3, 3, 32, 15, 166, DateTimeKind.Unspecified).AddTicks(3347),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "f39waowmuw",
                            PhoneNumber = "0807079074",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 3, 3, 32, 15, 166, DateTimeKind.Unspecified).AddTicks(3347),
                            VisitorName = "Danielle Bosco"
                        },
                        new
                        {
                            VisitorId = 7,
                            CompanyName = "Jakubowski - Greenholt",
                            CreatedDate = new DateTime(2024, 9, 8, 2, 41, 45, 659, DateTimeKind.Unspecified).AddTicks(6898),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "ndpy1zo3t0",
                            PhoneNumber = "0477163766",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 8, 2, 41, 45, 659, DateTimeKind.Unspecified).AddTicks(6898),
                            VisitorName = "Vilma Hermann"
                        },
                        new
                        {
                            VisitorId = 8,
                            CompanyName = "Powlowski and Sons",
                            CreatedDate = new DateTime(2024, 9, 19, 1, 42, 26, 710, DateTimeKind.Unspecified).AddTicks(5251),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "8xlrqss5af",
                            PhoneNumber = "0624306462",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 19, 1, 42, 26, 710, DateTimeKind.Unspecified).AddTicks(5251),
                            VisitorName = "Jaren Stroman"
                        },
                        new
                        {
                            VisitorId = 9,
                            CompanyName = "Mante - Yost",
                            CreatedDate = new DateTime(2024, 9, 18, 6, 16, 18, 840, DateTimeKind.Unspecified).AddTicks(178),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "krr5d6q8ow",
                            PhoneNumber = "0580889411",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 18, 6, 16, 18, 840, DateTimeKind.Unspecified).AddTicks(178),
                            VisitorName = "Cole DuBuque"
                        },
                        new
                        {
                            VisitorId = 10,
                            CompanyName = "Kuhn - Funk",
                            CreatedDate = new DateTime(2024, 9, 5, 17, 30, 10, 373, DateTimeKind.Unspecified).AddTicks(7776),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "dydunnh8z8",
                            PhoneNumber = "0765117529",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 5, 17, 30, 10, 373, DateTimeKind.Unspecified).AddTicks(7776),
                            VisitorName = "Ella Cartwright"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.Property<int>("VisitorSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorSessionId"));

                    b.Property<DateTime>("CheckinTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CheckoutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GateInId")
                        .HasColumnType("int");

                    b.Property<int?>("GateOutId")
                        .HasColumnType("int");

                    b.Property<int>("QRCardId")
                        .HasColumnType("int");

                    b.Property<int>("SecurityInId")
                        .HasColumnType("int");

                    b.Property<int?>("SecurityOutId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitDetailId")
                        .HasColumnType("int");

                    b.HasKey("VisitorSessionId");

                    b.HasIndex("GateInId");

                    b.HasIndex("GateOutId");

                    b.HasIndex("QRCardId");

                    b.HasIndex("SecurityInId");

                    b.HasIndex("SecurityOutId");

                    b.HasIndex("VisitDetailId");

                    b.ToTable("VisitorSessions");

                    b.HasData(
                        new
                        {
                            VisitorSessionId = 1,
                            CheckinTime = new DateTime(2024, 9, 21, 13, 31, 13, 127, DateTimeKind.Utc).AddTicks(7133),
                            GateInId = 2,
                            QRCardId = 10,
                            SecurityInId = 5,
                            Status = "CheckIn",
                            VisitDetailId = 2
                        },
                        new
                        {
                            VisitorSessionId = 2,
                            CheckinTime = new DateTime(2024, 9, 21, 13, 31, 13, 127, DateTimeKind.Utc).AddTicks(9648),
                            GateInId = 2,
                            QRCardId = 2,
                            SecurityInId = 5,
                            Status = "CheckIn",
                            VisitDetailId = 5
                        },
                        new
                        {
                            VisitorSessionId = 3,
                            CheckinTime = new DateTime(2024, 9, 21, 13, 31, 13, 127, DateTimeKind.Utc).AddTicks(9676),
                            GateInId = 2,
                            QRCardId = 4,
                            SecurityInId = 5,
                            Status = "CheckIn",
                            VisitDetailId = 1
                        },
                        new
                        {
                            VisitorSessionId = 4,
                            CheckinTime = new DateTime(2024, 9, 21, 13, 31, 13, 127, DateTimeKind.Utc).AddTicks(9688),
                            GateInId = 1,
                            QRCardId = 2,
                            SecurityInId = 5,
                            Status = "CheckIn",
                            VisitDetailId = 10
                        },
                        new
                        {
                            VisitorSessionId = 5,
                            CheckinTime = new DateTime(2024, 9, 21, 13, 31, 13, 127, DateTimeKind.Utc).AddTicks(9697),
                            GateInId = 2,
                            QRCardId = 6,
                            SecurityInId = 5,
                            Status = "CheckIn",
                            VisitDetailId = 1
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSessionsImage", b =>
                {
                    b.Property<int>("VisitorSessionsImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorSessionsImageId"));

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitorSessionId")
                        .HasColumnType("int");

                    b.HasKey("VisitorSessionsImageId");

                    b.HasIndex("VisitorSessionId");

                    b.ToTable("VisitorSessionsImages");

                    b.HasData(
                        new
                        {
                            VisitorSessionsImageId = 1,
                            ImageType = "jpg",
                            ImageURL = "https://example.com/images/1_1.jpg",
                            Name = "Image_1_1",
                            VisitorSessionId = 1
                        },
                        new
                        {
                            VisitorSessionsImageId = 2,
                            ImageType = "jpg",
                            ImageURL = "https://example.com/images/1_2.jpg",
                            Name = "Image_1_2",
                            VisitorSessionId = 1
                        },
                        new
                        {
                            VisitorSessionsImageId = 3,
                            ImageType = "jpg",
                            ImageURL = "https://example.com/images/1_3.jpg",
                            Name = "Image_1_3",
                            VisitorSessionId = 1
                        },
                        new
                        {
                            VisitorSessionsImageId = 4,
                            ImageType = "jpg",
                            ImageURL = "https://example.com/images/2_1.jpg",
                            Name = "Image_2_1",
                            VisitorSessionId = 2
                        },
                        new
                        {
                            VisitorSessionsImageId = 5,
                            ImageType = "jpg",
                            ImageURL = "https://example.com/images/2_2.jpg",
                            Name = "Image_2_2",
                            VisitorSessionId = 2
                        },
                        new
                        {
                            VisitorSessionsImageId = 6,
                            ImageType = "jpg",
                            ImageURL = "https://example.com/images/2_3.jpg",
                            Name = "Image_2_3",
                            VisitorSessionId = 2
                        },
                        new
                        {
                            VisitorSessionsImageId = 7,
                            ImageType = "jpg",
                            ImageURL = "https://example.com/images/3_1.jpg",
                            Name = "Image_3_1",
                            VisitorSessionId = 3
                        },
                        new
                        {
                            VisitorSessionsImageId = 8,
                            ImageType = "jpg",
                            ImageURL = "https://example.com/images/3_2.jpg",
                            Name = "Image_3_2",
                            VisitorSessionId = 3
                        },
                        new
                        {
                            VisitorSessionsImageId = 9,
                            ImageType = "jpg",
                            ImageURL = "https://example.com/images/3_3.jpg",
                            Name = "Image_3_3",
                            VisitorSessionId = 3
                        },
                        new
                        {
                            VisitorSessionsImageId = 10,
                            ImageType = "jpg",
                            ImageURL = "https://example.com/images/4_1.jpg",
                            Name = "Image_4_1",
                            VisitorSessionId = 4
                        },
                        new
                        {
                            VisitorSessionsImageId = 11,
                            ImageType = "jpg",
                            ImageURL = "https://example.com/images/4_2.jpg",
                            Name = "Image_4_2",
                            VisitorSessionId = 4
                        },
                        new
                        {
                            VisitorSessionsImageId = 12,
                            ImageType = "jpg",
                            ImageURL = "https://example.com/images/4_3.jpg",
                            Name = "Image_4_3",
                            VisitorSessionId = 4
                        },
                        new
                        {
                            VisitorSessionsImageId = 13,
                            ImageType = "jpg",
                            ImageURL = "https://example.com/images/5_1.jpg",
                            Name = "Image_5_1",
                            VisitorSessionId = 5
                        },
                        new
                        {
                            VisitorSessionsImageId = 14,
                            ImageType = "jpg",
                            ImageURL = "https://example.com/images/5_2.jpg",
                            Name = "Image_5_2",
                            VisitorSessionId = 5
                        },
                        new
                        {
                            VisitorSessionsImageId = 15,
                            ImageType = "jpg",
                            ImageURL = "https://example.com/images/5_3.jpg",
                            Name = "Image_5_3",
                            VisitorSessionId = 5
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.DepartmentReason", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Department", "Department")
                        .WithMany("DepartmentReason")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Reason", "Reason")
                        .WithMany("DepartmentReason")
                        .HasForeignKey("ReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Reason");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.NotificationUsers", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Notification", "Notification")
                        .WithMany("NotificationUsers")
                        .HasForeignKey("NotificationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Receiver")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Sender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Project", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.User", "User")
                        .WithMany("Project")
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.QRCardStatus", "QRCardStatus")
                        .WithMany("QRCards")
                        .HasForeignKey("QRCardStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.QRCardType", "QRCardType")
                        .WithMany("QRCards")
                        .HasForeignKey("QRCardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QRCardStatus");

                    b.Navigation("QRCardType");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Role", "Role")
                        .WithMany("User")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.UserDepartment", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Department", "Department")
                        .WithMany("UserDepartment")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "User")
                        .WithMany("UserDepartment")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Gate", "Gate")
                        .WithMany("VehicleSession")
                        .HasForeignKey("GateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Security")
                        .WithMany("VehicleSession")
                        .HasForeignKey("SecurityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.VisitDetail", "VisitDetail")
                        .WithMany("VehicleSession")
                        .HasForeignKey("VisitDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gate");

                    b.Navigation("Security");

                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSessionImage", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.VehicleSession", "VehicleSession")
                        .WithMany("Images")
                        .HasForeignKey("VehicleSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.User", "CreateBy")
                        .WithMany("CreatedVisits")
                        .HasForeignKey("CreateById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.DepartmentReason", "DepartmentReason")
                        .WithMany("Visits")
                        .HasForeignKey("DepartmentReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "UpdateBy")
                        .WithMany("UpdatedVisits")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreateBy");

                    b.Navigation("DepartmentReason");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Visit", "Visit")
                        .WithMany("VisitDetail")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Visitor", "Visitor")
                        .WithMany("VisitDetail")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visit");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitProject", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Project", "Project")
                        .WithMany("VisitProject")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Visit", "Visit")
                        .WithMany("VisitProject")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.CredentialCardType", "CredentialCardType")
                        .WithMany("Visitor")
                        .HasForeignKey("CredentialCardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CredentialCardType");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Gate", "GateIn")
                        .WithMany("VisitorSessionsIn")
                        .HasForeignKey("GateInId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Gate", "GateOut")
                        .WithMany("VisitorSessionsOut")
                        .HasForeignKey("GateOutId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SecurityGateApv.Domain.Models.QRCard", "QRCard")
                        .WithMany("VisitorSession")
                        .HasForeignKey("QRCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "SecurityIn")
                        .WithMany("SecurityInSessions")
                        .HasForeignKey("SecurityInId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "SecurityOut")
                        .WithMany("SecurityOutSessions")
                        .HasForeignKey("SecurityOutId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SecurityGateApv.Domain.Models.VisitDetail", "VisitDetail")
                        .WithMany("VisitorSession")
                        .HasForeignKey("VisitDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GateIn");

                    b.Navigation("GateOut");

                    b.Navigation("QRCard");

                    b.Navigation("SecurityIn");

                    b.Navigation("SecurityOut");

                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSessionsImage", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.VisitorSession", "VisitorSession")
                        .WithMany("Images")
                        .HasForeignKey("VisitorSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.CredentialCardType", b =>
                {
                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Department", b =>
                {
                    b.Navigation("DepartmentReason");

                    b.Navigation("UserDepartment");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.DepartmentReason", b =>
                {
                    b.Navigation("Visits");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Gate", b =>
                {
                    b.Navigation("VehicleSession");

                    b.Navigation("VisitorSessionsIn");

                    b.Navigation("VisitorSessionsOut");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Notification", b =>
                {
                    b.Navigation("NotificationUsers");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Project", b =>
                {
                    b.Navigation("VisitProject");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardStatus", b =>
                {
                    b.Navigation("QRCards");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardType", b =>
                {
                    b.Navigation("QRCards");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Reason", b =>
                {
                    b.Navigation("DepartmentReason");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Role", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.Navigation("CreatedVisits");

                    b.Navigation("Project");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("SecurityInSessions");

                    b.Navigation("SecurityOutSessions");

                    b.Navigation("SentNotifications");

                    b.Navigation("UpdatedVisits");

                    b.Navigation("UserDepartment");

                    b.Navigation("VehicleSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.Navigation("VisitDetail");

                    b.Navigation("VisitProject");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.Navigation("VehicleSession");

                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
