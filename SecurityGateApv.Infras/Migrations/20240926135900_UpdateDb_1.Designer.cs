// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SecurityGateApv.Infras.DBContext;

#nullable disable

namespace SecurityGateApv.Infras.Migrations
{
    [DbContext(typeof(SecurityGateApvDbContext))]
    [Migration("20240926135900_UpdateDb_1")]
    partial class UpdateDb_1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SecurityGateApv.Domain.Models.CredentialCardType", b =>
                {
                    b.Property<int>("CredentialCardTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CredentialCardTypeId"));

                    b.Property<string>("CredentialCardTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CredentialCardTypeId");

                    b.ToTable("CredentialCardTypes");

                    b.HasData(
                        new
                        {
                            CredentialCardTypeId = 1,
                            CredentialCardTypeName = "Căn cước công dân"
                        },
                        new
                        {
                            CredentialCardTypeId = 2,
                            CredentialCardTypeName = "Căn cước công dân"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<int>("AcceptLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            AcceptLevel = 1,
                            CreateDate = new DateTime(2024, 9, 25, 6, 54, 21, 513, DateTimeKind.Utc).AddTicks(9465),
                            DepartmentName = "Phòng Kinh doanh",
                            Description = "Qui iusto ab id numquam.",
                            UpdatedDate = new DateTime(2024, 9, 25, 6, 54, 21, 513, DateTimeKind.Utc).AddTicks(9465)
                        },
                        new
                        {
                            DepartmentId = 2,
                            AcceptLevel = 1,
                            CreateDate = new DateTime(2024, 9, 9, 8, 55, 55, 555, DateTimeKind.Utc).AddTicks(4554),
                            DepartmentName = "Phòng Chăm sóc khách hàng",
                            Description = "Ut dolore eos.",
                            UpdatedDate = new DateTime(2024, 9, 9, 8, 55, 55, 555, DateTimeKind.Utc).AddTicks(4554)
                        },
                        new
                        {
                            DepartmentId = 3,
                            AcceptLevel = 3,
                            CreateDate = new DateTime(2024, 9, 4, 18, 53, 26, 524, DateTimeKind.Utc).AddTicks(253),
                            DepartmentName = "Phòng Kinh doanh",
                            Description = "Velit ut magni dolores exercitationem.",
                            UpdatedDate = new DateTime(2024, 9, 4, 18, 53, 26, 524, DateTimeKind.Utc).AddTicks(253)
                        },
                        new
                        {
                            DepartmentId = 4,
                            AcceptLevel = 4,
                            CreateDate = new DateTime(2024, 9, 12, 22, 6, 57, 959, DateTimeKind.Utc).AddTicks(6175),
                            DepartmentName = "Phòng Chăm sóc khách hàng",
                            Description = "Laboriosam harum amet labore ea nobis sint accusantium magni.",
                            UpdatedDate = new DateTime(2024, 9, 12, 22, 6, 57, 959, DateTimeKind.Utc).AddTicks(6175)
                        },
                        new
                        {
                            DepartmentId = 5,
                            AcceptLevel = 2,
                            CreateDate = new DateTime(2024, 9, 11, 6, 28, 8, 496, DateTimeKind.Utc).AddTicks(2588),
                            DepartmentName = "Phòng Chăm sóc khách hàng",
                            Description = "Quae in similique.",
                            UpdatedDate = new DateTime(2024, 9, 11, 6, 28, 8, 496, DateTimeKind.Utc).AddTicks(2588)
                        },
                        new
                        {
                            DepartmentId = 6,
                            AcceptLevel = 5,
                            CreateDate = new DateTime(2024, 9, 10, 12, 2, 4, 320, DateTimeKind.Utc).AddTicks(4826),
                            DepartmentName = "Phòng Marketing",
                            Description = "Tempore aut molestiae provident.",
                            UpdatedDate = new DateTime(2024, 9, 10, 12, 2, 4, 320, DateTimeKind.Utc).AddTicks(4826)
                        },
                        new
                        {
                            DepartmentId = 7,
                            AcceptLevel = 5,
                            CreateDate = new DateTime(2024, 9, 11, 16, 12, 34, 606, DateTimeKind.Utc).AddTicks(9764),
                            DepartmentName = "Phòng Kinh doanh",
                            Description = "Beatae voluptas mollitia.",
                            UpdatedDate = new DateTime(2024, 9, 11, 16, 12, 34, 606, DateTimeKind.Utc).AddTicks(9764)
                        },
                        new
                        {
                            DepartmentId = 8,
                            AcceptLevel = 1,
                            CreateDate = new DateTime(2024, 9, 14, 14, 10, 17, 43, DateTimeKind.Utc).AddTicks(981),
                            DepartmentName = "Phòng Kinh doanh",
                            Description = "Voluptates voluptatem qui quia praesentium quia.",
                            UpdatedDate = new DateTime(2024, 9, 14, 14, 10, 17, 43, DateTimeKind.Utc).AddTicks(981)
                        },
                        new
                        {
                            DepartmentId = 9,
                            AcceptLevel = 4,
                            CreateDate = new DateTime(2024, 9, 13, 16, 30, 38, 922, DateTimeKind.Utc).AddTicks(5353),
                            DepartmentName = "Phòng Marketing",
                            Description = "Sit incidunt libero.",
                            UpdatedDate = new DateTime(2024, 9, 13, 16, 30, 38, 922, DateTimeKind.Utc).AddTicks(5353)
                        },
                        new
                        {
                            DepartmentId = 10,
                            AcceptLevel = 2,
                            CreateDate = new DateTime(2024, 9, 17, 11, 5, 13, 899, DateTimeKind.Utc).AddTicks(6473),
                            DepartmentName = "Phòng Sản xuất",
                            Description = "Quo ut non commodi corporis eveniet iusto cum illum.",
                            UpdatedDate = new DateTime(2024, 9, 17, 11, 5, 13, 899, DateTimeKind.Utc).AddTicks(6473)
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Gate", b =>
                {
                    b.Property<int>("GateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GateId"));

                    b.Property<string>("GateCoordinate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GateId");

                    b.ToTable("Gates");

                    b.HasData(
                        new
                        {
                            GateId = 1,
                            GateCoordinate = "Ra vào trong ngày",
                            GateName = "Cổng 1"
                        },
                        new
                        {
                            GateId = 2,
                            GateCoordinate = "Ra vào trong ngày",
                            GateName = "Cổng 2"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.NotificationUsers", b =>
                {
                    b.Property<int>("NotificationUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationUserID"));

                    b.Property<int>("NotificationID")
                        .HasColumnType("int");

                    b.Property<bool>("ReadStatus")
                        .HasColumnType("bit");

                    b.Property<int>("ReceiverID")
                        .HasColumnType("int");

                    b.Property<int>("SenderID")
                        .HasColumnType("int");

                    b.HasKey("NotificationUserID");

                    b.HasIndex("NotificationID");

                    b.HasIndex("ReceiverID");

                    b.HasIndex("SenderID");

                    b.ToTable("NotificationUsers");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Process", b =>
                {
                    b.Property<int>("ProcessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProcessId"));

                    b.Property<int>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("VisitTypeId")
                        .HasColumnType("int");

                    b.HasKey("ProcessId");

                    b.HasIndex("CreateBy");

                    b.HasIndex("VisitTypeId");

                    b.ToTable("Processes");

                    b.HasData(
                        new
                        {
                            ProcessId = 1,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 24, 13, 58, 59, 289, DateTimeKind.Utc).AddTicks(2434),
                            Description = "",
                            ProcessName = "Sleek Wooden Cheese",
                            Status = true,
                            VisitTypeId = 1
                        },
                        new
                        {
                            ProcessId = 2,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 24, 13, 58, 59, 289, DateTimeKind.Utc).AddTicks(5398),
                            Description = "",
                            ProcessName = "Generic Frozen Salad",
                            Status = true,
                            VisitTypeId = 1
                        },
                        new
                        {
                            ProcessId = 3,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 24, 13, 58, 59, 289, DateTimeKind.Utc).AddTicks(5433),
                            Description = "",
                            ProcessName = "Licensed Concrete Shirt",
                            Status = false,
                            VisitTypeId = 1
                        },
                        new
                        {
                            ProcessId = 4,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 24, 13, 58, 59, 289, DateTimeKind.Utc).AddTicks(5450),
                            Description = "",
                            ProcessName = "Refined Granite Chair",
                            Status = false,
                            VisitTypeId = 1
                        },
                        new
                        {
                            ProcessId = 5,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 24, 13, 58, 59, 289, DateTimeKind.Utc).AddTicks(5467),
                            Description = "",
                            ProcessName = "Generic Cotton Towels",
                            Status = false,
                            VisitTypeId = 1
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.Property<int>("QRCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardId"));

                    b.Property<Guid>("CardGuidId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastCancelDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QRCardStatusId")
                        .HasColumnType("int");

                    b.Property<int>("QRCardTypeId")
                        .HasColumnType("int");

                    b.HasKey("QRCardId");

                    b.HasIndex("QRCardStatusId");

                    b.HasIndex("QRCardTypeId");

                    b.ToTable("QRCards");

                    b.HasData(
                        new
                        {
                            QRCardId = 1,
                            CardGuidId = new Guid("52cf61e7-af39-41ad-b625-f715b10a61ed"),
                            CreateDate = new DateTime(2024, 9, 26, 20, 58, 59, 359, DateTimeKind.Local).AddTicks(9828),
                            LastCancelDate = new DateTime(2024, 10, 26, 20, 58, 59, 359, DateTimeKind.Local).AddTicks(9828),
                            QRCardStatusId = 2,
                            QRCardTypeId = 1
                        },
                        new
                        {
                            QRCardId = 2,
                            CardGuidId = new Guid("0740a1b2-0279-4fa7-8483-d3c012168056"),
                            CreateDate = new DateTime(2024, 9, 26, 20, 58, 59, 360, DateTimeKind.Local).AddTicks(135),
                            LastCancelDate = new DateTime(2024, 10, 26, 20, 58, 59, 360, DateTimeKind.Local).AddTicks(135),
                            QRCardStatusId = 2,
                            QRCardTypeId = 2
                        },
                        new
                        {
                            QRCardId = 3,
                            CardGuidId = new Guid("5813acbe-9749-4440-a04c-0216a98a670b"),
                            CreateDate = new DateTime(2024, 9, 26, 20, 58, 59, 360, DateTimeKind.Local).AddTicks(153),
                            LastCancelDate = new DateTime(2024, 10, 26, 20, 58, 59, 360, DateTimeKind.Local).AddTicks(153),
                            QRCardStatusId = 1,
                            QRCardTypeId = 1
                        },
                        new
                        {
                            QRCardId = 4,
                            CardGuidId = new Guid("153c8b04-82bf-454d-ac65-965f377e8b9c"),
                            CreateDate = new DateTime(2024, 9, 26, 20, 58, 59, 360, DateTimeKind.Local).AddTicks(165),
                            LastCancelDate = new DateTime(2024, 10, 26, 20, 58, 59, 360, DateTimeKind.Local).AddTicks(165),
                            QRCardStatusId = 1,
                            QRCardTypeId = 2
                        },
                        new
                        {
                            QRCardId = 5,
                            CardGuidId = new Guid("8d3fdbcc-48c9-4aaa-abf1-7a317ff7216c"),
                            CreateDate = new DateTime(2024, 9, 26, 20, 58, 59, 360, DateTimeKind.Local).AddTicks(192),
                            LastCancelDate = new DateTime(2024, 10, 26, 20, 58, 59, 360, DateTimeKind.Local).AddTicks(192),
                            QRCardStatusId = 2,
                            QRCardTypeId = 1
                        },
                        new
                        {
                            QRCardId = 6,
                            CardGuidId = new Guid("0176a987-218f-4d18-9132-bab289272c84"),
                            CreateDate = new DateTime(2024, 9, 26, 20, 58, 59, 360, DateTimeKind.Local).AddTicks(203),
                            LastCancelDate = new DateTime(2024, 10, 26, 20, 58, 59, 360, DateTimeKind.Local).AddTicks(203),
                            QRCardStatusId = 2,
                            QRCardTypeId = 1
                        },
                        new
                        {
                            QRCardId = 7,
                            CardGuidId = new Guid("4a08da74-6a02-4eab-8c6a-3d5384a5dd7b"),
                            CreateDate = new DateTime(2024, 9, 26, 20, 58, 59, 360, DateTimeKind.Local).AddTicks(212),
                            LastCancelDate = new DateTime(2024, 10, 26, 20, 58, 59, 360, DateTimeKind.Local).AddTicks(212),
                            QRCardStatusId = 2,
                            QRCardTypeId = 2
                        },
                        new
                        {
                            QRCardId = 8,
                            CardGuidId = new Guid("adc74f61-9047-4f0b-9c32-643d56540f1d"),
                            CreateDate = new DateTime(2024, 9, 26, 20, 58, 59, 360, DateTimeKind.Local).AddTicks(275),
                            LastCancelDate = new DateTime(2024, 10, 26, 20, 58, 59, 360, DateTimeKind.Local).AddTicks(275),
                            QRCardStatusId = 1,
                            QRCardTypeId = 2
                        },
                        new
                        {
                            QRCardId = 9,
                            CardGuidId = new Guid("e23859ee-679d-4f2d-8e06-98794c0bcc92"),
                            CreateDate = new DateTime(2024, 9, 26, 20, 58, 59, 360, DateTimeKind.Local).AddTicks(297),
                            LastCancelDate = new DateTime(2024, 10, 26, 20, 58, 59, 360, DateTimeKind.Local).AddTicks(297),
                            QRCardStatusId = 2,
                            QRCardTypeId = 2
                        },
                        new
                        {
                            QRCardId = 10,
                            CardGuidId = new Guid("09f809e1-1f25-444f-b7ec-ea5ca32b1f9f"),
                            CreateDate = new DateTime(2024, 9, 26, 20, 58, 59, 360, DateTimeKind.Local).AddTicks(308),
                            LastCancelDate = new DateTime(2024, 10, 26, 20, 58, 59, 360, DateTimeKind.Local).AddTicks(308),
                            QRCardStatusId = 2,
                            QRCardTypeId = 2
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardStatus", b =>
                {
                    b.Property<int>("QRCardStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardStatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusNumber")
                        .HasColumnType("int");

                    b.HasKey("QRCardStatusId");

                    b.ToTable("QRCardStatus");

                    b.HasData(
                        new
                        {
                            QRCardStatusId = 1,
                            StatusName = "Active",
                            StatusNumber = 1
                        },
                        new
                        {
                            QRCardStatusId = 2,
                            StatusName = "Inactive",
                            StatusNumber = 0
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardType", b =>
                {
                    b.Property<int>("QRCardTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardTypeId"));

                    b.Property<string>("CardTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QRCardTypeId");

                    b.ToTable("QRCardType");

                    b.HasData(
                        new
                        {
                            QRCardTypeId = 1,
                            CardTypeName = "Employee",
                            TypeDescription = "Employee QR Card"
                        },
                        new
                        {
                            QRCardTypeId = 2,
                            CardTypeName = "Visitor",
                            TypeDescription = "Visitor QR Card"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Description = "Quản lý toàn bộ hệ thống",
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            Description = "Quản lý toàn bộ công ty",
                            RoleName = "Manager"
                        },
                        new
                        {
                            RoleId = 3,
                            Description = "Quản lý toàn bộ phòng ban",
                            RoleName = "DepartmentManaager"
                        },
                        new
                        {
                            RoleId = 4,
                            Description = "Tạo và quản lý khách ra vào của phòng ban",
                            RoleName = "Staff"
                        },
                        new
                        {
                            RoleId = 5,
                            Description = "Quản lý khách ra vào tại cổng",
                            RoleName = "Security"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedDate = new DateTime(2024, 3, 26, 13, 58, 59, 273, DateTimeKind.Utc).AddTicks(9419),
                            Email = "admin1@example.com",
                            FullName = "Admin One",
                            Password = "123",
                            PhoneNumber = "0123456789",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 13, 58, 59, 273, DateTimeKind.Utc).AddTicks(9425),
                            UserName = "admin1"
                        },
                        new
                        {
                            UserId = 2,
                            CreatedDate = new DateTime(2024, 6, 26, 13, 58, 59, 273, DateTimeKind.Utc).AddTicks(9429),
                            Email = "manager1@example.com",
                            FullName = "Manager One",
                            Password = "123",
                            PhoneNumber = "0987654321",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 13, 58, 59, 273, DateTimeKind.Utc).AddTicks(9430),
                            UserName = "manager1"
                        },
                        new
                        {
                            UserId = 3,
                            CreatedDate = new DateTime(2024, 7, 26, 13, 58, 59, 273, DateTimeKind.Utc).AddTicks(9432),
                            Email = "employee1@example.com",
                            FullName = "Department Manager One",
                            Password = "123",
                            PhoneNumber = "0112223334",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 13, 58, 59, 273, DateTimeKind.Utc).AddTicks(9432),
                            UserName = "DM1"
                        },
                        new
                        {
                            UserId = 4,
                            CreatedDate = new DateTime(2024, 8, 26, 13, 58, 59, 273, DateTimeKind.Utc).AddTicks(9434),
                            Email = "hr1@example.com",
                            FullName = "Staff One",
                            Password = "123",
                            PhoneNumber = "0223334445",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 13, 58, 59, 273, DateTimeKind.Utc).AddTicks(9434),
                            UserName = "Staff1"
                        },
                        new
                        {
                            UserId = 5,
                            CreatedDate = new DateTime(2024, 5, 26, 13, 58, 59, 273, DateTimeKind.Utc).AddTicks(9436),
                            Email = "it1@example.com",
                            FullName = "Security One",
                            Password = "123",
                            PhoneNumber = "0334445556",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 13, 58, 59, 273, DateTimeKind.Utc).AddTicks(9436),
                            UserName = "Security1"
                        },
                        new
                        {
                            UserId = 6,
                            CreatedDate = new DateTime(2024, 9, 6, 12, 54, 41, 18, DateTimeKind.Unspecified).AddTicks(9972),
                            Email = "gmail.com_Daugherty25@gmail.com",
                            FullName = "Nelle Labadie",
                            Password = "k90o18",
                            PhoneNumber = "0221635545",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 6, 12, 54, 41, 18, DateTimeKind.Unspecified).AddTicks(9972),
                            UserName = "Margaretta46"
                        },
                        new
                        {
                            UserId = 7,
                            CreatedDate = new DateTime(2024, 9, 21, 16, 44, 50, 540, DateTimeKind.Unspecified).AddTicks(94),
                            Email = "gmail.com28@gmail.com",
                            FullName = "Dortha Nikolaus",
                            Password = "lpsjea",
                            PhoneNumber = "0765958967",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 21, 16, 44, 50, 540, DateTimeKind.Unspecified).AddTicks(94),
                            UserName = "Ottilie96"
                        },
                        new
                        {
                            UserId = 8,
                            CreatedDate = new DateTime(2024, 9, 9, 9, 46, 23, 759, DateTimeKind.Unspecified).AddTicks(5753),
                            Email = "gmail.com.Wehner8@gmail.com",
                            FullName = "Lucy Mann",
                            Password = "nkl7u1",
                            PhoneNumber = "0782943701",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 9, 9, 46, 23, 759, DateTimeKind.Unspecified).AddTicks(5753),
                            UserName = "Shanny35"
                        },
                        new
                        {
                            UserId = 9,
                            CreatedDate = new DateTime(2024, 9, 10, 10, 28, 54, 710, DateTimeKind.Unspecified).AddTicks(5595),
                            Email = "gmail.com_Murray11@hotmail.com",
                            FullName = "Deonte Purdy",
                            Password = "xo62k8",
                            PhoneNumber = "0940722049",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 10, 10, 28, 54, 710, DateTimeKind.Unspecified).AddTicks(5595),
                            UserName = "Laurence_Kirlin"
                        },
                        new
                        {
                            UserId = 10,
                            CreatedDate = new DateTime(2024, 9, 17, 10, 53, 39, 588, DateTimeKind.Unspecified).AddTicks(5921),
                            Email = "gmail.com15@gmail.com",
                            FullName = "Joanie Roberts",
                            Password = "dvm0b1",
                            PhoneNumber = "0212554892",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 17, 10, 53, 39, 588, DateTimeKind.Unspecified).AddTicks(5921),
                            UserName = "Brian.Zboncak59"
                        },
                        new
                        {
                            UserId = 11,
                            CreatedDate = new DateTime(2024, 9, 5, 8, 15, 12, 869, DateTimeKind.Unspecified).AddTicks(8651),
                            Email = "gmail.com90@yahoo.com",
                            FullName = "Mario Halvorson",
                            Password = "2kd5xq",
                            PhoneNumber = "0590308271",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 5, 8, 15, 12, 869, DateTimeKind.Unspecified).AddTicks(8651),
                            UserName = "Camille13"
                        },
                        new
                        {
                            UserId = 12,
                            CreatedDate = new DateTime(2024, 9, 19, 15, 19, 24, 97, DateTimeKind.Unspecified).AddTicks(6156),
                            Email = "gmail.com_Greenfelder11@gmail.com",
                            FullName = "Deion Huel",
                            Password = "znjesg",
                            PhoneNumber = "0350810904",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 19, 15, 19, 24, 97, DateTimeKind.Unspecified).AddTicks(6156),
                            UserName = "Silas19"
                        },
                        new
                        {
                            UserId = 13,
                            CreatedDate = new DateTime(2024, 9, 19, 10, 32, 46, 50, DateTimeKind.Unspecified).AddTicks(3321),
                            Email = "gmail.com.Volkman@yahoo.com",
                            FullName = "Sylvia Padberg",
                            Password = "82rwka",
                            PhoneNumber = "0843976366",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 19, 10, 32, 46, 50, DateTimeKind.Unspecified).AddTicks(3321),
                            UserName = "Rosa.Metz"
                        },
                        new
                        {
                            UserId = 14,
                            CreatedDate = new DateTime(2024, 9, 6, 21, 27, 10, 30, DateTimeKind.Unspecified).AddTicks(5876),
                            Email = "gmail.com24@yahoo.com",
                            FullName = "Alf Steuber",
                            Password = "pol45x",
                            PhoneNumber = "0202220360",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 6, 21, 27, 10, 30, DateTimeKind.Unspecified).AddTicks(5876),
                            UserName = "Berry_Streich97"
                        },
                        new
                        {
                            UserId = 15,
                            CreatedDate = new DateTime(2024, 9, 16, 21, 25, 3, 56, DateTimeKind.Unspecified).AddTicks(3470),
                            Email = "gmail.com.Krajcik@gmail.com",
                            FullName = "Yasmine Grimes",
                            Password = "pxngof",
                            PhoneNumber = "0340309130",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 16, 21, 25, 3, 56, DateTimeKind.Unspecified).AddTicks(3470),
                            UserName = "Dangelo_Schaden"
                        },
                        new
                        {
                            UserId = 16,
                            CreatedDate = new DateTime(2024, 9, 13, 13, 12, 44, 130, DateTimeKind.Unspecified).AddTicks(6178),
                            Email = "gmail.com.Grimes53@yahoo.com",
                            FullName = "Tremayne Zboncak",
                            Password = "hogk85",
                            PhoneNumber = "0618549087",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 13, 13, 12, 44, 130, DateTimeKind.Unspecified).AddTicks(6178),
                            UserName = "Theron_Rippin"
                        },
                        new
                        {
                            UserId = 17,
                            CreatedDate = new DateTime(2024, 9, 18, 10, 23, 49, 120, DateTimeKind.Unspecified).AddTicks(5576),
                            Email = "gmail.com.Abshire48@hotmail.com",
                            FullName = "Marianne Mueller",
                            Password = "716w0s",
                            PhoneNumber = "0196947239",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 18, 10, 23, 49, 120, DateTimeKind.Unspecified).AddTicks(5576),
                            UserName = "Conrad_Rodriguez76"
                        },
                        new
                        {
                            UserId = 18,
                            CreatedDate = new DateTime(2024, 9, 16, 22, 51, 14, 69, DateTimeKind.Unspecified).AddTicks(5175),
                            Email = "gmail.com24@hotmail.com",
                            FullName = "Damaris Schaefer",
                            Password = "ltoxnn",
                            PhoneNumber = "0355706275",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 16, 22, 51, 14, 69, DateTimeKind.Unspecified).AddTicks(5175),
                            UserName = "Royce.Blanda41"
                        },
                        new
                        {
                            UserId = 19,
                            CreatedDate = new DateTime(2024, 9, 3, 1, 40, 26, 347, DateTimeKind.Unspecified).AddTicks(839),
                            Email = "gmail.com91@gmail.com",
                            FullName = "Darrion Hintz",
                            Password = "3gp9pj",
                            PhoneNumber = "0240066616",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 3, 1, 40, 26, 347, DateTimeKind.Unspecified).AddTicks(839),
                            UserName = "Wilmer72"
                        },
                        new
                        {
                            UserId = 20,
                            CreatedDate = new DateTime(2024, 9, 6, 13, 3, 3, 37, DateTimeKind.Unspecified).AddTicks(5917),
                            Email = "gmail.com75@gmail.com",
                            FullName = "Jazmyn Pollich",
                            Password = "07g62s",
                            PhoneNumber = "0538853522",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 6, 13, 3, 3, 37, DateTimeKind.Unspecified).AddTicks(5917),
                            UserName = "Reymundo50"
                        },
                        new
                        {
                            UserId = 21,
                            CreatedDate = new DateTime(2024, 9, 2, 4, 44, 10, 478, DateTimeKind.Unspecified).AddTicks(65),
                            Email = "gmail.com.Jacobson76@yahoo.com",
                            FullName = "Quentin Hickle",
                            Password = "4jpv43",
                            PhoneNumber = "0582383611",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 2, 4, 44, 10, 478, DateTimeKind.Unspecified).AddTicks(65),
                            UserName = "Keon5"
                        },
                        new
                        {
                            UserId = 22,
                            CreatedDate = new DateTime(2024, 9, 25, 4, 38, 51, 499, DateTimeKind.Unspecified).AddTicks(973),
                            Email = "gmail.com.Von14@gmail.com",
                            FullName = "Tia Feeney",
                            Password = "23z1f2",
                            PhoneNumber = "0494540006",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 25, 4, 38, 51, 499, DateTimeKind.Unspecified).AddTicks(973),
                            UserName = "Adrienne1"
                        },
                        new
                        {
                            UserId = 23,
                            CreatedDate = new DateTime(2024, 9, 1, 1, 34, 51, 256, DateTimeKind.Unspecified).AddTicks(761),
                            Email = "gmail.com54@hotmail.com",
                            FullName = "Cathrine Jerde",
                            Password = "vzzpd2",
                            PhoneNumber = "0718169191",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 1, 1, 34, 51, 256, DateTimeKind.Unspecified).AddTicks(761),
                            UserName = "Remington16"
                        },
                        new
                        {
                            UserId = 24,
                            CreatedDate = new DateTime(2024, 9, 14, 15, 15, 17, 175, DateTimeKind.Unspecified).AddTicks(3900),
                            Email = "gmail.com.Padberg28@yahoo.com",
                            FullName = "Jerod Dickinson",
                            Password = "1uljjo",
                            PhoneNumber = "0847287169",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 14, 15, 15, 17, 175, DateTimeKind.Unspecified).AddTicks(3900),
                            UserName = "Gisselle.Shields39"
                        },
                        new
                        {
                            UserId = 25,
                            CreatedDate = new DateTime(2024, 9, 23, 4, 20, 37, 587, DateTimeKind.Unspecified).AddTicks(1063),
                            Email = "gmail.com52@hotmail.com",
                            FullName = "Idella Kilback",
                            Password = "yg0k45",
                            PhoneNumber = "0807234758",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 23, 4, 20, 37, 587, DateTimeKind.Unspecified).AddTicks(1063),
                            UserName = "Velva.Wiegand"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.UserDepartment", b =>
                {
                    b.Property<int>("UserDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserDepartmentId"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserDepartmentId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDepartments");

                    b.HasData(
                        new
                        {
                            UserDepartmentId = 1,
                            DepartmentId = 1,
                            UserId = 3
                        },
                        new
                        {
                            UserDepartmentId = 2,
                            DepartmentId = 1,
                            UserId = 4
                        },
                        new
                        {
                            UserDepartmentId = 3,
                            DepartmentId = 2,
                            UserId = 3
                        },
                        new
                        {
                            UserDepartmentId = 4,
                            DepartmentId = 3,
                            UserId = 24
                        },
                        new
                        {
                            UserDepartmentId = 5,
                            DepartmentId = 7,
                            UserId = 10
                        },
                        new
                        {
                            UserDepartmentId = 6,
                            DepartmentId = 3,
                            UserId = 17
                        },
                        new
                        {
                            UserDepartmentId = 7,
                            DepartmentId = 6,
                            UserId = 6
                        },
                        new
                        {
                            UserDepartmentId = 8,
                            DepartmentId = 1,
                            UserId = 16
                        },
                        new
                        {
                            UserDepartmentId = 9,
                            DepartmentId = 9,
                            UserId = 8
                        },
                        new
                        {
                            UserDepartmentId = 10,
                            DepartmentId = 2,
                            UserId = 14
                        },
                        new
                        {
                            UserDepartmentId = 11,
                            DepartmentId = 7,
                            UserId = 15
                        },
                        new
                        {
                            UserDepartmentId = 12,
                            DepartmentId = 8,
                            UserId = 25
                        },
                        new
                        {
                            UserDepartmentId = 13,
                            DepartmentId = 9,
                            UserId = 22
                        },
                        new
                        {
                            UserDepartmentId = 14,
                            DepartmentId = 6,
                            UserId = 8
                        },
                        new
                        {
                            UserDepartmentId = 15,
                            DepartmentId = 5,
                            UserId = 10
                        },
                        new
                        {
                            UserDepartmentId = 16,
                            DepartmentId = 2,
                            UserId = 21
                        },
                        new
                        {
                            UserDepartmentId = 17,
                            DepartmentId = 10,
                            UserId = 21
                        },
                        new
                        {
                            UserDepartmentId = 18,
                            DepartmentId = 2,
                            UserId = 14
                        },
                        new
                        {
                            UserDepartmentId = 19,
                            DepartmentId = 6,
                            UserId = 14
                        },
                        new
                        {
                            UserDepartmentId = 20,
                            DepartmentId = 1,
                            UserId = 20
                        },
                        new
                        {
                            UserDepartmentId = 21,
                            DepartmentId = 3,
                            UserId = 10
                        },
                        new
                        {
                            UserDepartmentId = 22,
                            DepartmentId = 8,
                            UserId = 6
                        },
                        new
                        {
                            UserDepartmentId = 23,
                            DepartmentId = 8,
                            UserId = 7
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.Property<int>("VehicleSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleSessionId"));

                    b.Property<DateTime>("CheckinTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckoutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GateId")
                        .HasColumnType("int");

                    b.Property<int>("SecurityID")
                        .HasColumnType("int");

                    b.Property<int>("VisitDetailId")
                        .HasColumnType("int");

                    b.HasKey("VehicleSessionId");

                    b.HasIndex("GateId");

                    b.HasIndex("SecurityID");

                    b.HasIndex("VisitDetailId");

                    b.ToTable("VehicleSessions");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSessionImage", b =>
                {
                    b.Property<int>("VehicleSessionImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleSessionImageId"));

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleSessionId")
                        .HasColumnType("int");

                    b.Property<string>("VehicleSessionImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleSessionImageId");

                    b.HasIndex("VehicleSessionId");

                    b.ToTable("VehicleSessionImages");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.Property<int>("VisitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitId"));

                    b.Property<int>("AcceptLevel")
                        .HasColumnType("int");

                    b.Property<int>("CreateById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRegister")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UpdateById")
                        .HasColumnType("int");

                    b.Property<string>("VisitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitQuantity")
                        .HasColumnType("int");

                    b.Property<string>("VisitType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitId");

                    b.HasIndex("CreateById");

                    b.HasIndex("UpdateById");

                    b.ToTable("Visits");

                    b.HasData(
                        new
                        {
                            VisitId = 1,
                            AcceptLevel = 1,
                            CreateById = 3,
                            DateRegister = new DateTime(2024, 9, 24, 20, 58, 59, 291, DateTimeKind.Local).AddTicks(3078),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        },
                        new
                        {
                            VisitId = 2,
                            AcceptLevel = 2,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 26, 13, 58, 59, 295, DateTimeKind.Utc).AddTicks(3593),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        },
                        new
                        {
                            VisitId = 3,
                            AcceptLevel = 2,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 26, 13, 58, 59, 295, DateTimeKind.Utc).AddTicks(3753),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        },
                        new
                        {
                            VisitId = 4,
                            AcceptLevel = 2,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 26, 13, 58, 59, 295, DateTimeKind.Utc).AddTicks(3767),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        },
                        new
                        {
                            VisitId = 5,
                            AcceptLevel = 2,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 26, 13, 58, 59, 295, DateTimeKind.Utc).AddTicks(3776),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        },
                        new
                        {
                            VisitId = 6,
                            AcceptLevel = 2,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 26, 13, 58, 59, 295, DateTimeKind.Utc).AddTicks(3785),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.Property<int>("VisitDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitDetailId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ExpectedEndTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("ExpectedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ExpectedStartTime")
                        .HasColumnType("time");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.Property<int>("VisitorId")
                        .HasColumnType("int");

                    b.HasKey("VisitDetailId");

                    b.HasIndex("VisitId");

                    b.HasIndex("VisitorId");

                    b.ToTable("VisitDetails");

                    b.HasData(
                        new
                        {
                            VisitDetailId = 1,
                            Description = "Minus quia veniam velit quaerat exercitationem sed eum assumenda. Provident nisi impedit necessitatibus voluptatem officia. Nostrum earum officiis est dignissimos quis consequuntur sed iste.",
                            ExpectedEndDate = new DateTime(2024, 10, 25, 20, 58, 59, 294, DateTimeKind.Local).AddTicks(2282),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 25, 20, 58, 59, 294, DateTimeKind.Local).AddTicks(2243),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 1,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitDetailId = 2,
                            Description = "Accusamus laudantium qui pariatur sunt molestiae et aliquam impedit. Molestias aspernatur inventore cum recusandae voluptatibus et. Nihil ut est sed. Sequi repellendus odit nostrum earum sed commodi.",
                            ExpectedEndDate = new DateTime(2024, 10, 25, 20, 58, 59, 294, DateTimeKind.Local).AddTicks(2725),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 25, 20, 58, 59, 294, DateTimeKind.Local).AddTicks(2722),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 1,
                            VisitorId = 2
                        },
                        new
                        {
                            VisitDetailId = 3,
                            Description = "Quis aut perferendis accusamus quam tempore cum. Est ut quas vitae odit autem ut rerum laboriosam. Nulla tempore sed nisi tenetur eligendi.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 20, 58, 59, 296, DateTimeKind.Local).AddTicks(4954),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 20, 58, 59, 296, DateTimeKind.Local).AddTicks(4921),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 2,
                            VisitorId = 10
                        },
                        new
                        {
                            VisitDetailId = 4,
                            Description = "Sunt qui autem doloremque. Odio quis qui rerum omnis. Aliquam enim qui quae sit dolorem nobis.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 20, 58, 59, 296, DateTimeKind.Local).AddTicks(5192),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 20, 58, 59, 296, DateTimeKind.Local).AddTicks(5190),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 2,
                            VisitorId = 5
                        },
                        new
                        {
                            VisitDetailId = 5,
                            Description = "Hic ipsam sit. Atque dignissimos et. Est ad et. Qui eos rerum eum eaque modi. Deserunt rerum in quo magni aspernatur. Debitis tenetur aperiam beatae ab.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 20, 58, 59, 297, DateTimeKind.Local).AddTicks(7615),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 20, 58, 59, 297, DateTimeKind.Local).AddTicks(7583),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 2,
                            VisitorId = 2
                        },
                        new
                        {
                            VisitDetailId = 6,
                            Description = "Dolor perspiciatis vel quis cupiditate ut voluptas. Dolorem facere assumenda. Rerum cumque expedita esse deserunt. Voluptas labore unde a. Aperiam praesentium est recusandae repellat.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 20, 58, 59, 297, DateTimeKind.Local).AddTicks(7860),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 20, 58, 59, 297, DateTimeKind.Local).AddTicks(7857),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 2,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitDetailId = 7,
                            Description = "Praesentium laudantium sed ad dicta qui aut architecto reprehenderit fuga. Non ut ex vero incidunt ut. Vel beatae in omnis itaque quo.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 20, 58, 59, 298, DateTimeKind.Local).AddTicks(8908),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 20, 58, 59, 298, DateTimeKind.Local).AddTicks(8881),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 2,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitDetailId = 8,
                            Description = "Ratione eligendi eius. Incidunt modi quisquam sunt ut omnis natus recusandae modi deserunt. Eveniet minima culpa. Provident temporibus quam est iure quibusdam voluptatem aut.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 20, 58, 59, 298, DateTimeKind.Local).AddTicks(9132),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 20, 58, 59, 298, DateTimeKind.Local).AddTicks(9123),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 2,
                            VisitorId = 2
                        },
                        new
                        {
                            VisitDetailId = 9,
                            Description = "Quidem ut maxime maiores. Vel fuga qui. Minus dolorem qui qui molestiae libero facilis. Earum doloremque non. Eos delectus ut ullam explicabo sed autem. Iusto enim tempora officia fugit perferendis qui inventore totam autem.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 20, 58, 59, 305, DateTimeKind.Local).AddTicks(3835),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 20, 58, 59, 305, DateTimeKind.Local).AddTicks(3760),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 3,
                            VisitorId = 9
                        },
                        new
                        {
                            VisitDetailId = 10,
                            Description = "Pariatur et esse unde blanditiis doloribus repellendus sed enim. Rerum nobis debitis asperiores temporibus odio. Ullam exercitationem enim.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 20, 58, 59, 305, DateTimeKind.Local).AddTicks(4330),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 20, 58, 59, 305, DateTimeKind.Local).AddTicks(4325),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 3,
                            VisitorId = 9
                        },
                        new
                        {
                            VisitDetailId = 11,
                            Description = "Corrupti consequuntur sequi aut. Et id ipsum ratione consectetur aut dicta. Soluta quae facilis est et.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 20, 58, 59, 328, DateTimeKind.Local).AddTicks(3178),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 20, 58, 59, 328, DateTimeKind.Local).AddTicks(3092),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 3,
                            VisitorId = 3
                        },
                        new
                        {
                            VisitDetailId = 12,
                            Description = "Reiciendis aut nobis. Rerum sit dolor facere eos et dolore nihil est deserunt. Et repudiandae amet molestiae eum consectetur possimus distinctio vero.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 20, 58, 59, 328, DateTimeKind.Local).AddTicks(3883),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 20, 58, 59, 328, DateTimeKind.Local).AddTicks(3875),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 3,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitDetailId = 13,
                            Description = "Voluptatibus ea et dolores praesentium fugit. Labore animi aspernatur molestiae omnis ipsum. Dignissimos dolorem repellendus. Tenetur culpa cum veniam dolor ea iusto ea. At atque voluptas voluptatum tenetur numquam nulla nostrum. Nesciunt ut maiores provident totam dolor et at debitis quis.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 20, 58, 59, 331, DateTimeKind.Local).AddTicks(2124),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 20, 58, 59, 331, DateTimeKind.Local).AddTicks(2054),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 3,
                            VisitorId = 6
                        },
                        new
                        {
                            VisitDetailId = 14,
                            Description = "Fuga suscipit fugiat doloremque. Et magni magni aperiam sed facilis. Magnam iusto magnam. In repellendus tempore repellat molestiae.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 20, 58, 59, 331, DateTimeKind.Local).AddTicks(2517),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 20, 58, 59, 331, DateTimeKind.Local).AddTicks(2513),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 3,
                            VisitorId = 6
                        },
                        new
                        {
                            VisitDetailId = 15,
                            Description = "Provident iste eos mollitia accusamus expedita earum et fugiat maxime. Qui aut hic nulla reiciendis quibusdam dignissimos ullam praesentium non. Et ex rerum rerum. A nobis labore aut velit esse aut.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 20, 58, 59, 334, DateTimeKind.Local).AddTicks(9406),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 20, 58, 59, 334, DateTimeKind.Local).AddTicks(9355),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitDetailId = 16,
                            Description = "Tempora id rerum. Ratione impedit et ut eius sit reiciendis et eos voluptatibus. Qui sit odit quo voluptas nihil quia eos aut.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 20, 58, 59, 334, DateTimeKind.Local).AddTicks(9810),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 20, 58, 59, 334, DateTimeKind.Local).AddTicks(9807),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 8
                        },
                        new
                        {
                            VisitDetailId = 17,
                            Description = "Culpa dolore voluptatem voluptatem dolor minus dicta. Accusantium ducimus repellendus nostrum sint. Iure praesentium ea ea corrupti. Ut aut nostrum labore. Tempore totam et eum et in sequi ut qui. Tempore voluptatum quibusdam vel velit voluptas.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 20, 58, 59, 337, DateTimeKind.Local).AddTicks(3443),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 20, 58, 59, 337, DateTimeKind.Local).AddTicks(3359),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 4
                        },
                        new
                        {
                            VisitDetailId = 18,
                            Description = "Sequi quod perspiciatis. Ea nulla occaecati quam officiis. Facilis mollitia modi atque rerum sequi non et. Aut repellendus assumenda eum. Adipisci aut officiis nostrum est. Dolores asperiores et vel voluptas minima vitae eligendi aspernatur vitae.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 20, 58, 59, 337, DateTimeKind.Local).AddTicks(3908),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 20, 58, 59, 337, DateTimeKind.Local).AddTicks(3904),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitDetailId = 19,
                            Description = "Itaque libero iste et atque ducimus sint esse et quisquam. Commodi blanditiis eius. Amet amet unde et voluptatibus nemo. Dolores enim aut aspernatur cumque quod sint odio ut reprehenderit.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 20, 58, 59, 339, DateTimeKind.Local).AddTicks(6065),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 20, 58, 59, 339, DateTimeKind.Local).AddTicks(6016),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 6
                        },
                        new
                        {
                            VisitDetailId = 20,
                            Description = "Aspernatur hic quis vel quas autem doloribus eos quisquam minima. Occaecati et aut id ipsa et. Aliquam consequatur harum velit dignissimos cupiditate. Culpa fugiat labore sunt ducimus rerum. Totam aut iste debitis qui.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 20, 58, 59, 339, DateTimeKind.Local).AddTicks(6473),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 20, 58, 59, 339, DateTimeKind.Local).AddTicks(6470),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 4
                        },
                        new
                        {
                            VisitDetailId = 21,
                            Description = "Rerum magnam qui quis ducimus non. Optio qui dicta iure quas. Doloribus qui at qui corporis et autem tempora excepturi minima. Voluptas doloribus in consequatur. Minus qui illo ut. Ipsam veritatis dolores fugiat nemo nesciunt.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 20, 58, 59, 342, DateTimeKind.Local).AddTicks(3706),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 20, 58, 59, 342, DateTimeKind.Local).AddTicks(3647),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 5,
                            VisitorId = 6
                        },
                        new
                        {
                            VisitDetailId = 22,
                            Description = "Nisi delectus beatae velit. Ipsa earum molestiae corrupti sint. Consequatur exercitationem et explicabo. Praesentium corrupti illum.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 20, 58, 59, 342, DateTimeKind.Local).AddTicks(4057),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 20, 58, 59, 342, DateTimeKind.Local).AddTicks(4052),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 5,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitDetailId = 23,
                            Description = "Dolorum quae excepturi id corrupti corrupti labore. Sed dolor aspernatur et voluptas quibusdam aliquam. Molestias debitis aut nam consequuntur nihil ex sunt non. Et fugiat consectetur quia est deserunt dignissimos.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 20, 58, 59, 345, DateTimeKind.Local).AddTicks(3792),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 20, 58, 59, 345, DateTimeKind.Local).AddTicks(3739),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 5,
                            VisitorId = 5
                        },
                        new
                        {
                            VisitDetailId = 24,
                            Description = "Quos optio adipisci enim aut. Sed sed libero saepe voluptatem sunt quia. Commodi nisi laboriosam quasi nesciunt sequi mollitia libero.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 20, 58, 59, 345, DateTimeKind.Local).AddTicks(4136),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 20, 58, 59, 345, DateTimeKind.Local).AddTicks(4132),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 5,
                            VisitorId = 9
                        },
                        new
                        {
                            VisitDetailId = 25,
                            Description = "Et est neque sunt natus. Dolorem non asperiores officiis temporibus iste. Cumque fugit id aliquid et quo nisi officia magni beatae. Vitae culpa iure ducimus cumque qui vero omnis accusantium. Accusantium et est magnam.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 20, 58, 59, 350, DateTimeKind.Local).AddTicks(7981),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 20, 58, 59, 350, DateTimeKind.Local).AddTicks(7908),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 5,
                            VisitorId = 8
                        },
                        new
                        {
                            VisitDetailId = 26,
                            Description = "Ut eum voluptatem adipisci exercitationem qui reprehenderit quibusdam nesciunt eligendi. Quis quos rerum velit accusamus ducimus nam ut. Est adipisci id aut. A repellat omnis debitis repellendus dolores enim error.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 20, 58, 59, 350, DateTimeKind.Local).AddTicks(8459),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 20, 58, 59, 350, DateTimeKind.Local).AddTicks(8455),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 5,
                            VisitorId = 8
                        },
                        new
                        {
                            VisitDetailId = 27,
                            Description = "Quia suscipit repellendus. Sed recusandae dolorem aliquam ipsa quis quisquam ea. Aliquid aperiam aliquam beatae cum sint unde adipisci ducimus. Iusto et delectus nihil sint et dolores consequatur.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 20, 58, 59, 352, DateTimeKind.Local).AddTicks(9400),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 20, 58, 59, 352, DateTimeKind.Local).AddTicks(9357),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 6,
                            VisitorId = 2
                        },
                        new
                        {
                            VisitDetailId = 28,
                            Description = "Ab eveniet hic. Laudantium qui deserunt doloribus nemo qui. Voluptatem aut dicta sed. Dolor eos iusto sit fugit eum quos.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 20, 58, 59, 352, DateTimeKind.Local).AddTicks(9732),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 20, 58, 59, 352, DateTimeKind.Local).AddTicks(9727),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 6,
                            VisitorId = 6
                        },
                        new
                        {
                            VisitDetailId = 29,
                            Description = "Neque enim molestiae laboriosam ut cum porro quis. Quam debitis quia ullam nulla. Ad dolores id dolor rerum.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 20, 58, 59, 355, DateTimeKind.Local).AddTicks(3702),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 20, 58, 59, 355, DateTimeKind.Local).AddTicks(3648),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 6,
                            VisitorId = 7
                        },
                        new
                        {
                            VisitDetailId = 30,
                            Description = "Omnis aperiam sint libero ducimus sapiente aperiam molestiae. Laborum eum illum at dolore. Natus amet quaerat maiores et voluptatum ut consequatur totam odit. Illum impedit id.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 20, 58, 59, 355, DateTimeKind.Local).AddTicks(4091),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 20, 58, 59, 355, DateTimeKind.Local).AddTicks(4086),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 6,
                            VisitorId = 7
                        },
                        new
                        {
                            VisitDetailId = 31,
                            Description = "Sint excepturi cumque est. Dolores ipsam magnam fugit sint quae omnis. Quis qui repellat quia optio distinctio. Eligendi perferendis ipsum occaecati consequuntur ratione laudantium aliquid quis velit. Adipisci sit aut ad facilis laudantium veniam ut. Consequatur non aliquid voluptatum aut facilis tenetur.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 20, 58, 59, 357, DateTimeKind.Local).AddTicks(5853),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 20, 58, 59, 357, DateTimeKind.Local).AddTicks(5805),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 6,
                            VisitorId = 3
                        },
                        new
                        {
                            VisitDetailId = 32,
                            Description = "Consectetur eos unde quo eos non vel sed consectetur. Quibusdam dolores et. Amet nostrum excepturi voluptatem officia doloremque nihil labore. Dicta sunt quo est vel. Qui ipsa illo. Autem eum vel quidem qui fugit eius.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 20, 58, 59, 357, DateTimeKind.Local).AddTicks(6262),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 20, 58, 59, 357, DateTimeKind.Local).AddTicks(6258),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 6,
                            VisitorId = 1
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitProcess", b =>
                {
                    b.Property<int>("VisitProcessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitProcessId"));

                    b.Property<string>("DaysOfProcess")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ExpectedEndTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("ExpectedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ExpectedStartTime")
                        .HasColumnType("time");

                    b.Property<int>("ProcessId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VisitId")
                        .HasColumnType("int");

                    b.Property<int>("VisitQuantity")
                        .HasColumnType("int");

                    b.HasKey("VisitProcessId");

                    b.HasIndex("ProcessId");

                    b.HasIndex("VisitId");

                    b.ToTable("VisitProjects");

                    b.HasData(
                        new
                        {
                            VisitProcessId = 1,
                            DaysOfProcess = "Monday",
                            ExpectedEndDate = new DateTime(2024, 10, 25, 20, 58, 59, 292, DateTimeKind.Local).AddTicks(8266),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 25, 20, 58, 59, 292, DateTimeKind.Local).AddTicks(8221),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            ProcessId = 1,
                            Status = "Processing",
                            VisitId = 1,
                            VisitQuantity = 2
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitType", b =>
                {
                    b.Property<int>("VisitTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitTypeId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VisitTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitTypeId");

                    b.ToTable("VisitTypes");

                    b.HasData(
                        new
                        {
                            VisitTypeId = 1,
                            Description = "Process trong tuần",
                            VisitTypeName = "ProcessWeek"
                        },
                        new
                        {
                            VisitTypeId = 2,
                            Description = "Process trong tháng",
                            VisitTypeName = "ProcessMonth"
                        },
                        new
                        {
                            VisitTypeId = 3,
                            Description = "Project",
                            VisitTypeName = "Project"
                        },
                        new
                        {
                            VisitTypeId = 4,
                            Description = "Visit được tạo bởi staff",
                            VisitTypeName = "VisitStaff"
                        },
                        new
                        {
                            VisitTypeId = 5,
                            Description = "Visit được tạo bởi security",
                            VisitTypeName = "VisitSecurity"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.Property<int>("VisitorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorId"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreateById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CredentialCardTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CredentialsCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("VisitorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitorId");

                    b.HasIndex("CreateById");

                    b.HasIndex("CredentialCardTypeId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Visitors");

                    b.HasData(
                        new
                        {
                            VisitorId = 1,
                            CompanyName = "Bode - Cole",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 4, 18, 26, 39, 927, DateTimeKind.Unspecified).AddTicks(4038),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "yco4dr57v7",
                            PhoneNumber = "0775198029",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 4, 18, 26, 39, 927, DateTimeKind.Unspecified).AddTicks(4038),
                            VisitorName = "Cecile Schroeder"
                        },
                        new
                        {
                            VisitorId = 2,
                            CompanyName = "Nader Group",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 14, 8, 33, 26, 940, DateTimeKind.Unspecified).AddTicks(5472),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "js31golb59",
                            PhoneNumber = "0250466952",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 14, 8, 33, 26, 940, DateTimeKind.Unspecified).AddTicks(5472),
                            VisitorName = "Conrad Quitzon"
                        },
                        new
                        {
                            VisitorId = 3,
                            CompanyName = "Fahey, Becker and Kuphal",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 18, 23, 4, 5, 621, DateTimeKind.Unspecified).AddTicks(732),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "ccjcwmfnbl",
                            PhoneNumber = "0261441998",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 18, 23, 4, 5, 621, DateTimeKind.Unspecified).AddTicks(732),
                            VisitorName = "Scot Murphy"
                        },
                        new
                        {
                            VisitorId = 4,
                            CompanyName = "Hegmann LLC",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 5, 12, 7, 7, 384, DateTimeKind.Unspecified).AddTicks(1445),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "o9x8mi6rm4",
                            PhoneNumber = "0811922387",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 5, 12, 7, 7, 384, DateTimeKind.Unspecified).AddTicks(1445),
                            VisitorName = "Adrianna Lynch"
                        },
                        new
                        {
                            VisitorId = 5,
                            CompanyName = "Fritsch - Herman",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 3, 11, 12, 54, 595, DateTimeKind.Unspecified).AddTicks(8462),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "qitvzzanlr",
                            PhoneNumber = "0229102720",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 3, 11, 12, 54, 595, DateTimeKind.Unspecified).AddTicks(8462),
                            VisitorName = "Monroe Gerhold"
                        },
                        new
                        {
                            VisitorId = 6,
                            CompanyName = "Gulgowski and Sons",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 26, 3, 51, 18, 821, DateTimeKind.Unspecified).AddTicks(2133),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "c3ljskbmat",
                            PhoneNumber = "0270110936",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 26, 3, 51, 18, 821, DateTimeKind.Unspecified).AddTicks(2133),
                            VisitorName = "Cortney Kirlin"
                        },
                        new
                        {
                            VisitorId = 7,
                            CompanyName = "Greenfelder LLC",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 4, 15, 3, 23, 431, DateTimeKind.Unspecified).AddTicks(8673),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "cmofrzg03l",
                            PhoneNumber = "0605586477",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 4, 15, 3, 23, 431, DateTimeKind.Unspecified).AddTicks(8673),
                            VisitorName = "Brando Schowalter"
                        },
                        new
                        {
                            VisitorId = 8,
                            CompanyName = "Lehner Inc",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 3, 10, 22, 27, 607, DateTimeKind.Unspecified).AddTicks(608),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "p1ng83ju7l",
                            PhoneNumber = "0149744522",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 3, 10, 22, 27, 607, DateTimeKind.Unspecified).AddTicks(608),
                            VisitorName = "Raul Smitham"
                        },
                        new
                        {
                            VisitorId = 9,
                            CompanyName = "Wilkinson - Kuhn",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 15, 22, 20, 57, 73, DateTimeKind.Unspecified).AddTicks(9054),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "4ch5aamz62",
                            PhoneNumber = "0477154571",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 15, 22, 20, 57, 73, DateTimeKind.Unspecified).AddTicks(9054),
                            VisitorName = "Geoffrey Rosenbaum"
                        },
                        new
                        {
                            VisitorId = 10,
                            CompanyName = "Leuschke LLC",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 9, 9, 17, 32, 270, DateTimeKind.Unspecified).AddTicks(2841),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "x8x0tuj5ga",
                            PhoneNumber = "0512907034",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 9, 9, 17, 32, 270, DateTimeKind.Unspecified).AddTicks(2841),
                            VisitorName = "Matilde Considine"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.Property<int>("VisitorSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorSessionId"));

                    b.Property<DateTime>("CheckinTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CheckoutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GateInId")
                        .HasColumnType("int");

                    b.Property<int?>("GateOutId")
                        .HasColumnType("int");

                    b.Property<int>("QRCardId")
                        .HasColumnType("int");

                    b.Property<int>("SecurityInId")
                        .HasColumnType("int");

                    b.Property<int?>("SecurityOutId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitDetailId")
                        .HasColumnType("int");

                    b.HasKey("VisitorSessionId");

                    b.HasIndex("GateInId");

                    b.HasIndex("GateOutId");

                    b.HasIndex("QRCardId");

                    b.HasIndex("SecurityInId");

                    b.HasIndex("SecurityOutId");

                    b.HasIndex("VisitDetailId");

                    b.ToTable("VisitorSessions");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSessionsImage", b =>
                {
                    b.Property<int>("VisitorSessionsImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorSessionsImageId"));

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitorSessionId")
                        .HasColumnType("int");

                    b.HasKey("VisitorSessionsImageId");

                    b.HasIndex("VisitorSessionId");

                    b.ToTable("VisitorSessionsImages");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.NotificationUsers", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Notification", "Notification")
                        .WithMany("NotificationUsers")
                        .HasForeignKey("NotificationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Receiver")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Sender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Process", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.User", "User")
                        .WithMany("Project")
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.VisitType", "VisitType")
                        .WithMany("VisitTypes")
                        .HasForeignKey("VisitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("VisitType");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.QRCardStatus", "QRCardStatus")
                        .WithMany("QRCards")
                        .HasForeignKey("QRCardStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.QRCardType", "QRCardType")
                        .WithMany("QRCards")
                        .HasForeignKey("QRCardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QRCardStatus");

                    b.Navigation("QRCardType");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Role", "Role")
                        .WithMany("User")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.UserDepartment", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Department", "Department")
                        .WithMany("UserDepartment")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "User")
                        .WithMany("UserDepartment")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Gate", "Gate")
                        .WithMany("VehicleSession")
                        .HasForeignKey("GateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Security")
                        .WithMany("VehicleSession")
                        .HasForeignKey("SecurityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.VisitDetail", "VisitDetail")
                        .WithMany("VehicleSession")
                        .HasForeignKey("VisitDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gate");

                    b.Navigation("Security");

                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSessionImage", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.VehicleSession", "VehicleSession")
                        .WithMany("Images")
                        .HasForeignKey("VehicleSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.User", "CreateBy")
                        .WithMany("CreatedVisits")
                        .HasForeignKey("CreateById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "UpdateBy")
                        .WithMany("UpdatedVisits")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreateBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Visit", "Visit")
                        .WithMany("VisitDetail")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Visitor", "Visitor")
                        .WithMany("VisitDetail")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visit");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitProcess", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Process", "Process")
                        .WithMany("VisitProject")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Visit", "Visit")
                        .WithMany("VisitProject")
                        .HasForeignKey("VisitId");

                    b.Navigation("Process");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.UserDepartment", "UserDepartment")
                        .WithMany("Visitors")
                        .HasForeignKey("CreateById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.CredentialCardType", "CredentialCardType")
                        .WithMany("Visitor")
                        .HasForeignKey("CredentialCardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "User")
                        .WithOne("Visitor")
                        .HasForeignKey("SecurityGateApv.Domain.Models.Visitor", "UserId");

                    b.Navigation("CredentialCardType");

                    b.Navigation("User");

                    b.Navigation("UserDepartment");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Gate", "GateIn")
                        .WithMany("VisitorSessionsIn")
                        .HasForeignKey("GateInId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Gate", "GateOut")
                        .WithMany("VisitorSessionsOut")
                        .HasForeignKey("GateOutId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SecurityGateApv.Domain.Models.QRCard", "QRCard")
                        .WithMany("VisitorSession")
                        .HasForeignKey("QRCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "SecurityIn")
                        .WithMany("SecurityInSessions")
                        .HasForeignKey("SecurityInId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "SecurityOut")
                        .WithMany("SecurityOutSessions")
                        .HasForeignKey("SecurityOutId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SecurityGateApv.Domain.Models.VisitDetail", "VisitDetail")
                        .WithMany("VisitorSession")
                        .HasForeignKey("VisitDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GateIn");

                    b.Navigation("GateOut");

                    b.Navigation("QRCard");

                    b.Navigation("SecurityIn");

                    b.Navigation("SecurityOut");

                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSessionsImage", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.VisitorSession", "VisitorSession")
                        .WithMany("Images")
                        .HasForeignKey("VisitorSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.CredentialCardType", b =>
                {
                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Department", b =>
                {
                    b.Navigation("UserDepartment");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Gate", b =>
                {
                    b.Navigation("VehicleSession");

                    b.Navigation("VisitorSessionsIn");

                    b.Navigation("VisitorSessionsOut");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Notification", b =>
                {
                    b.Navigation("NotificationUsers");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Process", b =>
                {
                    b.Navigation("VisitProject");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardStatus", b =>
                {
                    b.Navigation("QRCards");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardType", b =>
                {
                    b.Navigation("QRCards");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Role", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.Navigation("CreatedVisits");

                    b.Navigation("Project");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("SecurityInSessions");

                    b.Navigation("SecurityOutSessions");

                    b.Navigation("SentNotifications");

                    b.Navigation("UpdatedVisits");

                    b.Navigation("UserDepartment");

                    b.Navigation("VehicleSession");

                    b.Navigation("Visitor")
                        .IsRequired();
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.UserDepartment", b =>
                {
                    b.Navigation("Visitors");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.Navigation("VisitDetail");

                    b.Navigation("VisitProject");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.Navigation("VehicleSession");

                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitType", b =>
                {
                    b.Navigation("VisitTypes");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
