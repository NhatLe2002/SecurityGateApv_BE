// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SecurityGateApv.Infras.DBContext;

#nullable disable

namespace SecurityGateApv.Infras.Migrations
{
    [DbContext(typeof(SecurityGateApvDbContext))]
    [Migration("20240926033615_SeedData_4")]
    partial class SeedData_4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SecurityGateApv.Domain.Models.CredentialCardType", b =>
                {
                    b.Property<int>("CredentialCardTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CredentialCardTypeId"));

                    b.Property<string>("CredentialCardTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CredentialCardTypeId");

                    b.ToTable("CredentialCardTypes");

                    b.HasData(
                        new
                        {
                            CredentialCardTypeId = 1,
                            CredentialCardTypeName = "Căn cước công dân"
                        },
                        new
                        {
                            CredentialCardTypeId = 2,
                            CredentialCardTypeName = "Căn cước công dân"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<int>("AcceptLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            AcceptLevel = 5,
                            CreateDate = new DateTime(2024, 9, 19, 15, 33, 48, 365, DateTimeKind.Utc).AddTicks(6083),
                            DepartmentName = "Phòng Pháp chế",
                            Description = "Et voluptates voluptas excepturi aut quos id id.",
                            UpdatedDate = new DateTime(2024, 9, 19, 15, 33, 48, 365, DateTimeKind.Utc).AddTicks(6083)
                        },
                        new
                        {
                            DepartmentId = 2,
                            AcceptLevel = 1,
                            CreateDate = new DateTime(2024, 9, 11, 22, 10, 40, 619, DateTimeKind.Utc).AddTicks(1274),
                            DepartmentName = "Phòng Marketing",
                            Description = "Adipisci numquam et dolor autem odio sed autem aut.",
                            UpdatedDate = new DateTime(2024, 9, 11, 22, 10, 40, 619, DateTimeKind.Utc).AddTicks(1274)
                        },
                        new
                        {
                            DepartmentId = 3,
                            AcceptLevel = 2,
                            CreateDate = new DateTime(2024, 9, 3, 23, 7, 8, 288, DateTimeKind.Utc).AddTicks(3762),
                            DepartmentName = "Phòng Kinh doanh",
                            Description = "Sed voluptas architecto eum aut.",
                            UpdatedDate = new DateTime(2024, 9, 3, 23, 7, 8, 288, DateTimeKind.Utc).AddTicks(3762)
                        },
                        new
                        {
                            DepartmentId = 4,
                            AcceptLevel = 4,
                            CreateDate = new DateTime(2024, 9, 19, 3, 31, 1, 334, DateTimeKind.Utc).AddTicks(8492),
                            DepartmentName = "Phòng Kế toán",
                            Description = "Optio dolorum quisquam sed.",
                            UpdatedDate = new DateTime(2024, 9, 19, 3, 31, 1, 334, DateTimeKind.Utc).AddTicks(8492)
                        },
                        new
                        {
                            DepartmentId = 5,
                            AcceptLevel = 4,
                            CreateDate = new DateTime(2024, 9, 6, 13, 45, 34, 567, DateTimeKind.Utc).AddTicks(1628),
                            DepartmentName = "Phòng IT",
                            Description = "Nobis temporibus consequatur.",
                            UpdatedDate = new DateTime(2024, 9, 6, 13, 45, 34, 567, DateTimeKind.Utc).AddTicks(1628)
                        },
                        new
                        {
                            DepartmentId = 6,
                            AcceptLevel = 4,
                            CreateDate = new DateTime(2024, 9, 22, 9, 45, 2, 446, DateTimeKind.Utc).AddTicks(6213),
                            DepartmentName = "Phòng Nhân sự",
                            Description = "Consectetur sed aliquam ut.",
                            UpdatedDate = new DateTime(2024, 9, 22, 9, 45, 2, 446, DateTimeKind.Utc).AddTicks(6213)
                        },
                        new
                        {
                            DepartmentId = 7,
                            AcceptLevel = 5,
                            CreateDate = new DateTime(2024, 9, 21, 1, 48, 6, 245, DateTimeKind.Utc).AddTicks(1912),
                            DepartmentName = "Phòng Kinh doanh",
                            Description = "Non recusandae fuga qui non.",
                            UpdatedDate = new DateTime(2024, 9, 21, 1, 48, 6, 245, DateTimeKind.Utc).AddTicks(1912)
                        },
                        new
                        {
                            DepartmentId = 8,
                            AcceptLevel = 5,
                            CreateDate = new DateTime(2024, 9, 2, 15, 49, 13, 978, DateTimeKind.Utc).AddTicks(6457),
                            DepartmentName = "Phòng Kinh doanh",
                            Description = "Aut sunt tempore qui.",
                            UpdatedDate = new DateTime(2024, 9, 2, 15, 49, 13, 978, DateTimeKind.Utc).AddTicks(6457)
                        },
                        new
                        {
                            DepartmentId = 9,
                            AcceptLevel = 3,
                            CreateDate = new DateTime(2024, 9, 19, 4, 8, 29, 36, DateTimeKind.Utc).AddTicks(2180),
                            DepartmentName = "Phòng R&D",
                            Description = "Rerum dolores quia voluptas officiis.",
                            UpdatedDate = new DateTime(2024, 9, 19, 4, 8, 29, 36, DateTimeKind.Utc).AddTicks(2180)
                        },
                        new
                        {
                            DepartmentId = 10,
                            AcceptLevel = 5,
                            CreateDate = new DateTime(2024, 9, 4, 8, 24, 45, 678, DateTimeKind.Utc).AddTicks(3330),
                            DepartmentName = "Phòng Marketing",
                            Description = "Et ducimus porro.",
                            UpdatedDate = new DateTime(2024, 9, 4, 8, 24, 45, 678, DateTimeKind.Utc).AddTicks(3330)
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Gate", b =>
                {
                    b.Property<int>("GateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GateId"));

                    b.Property<string>("GateCoordinate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GateId");

                    b.ToTable("Gates");

                    b.HasData(
                        new
                        {
                            GateId = 1,
                            GateCoordinate = "Ra vào trong ngày",
                            GateName = "Cổng 1"
                        },
                        new
                        {
                            GateId = 2,
                            GateCoordinate = "Ra vào trong ngày",
                            GateName = "Cổng 2"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.NotificationUsers", b =>
                {
                    b.Property<int>("NotificationUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationUserID"));

                    b.Property<int>("NotificationID")
                        .HasColumnType("int");

                    b.Property<bool>("ReadStatus")
                        .HasColumnType("bit");

                    b.Property<int>("ReceiverID")
                        .HasColumnType("int");

                    b.Property<int>("SenderID")
                        .HasColumnType("int");

                    b.HasKey("NotificationUserID");

                    b.HasIndex("NotificationID");

                    b.HasIndex("ReceiverID");

                    b.HasIndex("SenderID");

                    b.ToTable("NotificationUsers");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Process", b =>
                {
                    b.Property<int>("ProcessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProcessId"));

                    b.Property<int>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("VisitTypeId")
                        .HasColumnType("int");

                    b.HasKey("ProcessId");

                    b.HasIndex("CreateBy");

                    b.HasIndex("VisitTypeId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            ProcessId = 1,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 24, 3, 36, 14, 614, DateTimeKind.Utc).AddTicks(5635),
                            Description = "",
                            ProcessName = "Generic Plastic Car",
                            Status = true,
                            VisitTypeId = 1
                        },
                        new
                        {
                            ProcessId = 2,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 24, 3, 36, 14, 614, DateTimeKind.Utc).AddTicks(7186),
                            Description = "",
                            ProcessName = "Licensed Frozen Chair",
                            Status = false,
                            VisitTypeId = 1
                        },
                        new
                        {
                            ProcessId = 3,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 24, 3, 36, 14, 614, DateTimeKind.Utc).AddTicks(7215),
                            Description = "",
                            ProcessName = "Gorgeous Rubber Chair",
                            Status = false,
                            VisitTypeId = 1
                        },
                        new
                        {
                            ProcessId = 4,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 24, 3, 36, 14, 614, DateTimeKind.Utc).AddTicks(7234),
                            Description = "",
                            ProcessName = "Handcrafted Granite Pants",
                            Status = true,
                            VisitTypeId = 1
                        },
                        new
                        {
                            ProcessId = 5,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 24, 3, 36, 14, 614, DateTimeKind.Utc).AddTicks(7252),
                            Description = "",
                            ProcessName = "Tasty Wooden Bacon",
                            Status = true,
                            VisitTypeId = 1
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.Property<int>("QRCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardId"));

                    b.Property<Guid>("CardGuidId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastCancelDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QRCardStatusId")
                        .HasColumnType("int");

                    b.Property<int>("QRCardTypeId")
                        .HasColumnType("int");

                    b.HasKey("QRCardId");

                    b.HasIndex("QRCardStatusId");

                    b.HasIndex("QRCardTypeId");

                    b.ToTable("QRCards");

                    b.HasData(
                        new
                        {
                            QRCardId = 1,
                            CardGuidId = new Guid("feaacadb-65a1-4a35-b17b-f146d438fab0"),
                            CreateDate = new DateTime(2024, 9, 26, 10, 36, 14, 641, DateTimeKind.Local).AddTicks(3431),
                            LastCancelDate = new DateTime(2024, 10, 26, 10, 36, 14, 641, DateTimeKind.Local).AddTicks(3431),
                            QRCardStatusId = 2,
                            QRCardTypeId = 2
                        },
                        new
                        {
                            QRCardId = 2,
                            CardGuidId = new Guid("fd777383-becc-48f9-9437-99febbecf6fb"),
                            CreateDate = new DateTime(2024, 9, 26, 10, 36, 14, 641, DateTimeKind.Local).AddTicks(3617),
                            LastCancelDate = new DateTime(2024, 10, 26, 10, 36, 14, 641, DateTimeKind.Local).AddTicks(3617),
                            QRCardStatusId = 2,
                            QRCardTypeId = 1
                        },
                        new
                        {
                            QRCardId = 3,
                            CardGuidId = new Guid("e5d71f51-f97b-4bfa-beeb-8c867b1495e0"),
                            CreateDate = new DateTime(2024, 9, 26, 10, 36, 14, 641, DateTimeKind.Local).AddTicks(3630),
                            LastCancelDate = new DateTime(2024, 10, 26, 10, 36, 14, 641, DateTimeKind.Local).AddTicks(3630),
                            QRCardStatusId = 1,
                            QRCardTypeId = 1
                        },
                        new
                        {
                            QRCardId = 4,
                            CardGuidId = new Guid("d96b058e-e1c5-48db-b8b8-07d8a298c2bd"),
                            CreateDate = new DateTime(2024, 9, 26, 10, 36, 14, 641, DateTimeKind.Local).AddTicks(3638),
                            LastCancelDate = new DateTime(2024, 10, 26, 10, 36, 14, 641, DateTimeKind.Local).AddTicks(3638),
                            QRCardStatusId = 2,
                            QRCardTypeId = 1
                        },
                        new
                        {
                            QRCardId = 5,
                            CardGuidId = new Guid("308c525e-1b37-4457-ae0a-a1e2afc44486"),
                            CreateDate = new DateTime(2024, 9, 26, 10, 36, 14, 641, DateTimeKind.Local).AddTicks(3654),
                            LastCancelDate = new DateTime(2024, 10, 26, 10, 36, 14, 641, DateTimeKind.Local).AddTicks(3654),
                            QRCardStatusId = 2,
                            QRCardTypeId = 2
                        },
                        new
                        {
                            QRCardId = 6,
                            CardGuidId = new Guid("95da113a-fa97-445f-986e-0b6c8b68db14"),
                            CreateDate = new DateTime(2024, 9, 26, 10, 36, 14, 641, DateTimeKind.Local).AddTicks(3661),
                            LastCancelDate = new DateTime(2024, 10, 26, 10, 36, 14, 641, DateTimeKind.Local).AddTicks(3661),
                            QRCardStatusId = 1,
                            QRCardTypeId = 1
                        },
                        new
                        {
                            QRCardId = 7,
                            CardGuidId = new Guid("98c2abbf-3cf5-4bb9-8ef5-1bc440c9f629"),
                            CreateDate = new DateTime(2024, 9, 26, 10, 36, 14, 641, DateTimeKind.Local).AddTicks(3668),
                            LastCancelDate = new DateTime(2024, 10, 26, 10, 36, 14, 641, DateTimeKind.Local).AddTicks(3668),
                            QRCardStatusId = 2,
                            QRCardTypeId = 1
                        },
                        new
                        {
                            QRCardId = 8,
                            CardGuidId = new Guid("acdc2de7-a9ff-4425-9660-e6bf297d6685"),
                            CreateDate = new DateTime(2024, 9, 26, 10, 36, 14, 641, DateTimeKind.Local).AddTicks(3674),
                            LastCancelDate = new DateTime(2024, 10, 26, 10, 36, 14, 641, DateTimeKind.Local).AddTicks(3674),
                            QRCardStatusId = 1,
                            QRCardTypeId = 1
                        },
                        new
                        {
                            QRCardId = 9,
                            CardGuidId = new Guid("e9f8d3c0-0297-4c38-b1e8-bf216ce65dbd"),
                            CreateDate = new DateTime(2024, 9, 26, 10, 36, 14, 641, DateTimeKind.Local).AddTicks(3681),
                            LastCancelDate = new DateTime(2024, 10, 26, 10, 36, 14, 641, DateTimeKind.Local).AddTicks(3681),
                            QRCardStatusId = 2,
                            QRCardTypeId = 1
                        },
                        new
                        {
                            QRCardId = 10,
                            CardGuidId = new Guid("12a11578-e955-4586-9e91-d9da6b37c6db"),
                            CreateDate = new DateTime(2024, 9, 26, 10, 36, 14, 641, DateTimeKind.Local).AddTicks(3690),
                            LastCancelDate = new DateTime(2024, 10, 26, 10, 36, 14, 641, DateTimeKind.Local).AddTicks(3690),
                            QRCardStatusId = 1,
                            QRCardTypeId = 1
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardStatus", b =>
                {
                    b.Property<int>("QRCardStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardStatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusNumber")
                        .HasColumnType("int");

                    b.HasKey("QRCardStatusId");

                    b.ToTable("QRCardStatus");

                    b.HasData(
                        new
                        {
                            QRCardStatusId = 1,
                            StatusName = "Active",
                            StatusNumber = 1
                        },
                        new
                        {
                            QRCardStatusId = 2,
                            StatusName = "Inactive",
                            StatusNumber = 0
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardType", b =>
                {
                    b.Property<int>("QRCardTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardTypeId"));

                    b.Property<string>("CardTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QRCardTypeId");

                    b.ToTable("QRCardType");

                    b.HasData(
                        new
                        {
                            QRCardTypeId = 1,
                            CardTypeName = "Employee",
                            TypeDescription = "Employee QR Card"
                        },
                        new
                        {
                            QRCardTypeId = 2,
                            CardTypeName = "Visitor",
                            TypeDescription = "Visitor QR Card"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Description = "Quản lý toàn bộ hệ thống",
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            Description = "Quản lý toàn bộ công ty",
                            RoleName = "Manager"
                        },
                        new
                        {
                            RoleId = 3,
                            Description = "Quản lý toàn bộ phòng ban",
                            RoleName = "DepartmentManaager"
                        },
                        new
                        {
                            RoleId = 4,
                            Description = "Tạo và quản lý khách ra vào của phòng ban",
                            RoleName = "Staff"
                        },
                        new
                        {
                            RoleId = 5,
                            Description = "Quản lý khách ra vào tại cổng",
                            RoleName = "Security"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedDate = new DateTime(2024, 3, 26, 3, 36, 14, 599, DateTimeKind.Utc).AddTicks(1839),
                            Email = "admin1@example.com",
                            FullName = "Admin One",
                            Password = "123",
                            PhoneNumber = "0123456789",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 3, 36, 14, 599, DateTimeKind.Utc).AddTicks(1846),
                            UserName = "admin1"
                        },
                        new
                        {
                            UserId = 2,
                            CreatedDate = new DateTime(2024, 6, 26, 3, 36, 14, 599, DateTimeKind.Utc).AddTicks(1848),
                            Email = "manager1@example.com",
                            FullName = "Manager One",
                            Password = "123",
                            PhoneNumber = "0987654321",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 3, 36, 14, 599, DateTimeKind.Utc).AddTicks(1849),
                            UserName = "manager1"
                        },
                        new
                        {
                            UserId = 3,
                            CreatedDate = new DateTime(2024, 7, 26, 3, 36, 14, 599, DateTimeKind.Utc).AddTicks(1851),
                            Email = "employee1@example.com",
                            FullName = "Department Manager One",
                            Password = "123",
                            PhoneNumber = "0112223334",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 3, 36, 14, 599, DateTimeKind.Utc).AddTicks(1851),
                            UserName = "DM1"
                        },
                        new
                        {
                            UserId = 4,
                            CreatedDate = new DateTime(2024, 8, 26, 3, 36, 14, 599, DateTimeKind.Utc).AddTicks(1853),
                            Email = "hr1@example.com",
                            FullName = "Staff One",
                            Password = "123",
                            PhoneNumber = "0223334445",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 3, 36, 14, 599, DateTimeKind.Utc).AddTicks(1853),
                            UserName = "Staff1"
                        },
                        new
                        {
                            UserId = 5,
                            CreatedDate = new DateTime(2024, 5, 26, 3, 36, 14, 599, DateTimeKind.Utc).AddTicks(1855),
                            Email = "it1@example.com",
                            FullName = "Security One",
                            Password = "123",
                            PhoneNumber = "0334445556",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 3, 36, 14, 599, DateTimeKind.Utc).AddTicks(1855),
                            UserName = "Security1"
                        },
                        new
                        {
                            UserId = 6,
                            CreatedDate = new DateTime(2024, 9, 20, 1, 26, 7, 842, DateTimeKind.Unspecified).AddTicks(9485),
                            Email = "gmail.com.Leannon@gmail.com",
                            FullName = "Damon Ebert",
                            Password = "0d6n16",
                            PhoneNumber = "0220111683",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 20, 1, 26, 7, 842, DateTimeKind.Unspecified).AddTicks(9485),
                            UserName = "Mary.Koss"
                        },
                        new
                        {
                            UserId = 7,
                            CreatedDate = new DateTime(2024, 9, 7, 1, 10, 39, 306, DateTimeKind.Unspecified).AddTicks(5549),
                            Email = "gmail.com.Legros87@gmail.com",
                            FullName = "Ida Mante",
                            Password = "tkouc3",
                            PhoneNumber = "0431242079",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 7, 1, 10, 39, 306, DateTimeKind.Unspecified).AddTicks(5549),
                            UserName = "Nona_Volkman"
                        },
                        new
                        {
                            UserId = 8,
                            CreatedDate = new DateTime(2024, 9, 7, 2, 55, 57, 227, DateTimeKind.Unspecified).AddTicks(5271),
                            Email = "gmail.com26@yahoo.com",
                            FullName = "Christopher Roob",
                            Password = "8ekqlx",
                            PhoneNumber = "0727010136",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 7, 2, 55, 57, 227, DateTimeKind.Unspecified).AddTicks(5271),
                            UserName = "Carlotta.Conroy"
                        },
                        new
                        {
                            UserId = 9,
                            CreatedDate = new DateTime(2024, 9, 19, 15, 9, 25, 635, DateTimeKind.Unspecified).AddTicks(861),
                            Email = "gmail.com64@gmail.com",
                            FullName = "Armand Padberg",
                            Password = "t4795k",
                            PhoneNumber = "0591259712",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 19, 15, 9, 25, 635, DateTimeKind.Unspecified).AddTicks(861),
                            UserName = "Hassie.Harvey"
                        },
                        new
                        {
                            UserId = 10,
                            CreatedDate = new DateTime(2024, 9, 10, 5, 14, 47, 366, DateTimeKind.Unspecified).AddTicks(470),
                            Email = "gmail.com.Cummings@yahoo.com",
                            FullName = "Isai Heidenreich",
                            Password = "g6x76h",
                            PhoneNumber = "0876020354",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 10, 5, 14, 47, 366, DateTimeKind.Unspecified).AddTicks(470),
                            UserName = "Danyka.Keeling21"
                        },
                        new
                        {
                            UserId = 11,
                            CreatedDate = new DateTime(2024, 9, 13, 9, 24, 14, 452, DateTimeKind.Unspecified).AddTicks(8814),
                            Email = "gmail.com_Lemke@gmail.com",
                            FullName = "Michaela Bins",
                            Password = "am8uy0",
                            PhoneNumber = "0100773471",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 13, 9, 24, 14, 452, DateTimeKind.Unspecified).AddTicks(8814),
                            UserName = "Milford_Wintheiser"
                        },
                        new
                        {
                            UserId = 12,
                            CreatedDate = new DateTime(2024, 9, 7, 9, 25, 19, 417, DateTimeKind.Unspecified).AddTicks(9623),
                            Email = "gmail.com.Orn73@hotmail.com",
                            FullName = "Alison Emard",
                            Password = "n2u4t3",
                            PhoneNumber = "0882584535",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 7, 9, 25, 19, 417, DateTimeKind.Unspecified).AddTicks(9623),
                            UserName = "Hiram72"
                        },
                        new
                        {
                            UserId = 13,
                            CreatedDate = new DateTime(2024, 9, 11, 18, 21, 40, 968, DateTimeKind.Unspecified).AddTicks(2518),
                            Email = "gmail.com_Harber@yahoo.com",
                            FullName = "Deon Heaney",
                            Password = "6g4o3q",
                            PhoneNumber = "0368600164",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 11, 18, 21, 40, 968, DateTimeKind.Unspecified).AddTicks(2518),
                            UserName = "Albin_Lubowitz74"
                        },
                        new
                        {
                            UserId = 14,
                            CreatedDate = new DateTime(2024, 9, 2, 19, 6, 10, 137, DateTimeKind.Unspecified).AddTicks(6359),
                            Email = "gmail.com55@gmail.com",
                            FullName = "Lola Corkery",
                            Password = "lmbuis",
                            PhoneNumber = "0277592075",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 2, 19, 6, 10, 137, DateTimeKind.Unspecified).AddTicks(6359),
                            UserName = "Gregoria26"
                        },
                        new
                        {
                            UserId = 15,
                            CreatedDate = new DateTime(2024, 9, 13, 8, 46, 48, 53, DateTimeKind.Unspecified).AddTicks(2016),
                            Email = "gmail.com_Rosenbaum@gmail.com",
                            FullName = "Misty Herzog",
                            Password = "c2wb9t",
                            PhoneNumber = "0371321014",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 13, 8, 46, 48, 53, DateTimeKind.Unspecified).AddTicks(2016),
                            UserName = "Elliott.Moore36"
                        },
                        new
                        {
                            UserId = 16,
                            CreatedDate = new DateTime(2024, 9, 20, 23, 53, 48, 708, DateTimeKind.Unspecified).AddTicks(4937),
                            Email = "gmail.com.Marquardt64@hotmail.com",
                            FullName = "Rogelio Shields",
                            Password = "l6mngk",
                            PhoneNumber = "0382234816",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 20, 23, 53, 48, 708, DateTimeKind.Unspecified).AddTicks(4937),
                            UserName = "Adelle.Emmerich40"
                        },
                        new
                        {
                            UserId = 17,
                            CreatedDate = new DateTime(2024, 9, 25, 9, 40, 49, 613, DateTimeKind.Unspecified).AddTicks(4428),
                            Email = "gmail.com.Dietrich83@gmail.com",
                            FullName = "Megane Sauer",
                            Password = "nfnxcg",
                            PhoneNumber = "0664300065",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 25, 9, 40, 49, 613, DateTimeKind.Unspecified).AddTicks(4428),
                            UserName = "Daisy19"
                        },
                        new
                        {
                            UserId = 18,
                            CreatedDate = new DateTime(2024, 9, 15, 9, 55, 42, 294, DateTimeKind.Unspecified).AddTicks(6341),
                            Email = "gmail.com.Wolff@yahoo.com",
                            FullName = "Jaycee Simonis",
                            Password = "aiaoka",
                            PhoneNumber = "0944507242",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 15, 9, 55, 42, 294, DateTimeKind.Unspecified).AddTicks(6341),
                            UserName = "Jace.Hudson94"
                        },
                        new
                        {
                            UserId = 19,
                            CreatedDate = new DateTime(2024, 9, 13, 15, 55, 7, 97, DateTimeKind.Unspecified).AddTicks(6294),
                            Email = "gmail.com_Bosco96@gmail.com",
                            FullName = "Nina Balistreri",
                            Password = "6yvgfg",
                            PhoneNumber = "0134106991",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 13, 15, 55, 7, 97, DateTimeKind.Unspecified).AddTicks(6294),
                            UserName = "Reina_Buckridge"
                        },
                        new
                        {
                            UserId = 20,
                            CreatedDate = new DateTime(2024, 9, 25, 11, 17, 17, 717, DateTimeKind.Unspecified).AddTicks(345),
                            Email = "gmail.com_OConner4@hotmail.com",
                            FullName = "Sonya Rosenbaum",
                            Password = "coeu4x",
                            PhoneNumber = "0616532121",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 25, 11, 17, 17, 717, DateTimeKind.Unspecified).AddTicks(345),
                            UserName = "Martin_Rogahn"
                        },
                        new
                        {
                            UserId = 21,
                            CreatedDate = new DateTime(2024, 9, 15, 13, 7, 51, 447, DateTimeKind.Unspecified).AddTicks(425),
                            Email = "gmail.com11@hotmail.com",
                            FullName = "Haven Moore",
                            Password = "wp0v67",
                            PhoneNumber = "0602017912",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 15, 13, 7, 51, 447, DateTimeKind.Unspecified).AddTicks(425),
                            UserName = "Kasey67"
                        },
                        new
                        {
                            UserId = 22,
                            CreatedDate = new DateTime(2024, 9, 11, 18, 32, 31, 752, DateTimeKind.Unspecified).AddTicks(5096),
                            Email = "gmail.com.Pouros46@gmail.com",
                            FullName = "Anna Rice",
                            Password = "a8wi21",
                            PhoneNumber = "0200878000",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 11, 18, 32, 31, 752, DateTimeKind.Unspecified).AddTicks(5096),
                            UserName = "Lyla.Baumbach18"
                        },
                        new
                        {
                            UserId = 23,
                            CreatedDate = new DateTime(2024, 9, 21, 9, 13, 33, 274, DateTimeKind.Unspecified).AddTicks(3680),
                            Email = "gmail.com.Stehr@hotmail.com",
                            FullName = "Nelson Schimmel",
                            Password = "33mbgf",
                            PhoneNumber = "0847117786",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 21, 9, 13, 33, 274, DateTimeKind.Unspecified).AddTicks(3680),
                            UserName = "Davin_Greenfelder"
                        },
                        new
                        {
                            UserId = 24,
                            CreatedDate = new DateTime(2024, 9, 5, 19, 50, 2, 213, DateTimeKind.Unspecified).AddTicks(3472),
                            Email = "gmail.com_Schmitt74@yahoo.com",
                            FullName = "Ulises Effertz",
                            Password = "5s2etn",
                            PhoneNumber = "0263798362",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 5, 19, 50, 2, 213, DateTimeKind.Unspecified).AddTicks(3472),
                            UserName = "Enid.Wunsch59"
                        },
                        new
                        {
                            UserId = 25,
                            CreatedDate = new DateTime(2024, 9, 8, 9, 24, 50, 193, DateTimeKind.Unspecified).AddTicks(9319),
                            Email = "gmail.com_Rutherford71@hotmail.com",
                            FullName = "Madalyn Nolan",
                            Password = "qs5o3f",
                            PhoneNumber = "0906601799",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 8, 9, 24, 50, 193, DateTimeKind.Unspecified).AddTicks(9319),
                            UserName = "Dean_Johnson"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.UserDepartment", b =>
                {
                    b.Property<int>("UserDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserDepartmentId"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserDepartmentId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDepartments");

                    b.HasData(
                        new
                        {
                            UserDepartmentId = 1,
                            DepartmentId = 1,
                            UserId = 3
                        },
                        new
                        {
                            UserDepartmentId = 2,
                            DepartmentId = 1,
                            UserId = 4
                        },
                        new
                        {
                            UserDepartmentId = 3,
                            DepartmentId = 2,
                            UserId = 3
                        },
                        new
                        {
                            UserDepartmentId = 4,
                            DepartmentId = 6,
                            UserId = 24
                        },
                        new
                        {
                            UserDepartmentId = 5,
                            DepartmentId = 7,
                            UserId = 19
                        },
                        new
                        {
                            UserDepartmentId = 6,
                            DepartmentId = 8,
                            UserId = 6
                        },
                        new
                        {
                            UserDepartmentId = 7,
                            DepartmentId = 4,
                            UserId = 12
                        },
                        new
                        {
                            UserDepartmentId = 8,
                            DepartmentId = 5,
                            UserId = 11
                        },
                        new
                        {
                            UserDepartmentId = 9,
                            DepartmentId = 7,
                            UserId = 7
                        },
                        new
                        {
                            UserDepartmentId = 10,
                            DepartmentId = 8,
                            UserId = 21
                        },
                        new
                        {
                            UserDepartmentId = 11,
                            DepartmentId = 5,
                            UserId = 11
                        },
                        new
                        {
                            UserDepartmentId = 12,
                            DepartmentId = 9,
                            UserId = 14
                        },
                        new
                        {
                            UserDepartmentId = 13,
                            DepartmentId = 1,
                            UserId = 17
                        },
                        new
                        {
                            UserDepartmentId = 14,
                            DepartmentId = 6,
                            UserId = 16
                        },
                        new
                        {
                            UserDepartmentId = 15,
                            DepartmentId = 5,
                            UserId = 20
                        },
                        new
                        {
                            UserDepartmentId = 16,
                            DepartmentId = 4,
                            UserId = 24
                        },
                        new
                        {
                            UserDepartmentId = 17,
                            DepartmentId = 7,
                            UserId = 17
                        },
                        new
                        {
                            UserDepartmentId = 18,
                            DepartmentId = 8,
                            UserId = 21
                        },
                        new
                        {
                            UserDepartmentId = 19,
                            DepartmentId = 7,
                            UserId = 16
                        },
                        new
                        {
                            UserDepartmentId = 20,
                            DepartmentId = 7,
                            UserId = 22
                        },
                        new
                        {
                            UserDepartmentId = 21,
                            DepartmentId = 1,
                            UserId = 16
                        },
                        new
                        {
                            UserDepartmentId = 22,
                            DepartmentId = 4,
                            UserId = 7
                        },
                        new
                        {
                            UserDepartmentId = 23,
                            DepartmentId = 10,
                            UserId = 10
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.Property<int>("VehicleSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleSessionId"));

                    b.Property<DateTime>("CheckinTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckoutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GateId")
                        .HasColumnType("int");

                    b.Property<int>("SecurityID")
                        .HasColumnType("int");

                    b.Property<int>("VisitDetailId")
                        .HasColumnType("int");

                    b.HasKey("VehicleSessionId");

                    b.HasIndex("GateId");

                    b.HasIndex("SecurityID");

                    b.HasIndex("VisitDetailId");

                    b.ToTable("VehicleSessions");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSessionImage", b =>
                {
                    b.Property<int>("VehicleSessionImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleSessionImageId"));

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleSessionId")
                        .HasColumnType("int");

                    b.Property<string>("VehicleSessionImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleSessionImageId");

                    b.HasIndex("VehicleSessionId");

                    b.ToTable("VehicleSessionImages");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.Property<int>("VisitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitId"));

                    b.Property<int>("AcceptLevel")
                        .HasColumnType("int");

                    b.Property<int>("CreateById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRegister")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UpdateById")
                        .HasColumnType("int");

                    b.Property<string>("VisitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitQuantity")
                        .HasColumnType("int");

                    b.Property<string>("VisitType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitId");

                    b.HasIndex("CreateById");

                    b.HasIndex("UpdateById");

                    b.ToTable("Visits");

                    b.HasData(
                        new
                        {
                            VisitId = 1,
                            AcceptLevel = 1,
                            CreateById = 3,
                            DateRegister = new DateTime(2024, 9, 24, 10, 36, 14, 615, DateTimeKind.Local).AddTicks(8110),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        },
                        new
                        {
                            VisitId = 2,
                            AcceptLevel = 2,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 26, 3, 36, 14, 620, DateTimeKind.Utc).AddTicks(9689),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        },
                        new
                        {
                            VisitId = 3,
                            AcceptLevel = 2,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 26, 3, 36, 14, 620, DateTimeKind.Utc).AddTicks(9845),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        },
                        new
                        {
                            VisitId = 4,
                            AcceptLevel = 2,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 26, 3, 36, 14, 620, DateTimeKind.Utc).AddTicks(9857),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        },
                        new
                        {
                            VisitId = 5,
                            AcceptLevel = 2,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 26, 3, 36, 14, 620, DateTimeKind.Utc).AddTicks(9866),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        },
                        new
                        {
                            VisitId = 6,
                            AcceptLevel = 2,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 26, 3, 36, 14, 620, DateTimeKind.Utc).AddTicks(9874),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.Property<int>("VisitDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitDetailId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ExpectedEndTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("ExpectedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ExpectedStartTime")
                        .HasColumnType("time");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.Property<int>("VisitorId")
                        .HasColumnType("int");

                    b.HasKey("VisitDetailId");

                    b.HasIndex("VisitId");

                    b.HasIndex("VisitorId");

                    b.ToTable("VisitDetails");

                    b.HasData(
                        new
                        {
                            VisitDetailId = 1,
                            Description = "Voluptas nesciunt recusandae aspernatur ullam adipisci quia commodi. Amet facere reiciendis. Quia ipsum recusandae incidunt voluptatibus sapiente et. Animi ipsam aut non veniam voluptatibus.",
                            ExpectedEndDate = new DateTime(2024, 10, 25, 10, 36, 14, 619, DateTimeKind.Local).AddTicks(8329),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 25, 10, 36, 14, 619, DateTimeKind.Local).AddTicks(8289),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 1,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitDetailId = 2,
                            Description = "Ex est aut et sed. Nulla dicta aperiam commodi aperiam enim rerum eligendi molestiae molestiae. Itaque officia suscipit impedit assumenda.",
                            ExpectedEndDate = new DateTime(2024, 10, 25, 10, 36, 14, 619, DateTimeKind.Local).AddTicks(8745),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 25, 10, 36, 14, 619, DateTimeKind.Local).AddTicks(8742),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 1,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitDetailId = 3,
                            Description = "Dicta dolor aut dolores. Aspernatur enim consequatur. Optio doloremque officiis iure tempore nihil et dolores blanditiis perferendis. Ea nihil sint et. Totam dolores quia minus enim deleniti repellat minima dignissimos quia. Nulla vitae necessitatibus ut dignissimos vitae autem sed aperiam.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 36, 14, 622, DateTimeKind.Local).AddTicks(1403),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 36, 14, 622, DateTimeKind.Local).AddTicks(1434),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 2,
                            VisitorId = 9
                        },
                        new
                        {
                            VisitDetailId = 4,
                            Description = "Est distinctio repudiandae blanditiis placeat et sit animi totam possimus. Incidunt sint ut aut harum officiis. Non sit corporis sapiente. Esse autem illo. Vel sit quis in voluptatibus incidunt provident.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 36, 14, 622, DateTimeKind.Local).AddTicks(1710),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 36, 14, 622, DateTimeKind.Local).AddTicks(1713),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 2,
                            VisitorId = 6
                        },
                        new
                        {
                            VisitDetailId = 5,
                            Description = "Voluptatibus est consequatur odio aut. Ipsa aspernatur aut. Id perferendis consequuntur dolorum ipsam delectus magni.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 36, 14, 623, DateTimeKind.Local).AddTicks(2742),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 36, 14, 623, DateTimeKind.Local).AddTicks(2775),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 2,
                            VisitorId = 10
                        },
                        new
                        {
                            VisitDetailId = 6,
                            Description = "Perferendis et culpa sunt aperiam sequi molestiae illo. Iste deleniti suscipit. Quibusdam qui qui qui. Non atque accusantium.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 36, 14, 623, DateTimeKind.Local).AddTicks(2982),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 36, 14, 623, DateTimeKind.Local).AddTicks(2984),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 2,
                            VisitorId = 7
                        },
                        new
                        {
                            VisitDetailId = 7,
                            Description = "Aliquid ut vel quia ut. Eum eum aut quisquam libero consequatur quis dolorem vel debitis. Sapiente quo a. Rerum non provident debitis in enim.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 36, 14, 624, DateTimeKind.Local).AddTicks(3874),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 36, 14, 624, DateTimeKind.Local).AddTicks(3899),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 2,
                            VisitorId = 3
                        },
                        new
                        {
                            VisitDetailId = 8,
                            Description = "Deserunt quasi atque consequatur voluptatibus et tenetur. Accusamus eum eveniet. Quam quae sint eveniet perferendis odio reiciendis. Explicabo soluta quis eveniet repudiandae explicabo tenetur vel laborum similique.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 36, 14, 624, DateTimeKind.Local).AddTicks(4190),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 36, 14, 624, DateTimeKind.Local).AddTicks(4192),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 2,
                            VisitorId = 4
                        },
                        new
                        {
                            VisitDetailId = 9,
                            Description = "A voluptas voluptatum deserunt sequi cupiditate explicabo. Nobis quisquam ut hic similique fuga nulla vitae inventore error. Vel quibusdam adipisci voluptas facilis quia nesciunt non et qui. Illo molestiae enim voluptatem molestias quisquam et non dolor dolores. Quasi commodi dolor non aperiam similique laudantium nulla temporibus reiciendis.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 36, 14, 625, DateTimeKind.Local).AddTicks(4758),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 36, 14, 625, DateTimeKind.Local).AddTicks(4782),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 3,
                            VisitorId = 10
                        },
                        new
                        {
                            VisitDetailId = 10,
                            Description = "Aliquam ut sit excepturi. Harum numquam eum rerum dolorem cum nihil delectus accusamus. Ex omnis non. Qui dolorem molestiae culpa et at. Rerum repellat consequatur repellat et distinctio sed. Dolorem repudiandae nam voluptatem nihil.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 36, 14, 625, DateTimeKind.Local).AddTicks(5031),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 36, 14, 625, DateTimeKind.Local).AddTicks(5033),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 3,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitDetailId = 11,
                            Description = "Vel quisquam ut modi ut officia unde sapiente eius architecto. Distinctio ut expedita cupiditate nostrum alias perspiciatis. Architecto esse ullam impedit. Voluptatem quam sapiente quae.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 36, 14, 626, DateTimeKind.Local).AddTicks(6010),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 36, 14, 626, DateTimeKind.Local).AddTicks(6037),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 3,
                            VisitorId = 9
                        },
                        new
                        {
                            VisitDetailId = 12,
                            Description = "Perferendis debitis ea animi est ut. Eos dolores doloribus eveniet esse consequatur suscipit. Ipsum incidunt ea aut. Rem voluptas ad aut.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 36, 14, 626, DateTimeKind.Local).AddTicks(6261),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 36, 14, 626, DateTimeKind.Local).AddTicks(6264),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 3,
                            VisitorId = 7
                        },
                        new
                        {
                            VisitDetailId = 13,
                            Description = "Eos voluptas quia totam ut. Doloribus vitae velit ut facilis consequatur itaque. Dolores unde tenetur doloribus labore.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 36, 14, 629, DateTimeKind.Local).AddTicks(2197),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 36, 14, 629, DateTimeKind.Local).AddTicks(2225),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 3,
                            VisitorId = 10
                        },
                        new
                        {
                            VisitDetailId = 14,
                            Description = "Exercitationem non ex maiores sint maiores ipsum omnis earum. Magni quas natus et quos. Maxime unde inventore dolor atque est impedit sit ut. Est facere ab facilis possimus.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 36, 14, 629, DateTimeKind.Local).AddTicks(2473),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 36, 14, 629, DateTimeKind.Local).AddTicks(2475),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 3,
                            VisitorId = 4
                        },
                        new
                        {
                            VisitDetailId = 15,
                            Description = "Illo molestiae maiores facilis earum voluptatem a enim. Nemo ratione mollitia ipsum aliquid ullam nihil iusto. Aut mollitia deleniti enim sit expedita accusamus. Consequatur ad et pariatur esse illo sint itaque.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 36, 14, 630, DateTimeKind.Local).AddTicks(3640),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 36, 14, 630, DateTimeKind.Local).AddTicks(3667),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 9
                        },
                        new
                        {
                            VisitDetailId = 16,
                            Description = "Assumenda necessitatibus fugiat laboriosam quaerat ad rerum nesciunt. Magnam velit sint. Sed placeat voluptatem tempora quidem dolorem aut beatae quo architecto. Non cum sed magnam eos.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 36, 14, 630, DateTimeKind.Local).AddTicks(3890),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 36, 14, 630, DateTimeKind.Local).AddTicks(3892),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 3
                        },
                        new
                        {
                            VisitDetailId = 17,
                            Description = "Voluptatibus id voluptatem perspiciatis laudantium ut qui accusantium vel. Aperiam tempora harum earum. Ducimus occaecati et est accusamus ad aut eligendi eaque iure. Nisi est suscipit alias reiciendis assumenda quis. Illum repudiandae quam nihil molestias explicabo. A vel cumque sit aut quia quia eos.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 36, 14, 631, DateTimeKind.Local).AddTicks(4578),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 36, 14, 631, DateTimeKind.Local).AddTicks(4668),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 9
                        },
                        new
                        {
                            VisitDetailId = 18,
                            Description = "Voluptatem dolore iste. Repudiandae mollitia aut nihil ut quidem nam autem. Soluta eos non eligendi sed corporis ut id id. Est harum qui harum sint consequatur harum numquam qui ratione.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 36, 14, 631, DateTimeKind.Local).AddTicks(4903),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 36, 14, 631, DateTimeKind.Local).AddTicks(4906),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitDetailId = 19,
                            Description = "Facere ut saepe modi dicta ea fugit sit. Error et dolores sunt pariatur. Totam alias recusandae labore minima excepturi molestiae atque optio.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 36, 14, 632, DateTimeKind.Local).AddTicks(5746),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 36, 14, 632, DateTimeKind.Local).AddTicks(5772),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 5
                        },
                        new
                        {
                            VisitDetailId = 20,
                            Description = "Et ut vel repellendus quia sunt voluptatem. At doloribus a. Est id molestiae ducimus aut. Voluptas nihil veniam aliquam. Iure qui sit veniam at sunt sit fuga.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 36, 14, 632, DateTimeKind.Local).AddTicks(6003),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 36, 14, 632, DateTimeKind.Local).AddTicks(6005),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 4
                        },
                        new
                        {
                            VisitDetailId = 21,
                            Description = "Sint ullam placeat. Et sed nulla nisi placeat totam quidem. Quod aut facilis ipsa rerum culpa distinctio voluptate repellendus perspiciatis. Harum doloribus vel dicta soluta est iure molestiae reiciendis cupiditate. Quaerat nemo id excepturi dignissimos autem quasi ut odit deleniti.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 36, 14, 633, DateTimeKind.Local).AddTicks(6667),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 36, 14, 633, DateTimeKind.Local).AddTicks(6692),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 5,
                            VisitorId = 2
                        },
                        new
                        {
                            VisitDetailId = 22,
                            Description = "Quasi non rerum ut in vel ipsa eos. Unde provident error amet. Nesciunt ut explicabo. Voluptas rerum sequi in harum aperiam.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 36, 14, 633, DateTimeKind.Local).AddTicks(6906),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 36, 14, 633, DateTimeKind.Local).AddTicks(6909),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 5,
                            VisitorId = 6
                        },
                        new
                        {
                            VisitDetailId = 23,
                            Description = "Aut porro officia quo eos. Fugiat quidem quam repudiandae saepe consequuntur quia vero recusandae. Sunt laudantium repudiandae reiciendis architecto.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 36, 14, 634, DateTimeKind.Local).AddTicks(8917),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 36, 14, 634, DateTimeKind.Local).AddTicks(8942),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 5,
                            VisitorId = 4
                        },
                        new
                        {
                            VisitDetailId = 24,
                            Description = "Deleniti beatae praesentium sed rerum quisquam quia fugit velit maiores. Ad mollitia consequatur perferendis assumenda et laborum dolore aut. Atque architecto fugit qui laboriosam vero. Enim aperiam blanditiis accusamus voluptates dolores vero culpa. Id est numquam aut nisi minima eaque sit atque.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 36, 14, 634, DateTimeKind.Local).AddTicks(9209),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 36, 14, 634, DateTimeKind.Local).AddTicks(9211),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 5,
                            VisitorId = 7
                        },
                        new
                        {
                            VisitDetailId = 25,
                            Description = "Totam impedit placeat cupiditate delectus nihil nesciunt. Ut non aut inventore nulla odio accusamus in. Inventore voluptas dicta earum quisquam asperiores et sit ducimus sit. Consectetur inventore distinctio perspiciatis nisi rerum. Enim eum odio ipsam fuga consectetur et dolores et.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 36, 14, 636, DateTimeKind.Local).AddTicks(152),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 36, 14, 636, DateTimeKind.Local).AddTicks(177),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 5,
                            VisitorId = 7
                        },
                        new
                        {
                            VisitDetailId = 26,
                            Description = "Aut ipsum repellat iste. Nesciunt hic nobis et non recusandae ut. Voluptate hic omnis aut et qui. Tempore veritatis aut et dolorem repellendus velit aliquid molestias impedit. Culpa nostrum enim et.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 36, 14, 636, DateTimeKind.Local).AddTicks(416),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 36, 14, 636, DateTimeKind.Local).AddTicks(418),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 5,
                            VisitorId = 9
                        },
                        new
                        {
                            VisitDetailId = 27,
                            Description = "Eos sunt architecto ut quas ea omnis. Et unde dolorem perferendis ut. Magni ea saepe minima assumenda officiis.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 36, 14, 637, DateTimeKind.Local).AddTicks(908),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 36, 14, 637, DateTimeKind.Local).AddTicks(932),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 6,
                            VisitorId = 7
                        },
                        new
                        {
                            VisitDetailId = 28,
                            Description = "Modi quam unde autem hic. Maxime aut iure sit incidunt totam. Magni velit reiciendis ea perferendis eos qui eos.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 36, 14, 637, DateTimeKind.Local).AddTicks(1133),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 36, 14, 637, DateTimeKind.Local).AddTicks(1135),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 6,
                            VisitorId = 6
                        },
                        new
                        {
                            VisitDetailId = 29,
                            Description = "Consequatur in rerum deleniti ab. Dolores suscipit dicta mollitia eum neque minima autem. Fugiat temporibus non. Est neque culpa dolorem repellat. Aliquam et voluptate est. Est distinctio natus aliquam voluptatem quos esse a ullam.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 36, 14, 638, DateTimeKind.Local).AddTicks(9886),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 36, 14, 638, DateTimeKind.Local).AddTicks(9918),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 6,
                            VisitorId = 9
                        },
                        new
                        {
                            VisitDetailId = 30,
                            Description = "Dolorem illum recusandae eius delectus hic quisquam architecto. Rerum veritatis dicta odit minus dolor est unde iste voluptatem. Aspernatur occaecati dolorem animi voluptates qui dignissimos labore ullam rerum. Libero ipsa aut natus adipisci expedita occaecati. Modi officiis id sint aut molestiae. Sit mollitia eaque quas officia.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 36, 14, 639, DateTimeKind.Local).AddTicks(199),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 36, 14, 639, DateTimeKind.Local).AddTicks(202),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 6,
                            VisitorId = 4
                        },
                        new
                        {
                            VisitDetailId = 31,
                            Description = "Tempora porro debitis libero odio. Rerum sint aliquam et et explicabo occaecati exercitationem debitis sint. Itaque perspiciatis autem necessitatibus et. Qui minus nisi qui ad quia. Aliquid numquam aut voluptas et. Minima aliquid magnam aut quaerat laborum numquam error id est.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 36, 14, 640, DateTimeKind.Local).AddTicks(1381),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 36, 14, 640, DateTimeKind.Local).AddTicks(1412),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 6,
                            VisitorId = 8
                        },
                        new
                        {
                            VisitDetailId = 32,
                            Description = "Officia et nulla dolores. Tenetur eum necessitatibus quasi a aut. Hic sint quisquam corporis tempore ipsum eos fuga incidunt voluptatum. Sint quam tempora minima voluptas saepe qui facilis recusandae ipsa. Facere vitae dolores aut aut est a nobis.",
                            ExpectedEndDate = new DateTime(2024, 9, 26, 10, 36, 14, 640, DateTimeKind.Local).AddTicks(1656),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 27, 10, 36, 14, 640, DateTimeKind.Local).AddTicks(1658),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 6,
                            VisitorId = 4
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitProcess", b =>
                {
                    b.Property<int>("VisitProcessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitProcessId"));

                    b.Property<string>("DaysOfProcess")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ExpectedEndTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("ExpectedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ExpectedStartTime")
                        .HasColumnType("time");

                    b.Property<int>("ProcessId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.Property<int>("VisitQuantity")
                        .HasColumnType("int");

                    b.HasKey("VisitProcessId");

                    b.HasIndex("ProcessId");

                    b.HasIndex("VisitId");

                    b.ToTable("VisitProjects");

                    b.HasData(
                        new
                        {
                            VisitProcessId = 1,
                            DaysOfProcess = "Monday",
                            ExpectedEndDate = new DateTime(2024, 10, 25, 10, 36, 14, 616, DateTimeKind.Local).AddTicks(9174),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 25, 10, 36, 14, 616, DateTimeKind.Local).AddTicks(9141),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            ProcessId = 1,
                            Status = "Processing",
                            VisitId = 1,
                            VisitQuantity = 2
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitType", b =>
                {
                    b.Property<int>("VisitTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitTypeId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VisitTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitTypeId");

                    b.ToTable("VisitTypes");

                    b.HasData(
                        new
                        {
                            VisitTypeId = 1,
                            Description = "Process trong tuần",
                            VisitTypeName = "ProcessWeek"
                        },
                        new
                        {
                            VisitTypeId = 2,
                            Description = "Process trong tháng",
                            VisitTypeName = "ProcessMonth"
                        },
                        new
                        {
                            VisitTypeId = 3,
                            Description = "Project",
                            VisitTypeName = "Project"
                        },
                        new
                        {
                            VisitTypeId = 4,
                            Description = "Visit được tạo bởi staff",
                            VisitTypeName = "VisitStaff"
                        },
                        new
                        {
                            VisitTypeId = 5,
                            Description = "Visit được tạo bởi security",
                            VisitTypeName = "VisitSecurity"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.Property<int>("VisitorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorId"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreateById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CredentialCardTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CredentialsCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("VisitorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitorId");

                    b.HasIndex("CreateById");

                    b.HasIndex("CredentialCardTypeId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Visitors");

                    b.HasData(
                        new
                        {
                            VisitorId = 1,
                            CompanyName = "Gulgowski Inc",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 3, 20, 9, 23, 379, DateTimeKind.Unspecified).AddTicks(4679),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "mwpj1y4k4u",
                            PhoneNumber = "0234171487",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 3, 20, 9, 23, 379, DateTimeKind.Unspecified).AddTicks(4679),
                            VisitorName = "Gregorio Lemke"
                        },
                        new
                        {
                            VisitorId = 2,
                            CompanyName = "Stehr, Kassulke and Johnston",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 21, 9, 29, 51, 717, DateTimeKind.Unspecified).AddTicks(8134),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "u21rsr7xm2",
                            PhoneNumber = "0247807559",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 21, 9, 29, 51, 717, DateTimeKind.Unspecified).AddTicks(8134),
                            VisitorName = "Orin Mayer"
                        },
                        new
                        {
                            VisitorId = 3,
                            CompanyName = "Reinger - Nolan",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 17, 7, 42, 31, 145, DateTimeKind.Unspecified).AddTicks(9170),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "oej2t31v91",
                            PhoneNumber = "0739218090",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 17, 7, 42, 31, 145, DateTimeKind.Unspecified).AddTicks(9170),
                            VisitorName = "Raphael Boyle"
                        },
                        new
                        {
                            VisitorId = 4,
                            CompanyName = "Douglas - Terry",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 8, 11, 54, 43, 8, DateTimeKind.Unspecified).AddTicks(3209),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "tm81p79jvk",
                            PhoneNumber = "0589188705",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 8, 11, 54, 43, 8, DateTimeKind.Unspecified).AddTicks(3209),
                            VisitorName = "Cali Schiller"
                        },
                        new
                        {
                            VisitorId = 5,
                            CompanyName = "Mosciski LLC",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 21, 23, 33, 3, 593, DateTimeKind.Unspecified).AddTicks(8317),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "ii30iazfve",
                            PhoneNumber = "0323981932",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 21, 23, 33, 3, 593, DateTimeKind.Unspecified).AddTicks(8317),
                            VisitorName = "Estrella McDermott"
                        },
                        new
                        {
                            VisitorId = 6,
                            CompanyName = "Sanford Group",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 20, 17, 7, 6, 624, DateTimeKind.Unspecified).AddTicks(4674),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "r62r5x4jpf",
                            PhoneNumber = "0633675726",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 20, 17, 7, 6, 624, DateTimeKind.Unspecified).AddTicks(4674),
                            VisitorName = "Anabelle Beahan"
                        },
                        new
                        {
                            VisitorId = 7,
                            CompanyName = "Dooley - Stark",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 21, 18, 26, 32, 714, DateTimeKind.Unspecified).AddTicks(3336),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "877vmja2k0",
                            PhoneNumber = "0358068131",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 21, 18, 26, 32, 714, DateTimeKind.Unspecified).AddTicks(3336),
                            VisitorName = "Rachael Kovacek"
                        },
                        new
                        {
                            VisitorId = 8,
                            CompanyName = "Medhurst Inc",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 6, 3, 48, 43, 839, DateTimeKind.Unspecified).AddTicks(2299),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "am5xpvhymz",
                            PhoneNumber = "0283136949",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 6, 3, 48, 43, 839, DateTimeKind.Unspecified).AddTicks(2299),
                            VisitorName = "Dagmar Doyle"
                        },
                        new
                        {
                            VisitorId = 9,
                            CompanyName = "Altenwerth, Deckow and Will",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 13, 0, 53, 20, 848, DateTimeKind.Unspecified).AddTicks(5313),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "jwpsm07yo7",
                            PhoneNumber = "0696546225",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 13, 0, 53, 20, 848, DateTimeKind.Unspecified).AddTicks(5313),
                            VisitorName = "Sylvia Schuppe"
                        },
                        new
                        {
                            VisitorId = 10,
                            CompanyName = "Greenholt - Weimann",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 15, 1, 16, 30, 551, DateTimeKind.Unspecified).AddTicks(4884),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "d5xvd2qs4w",
                            PhoneNumber = "0690427093",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 15, 1, 16, 30, 551, DateTimeKind.Unspecified).AddTicks(4884),
                            VisitorName = "Ladarius Boyle"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.Property<int>("VisitorSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorSessionId"));

                    b.Property<DateTime>("CheckinTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CheckoutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GateInId")
                        .HasColumnType("int");

                    b.Property<int?>("GateOutId")
                        .HasColumnType("int");

                    b.Property<int>("QRCardId")
                        .HasColumnType("int");

                    b.Property<int>("SecurityInId")
                        .HasColumnType("int");

                    b.Property<int?>("SecurityOutId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitDetailId")
                        .HasColumnType("int");

                    b.HasKey("VisitorSessionId");

                    b.HasIndex("GateInId");

                    b.HasIndex("GateOutId");

                    b.HasIndex("QRCardId");

                    b.HasIndex("SecurityInId");

                    b.HasIndex("SecurityOutId");

                    b.HasIndex("VisitDetailId");

                    b.ToTable("VisitorSessions");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSessionsImage", b =>
                {
                    b.Property<int>("VisitorSessionsImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorSessionsImageId"));

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitorSessionId")
                        .HasColumnType("int");

                    b.HasKey("VisitorSessionsImageId");

                    b.HasIndex("VisitorSessionId");

                    b.ToTable("VisitorSessionsImages");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.NotificationUsers", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Notification", "Notification")
                        .WithMany("NotificationUsers")
                        .HasForeignKey("NotificationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Receiver")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Sender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Process", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.User", "User")
                        .WithMany("Project")
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.VisitType", "VisitType")
                        .WithMany("VisitTypes")
                        .HasForeignKey("VisitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("VisitType");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.QRCardStatus", "QRCardStatus")
                        .WithMany("QRCards")
                        .HasForeignKey("QRCardStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.QRCardType", "QRCardType")
                        .WithMany("QRCards")
                        .HasForeignKey("QRCardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QRCardStatus");

                    b.Navigation("QRCardType");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Role", "Role")
                        .WithMany("User")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.UserDepartment", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Department", "Department")
                        .WithMany("UserDepartment")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "User")
                        .WithMany("UserDepartment")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Gate", "Gate")
                        .WithMany("VehicleSession")
                        .HasForeignKey("GateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Security")
                        .WithMany("VehicleSession")
                        .HasForeignKey("SecurityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.VisitDetail", "VisitDetail")
                        .WithMany("VehicleSession")
                        .HasForeignKey("VisitDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gate");

                    b.Navigation("Security");

                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSessionImage", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.VehicleSession", "VehicleSession")
                        .WithMany("Images")
                        .HasForeignKey("VehicleSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.User", "CreateBy")
                        .WithMany("CreatedVisits")
                        .HasForeignKey("CreateById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "UpdateBy")
                        .WithMany("UpdatedVisits")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreateBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Visit", "Visit")
                        .WithMany("VisitDetail")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Visitor", "Visitor")
                        .WithMany("VisitDetail")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visit");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitProcess", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Process", "Process")
                        .WithMany("VisitProject")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Visit", "Visit")
                        .WithMany("VisitProject")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Process");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.UserDepartment", "UserDepartment")
                        .WithMany("Visitors")
                        .HasForeignKey("CreateById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.CredentialCardType", "CredentialCardType")
                        .WithMany("Visitor")
                        .HasForeignKey("CredentialCardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "User")
                        .WithOne("Visitor")
                        .HasForeignKey("SecurityGateApv.Domain.Models.Visitor", "UserId");

                    b.Navigation("CredentialCardType");

                    b.Navigation("User");

                    b.Navigation("UserDepartment");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Gate", "GateIn")
                        .WithMany("VisitorSessionsIn")
                        .HasForeignKey("GateInId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Gate", "GateOut")
                        .WithMany("VisitorSessionsOut")
                        .HasForeignKey("GateOutId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SecurityGateApv.Domain.Models.QRCard", "QRCard")
                        .WithMany("VisitorSession")
                        .HasForeignKey("QRCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "SecurityIn")
                        .WithMany("SecurityInSessions")
                        .HasForeignKey("SecurityInId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "SecurityOut")
                        .WithMany("SecurityOutSessions")
                        .HasForeignKey("SecurityOutId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SecurityGateApv.Domain.Models.VisitDetail", "VisitDetail")
                        .WithMany("VisitorSession")
                        .HasForeignKey("VisitDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GateIn");

                    b.Navigation("GateOut");

                    b.Navigation("QRCard");

                    b.Navigation("SecurityIn");

                    b.Navigation("SecurityOut");

                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSessionsImage", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.VisitorSession", "VisitorSession")
                        .WithMany("Images")
                        .HasForeignKey("VisitorSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.CredentialCardType", b =>
                {
                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Department", b =>
                {
                    b.Navigation("UserDepartment");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Gate", b =>
                {
                    b.Navigation("VehicleSession");

                    b.Navigation("VisitorSessionsIn");

                    b.Navigation("VisitorSessionsOut");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Notification", b =>
                {
                    b.Navigation("NotificationUsers");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Process", b =>
                {
                    b.Navigation("VisitProject");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardStatus", b =>
                {
                    b.Navigation("QRCards");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardType", b =>
                {
                    b.Navigation("QRCards");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Role", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.Navigation("CreatedVisits");

                    b.Navigation("Project");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("SecurityInSessions");

                    b.Navigation("SecurityOutSessions");

                    b.Navigation("SentNotifications");

                    b.Navigation("UpdatedVisits");

                    b.Navigation("UserDepartment");

                    b.Navigation("VehicleSession");

                    b.Navigation("Visitor")
                        .IsRequired();
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.UserDepartment", b =>
                {
                    b.Navigation("Visitors");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.Navigation("VisitDetail");

                    b.Navigation("VisitProject");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.Navigation("VehicleSession");

                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitType", b =>
                {
                    b.Navigation("VisitTypes");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
