// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SecurityGateApv.Infras.DBContext;

#nullable disable

namespace SecurityGateApv.Infras.Migrations
{
    [DbContext(typeof(SecurityGateApvDbContext))]
    [Migration("20240919055552_SeedData_6")]
    partial class SeedData_6
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SecurityGateApv.Domain.Models.CredentialCardType", b =>
                {
                    b.Property<int>("CredentialCardTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CredentialCardTypeId"));

                    b.Property<string>("CredentialCardTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CredentialCardTypeId");

                    b.ToTable("CredentialCardTypes");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<int>("AcceptLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            AcceptLevel = 3,
                            CreateDate = new DateTime(2024, 9, 16, 9, 21, 37, 370, DateTimeKind.Utc).AddTicks(5536),
                            DepartmentName = "Phòng Kế toán",
                            Description = "Quasi dolorem magni perferendis facilis.",
                            UpdatedDate = new DateTime(2024, 9, 16, 9, 21, 37, 370, DateTimeKind.Utc).AddTicks(5536)
                        },
                        new
                        {
                            DepartmentId = 2,
                            AcceptLevel = 2,
                            CreateDate = new DateTime(2024, 9, 18, 19, 24, 58, 134, DateTimeKind.Utc).AddTicks(2946),
                            DepartmentName = "Phòng Kế toán",
                            Description = "Facilis voluptatem impedit dolor.",
                            UpdatedDate = new DateTime(2024, 9, 18, 19, 24, 58, 134, DateTimeKind.Utc).AddTicks(2946)
                        },
                        new
                        {
                            DepartmentId = 3,
                            AcceptLevel = 1,
                            CreateDate = new DateTime(2024, 9, 3, 16, 44, 2, 970, DateTimeKind.Utc).AddTicks(7900),
                            DepartmentName = "Phòng Kinh doanh",
                            Description = "Inventore pariatur numquam ratione dicta recusandae.",
                            UpdatedDate = new DateTime(2024, 9, 3, 16, 44, 2, 970, DateTimeKind.Utc).AddTicks(7900)
                        },
                        new
                        {
                            DepartmentId = 4,
                            AcceptLevel = 3,
                            CreateDate = new DateTime(2024, 9, 14, 7, 58, 13, 486, DateTimeKind.Utc).AddTicks(9733),
                            DepartmentName = "Phòng Kế toán",
                            Description = "Molestias aut veritatis et.",
                            UpdatedDate = new DateTime(2024, 9, 14, 7, 58, 13, 486, DateTimeKind.Utc).AddTicks(9733)
                        },
                        new
                        {
                            DepartmentId = 5,
                            AcceptLevel = 3,
                            CreateDate = new DateTime(2024, 9, 3, 11, 45, 34, 857, DateTimeKind.Utc).AddTicks(1017),
                            DepartmentName = "Phòng Pháp chế",
                            Description = "Omnis dolores ipsa.",
                            UpdatedDate = new DateTime(2024, 9, 3, 11, 45, 34, 857, DateTimeKind.Utc).AddTicks(1017)
                        },
                        new
                        {
                            DepartmentId = 6,
                            AcceptLevel = 5,
                            CreateDate = new DateTime(2024, 9, 1, 9, 53, 19, 607, DateTimeKind.Utc).AddTicks(9948),
                            DepartmentName = "Phòng Sản xuất",
                            Description = "Vel sapiente officiis consequatur quos.",
                            UpdatedDate = new DateTime(2024, 9, 1, 9, 53, 19, 607, DateTimeKind.Utc).AddTicks(9948)
                        },
                        new
                        {
                            DepartmentId = 7,
                            AcceptLevel = 5,
                            CreateDate = new DateTime(2024, 9, 9, 13, 30, 7, 963, DateTimeKind.Utc).AddTicks(3366),
                            DepartmentName = "Phòng R&D",
                            Description = "Impedit fugiat nemo tenetur.",
                            UpdatedDate = new DateTime(2024, 9, 9, 13, 30, 7, 963, DateTimeKind.Utc).AddTicks(3366)
                        },
                        new
                        {
                            DepartmentId = 8,
                            AcceptLevel = 2,
                            CreateDate = new DateTime(2024, 9, 5, 19, 39, 31, 520, DateTimeKind.Utc).AddTicks(3084),
                            DepartmentName = "Phòng Kế toán",
                            Description = "Quos ab quae voluptatem possimus.",
                            UpdatedDate = new DateTime(2024, 9, 5, 19, 39, 31, 520, DateTimeKind.Utc).AddTicks(3084)
                        },
                        new
                        {
                            DepartmentId = 9,
                            AcceptLevel = 5,
                            CreateDate = new DateTime(2024, 9, 13, 22, 27, 10, 736, DateTimeKind.Utc).AddTicks(4723),
                            DepartmentName = "Phòng IT",
                            Description = "Vel dolorum non voluptatem porro.",
                            UpdatedDate = new DateTime(2024, 9, 13, 22, 27, 10, 736, DateTimeKind.Utc).AddTicks(4723)
                        },
                        new
                        {
                            DepartmentId = 10,
                            AcceptLevel = 3,
                            CreateDate = new DateTime(2024, 9, 13, 10, 17, 6, 313, DateTimeKind.Utc).AddTicks(7744),
                            DepartmentName = "Phòng Pháp chế",
                            Description = "Libero eius quod in non nam ad.",
                            UpdatedDate = new DateTime(2024, 9, 13, 10, 17, 6, 313, DateTimeKind.Utc).AddTicks(7744)
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.DepartmentReason", b =>
                {
                    b.Property<int>("DepartmentReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentReasonId"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReasonId")
                        .HasColumnType("int");

                    b.HasKey("DepartmentReasonId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ReasonId");

                    b.ToTable("DepartmentReasons");

                    b.HasData(
                        new
                        {
                            DepartmentReasonId = 1,
                            DepartmentId = 3,
                            Description = "Reprehenderit autem sint.",
                            Name = "Sleek Plastic Gloves",
                            ReasonId = 4
                        },
                        new
                        {
                            DepartmentReasonId = 2,
                            DepartmentId = 4,
                            Description = "Ipsum id debitis consequuntur enim mollitia quisquam autem.",
                            Name = "Generic Granite Gloves",
                            ReasonId = 1
                        },
                        new
                        {
                            DepartmentReasonId = 3,
                            DepartmentId = 4,
                            Description = "Deleniti voluptas quam quisquam distinctio consequatur cumque quia et et.",
                            Name = "Ergonomic Metal Chair",
                            ReasonId = 1
                        },
                        new
                        {
                            DepartmentReasonId = 4,
                            DepartmentId = 6,
                            Description = "Vero cumque voluptas ducimus autem nostrum est.",
                            Name = "Handmade Cotton Towels",
                            ReasonId = 4
                        },
                        new
                        {
                            DepartmentReasonId = 5,
                            DepartmentId = 10,
                            Description = "Debitis nihil eum in aut veniam doloribus exercitationem.",
                            Name = "Fantastic Metal Sausages",
                            ReasonId = 1
                        },
                        new
                        {
                            DepartmentReasonId = 6,
                            DepartmentId = 10,
                            Description = "Sit autem labore aut libero aperiam eligendi.",
                            Name = "Ergonomic Concrete Hat",
                            ReasonId = 5
                        },
                        new
                        {
                            DepartmentReasonId = 7,
                            DepartmentId = 9,
                            Description = "Voluptatem voluptatibus rerum nam odit.",
                            Name = "Licensed Steel Ball",
                            ReasonId = 1
                        },
                        new
                        {
                            DepartmentReasonId = 8,
                            DepartmentId = 6,
                            Description = "Similique est sint tempore quas voluptates enim qui.",
                            Name = "Small Rubber Pants",
                            ReasonId = 5
                        },
                        new
                        {
                            DepartmentReasonId = 9,
                            DepartmentId = 8,
                            Description = "Cupiditate id quo.",
                            Name = "Ergonomic Rubber Sausages",
                            ReasonId = 5
                        },
                        new
                        {
                            DepartmentReasonId = 10,
                            DepartmentId = 1,
                            Description = "Totam quod aspernatur neque.",
                            Name = "Gorgeous Granite Salad",
                            ReasonId = 3
                        },
                        new
                        {
                            DepartmentReasonId = 11,
                            DepartmentId = 7,
                            Description = "Voluptatibus quas nihil laudantium quas.",
                            Name = "Handcrafted Fresh Chicken",
                            ReasonId = 4
                        },
                        new
                        {
                            DepartmentReasonId = 12,
                            DepartmentId = 1,
                            Description = "Odio tenetur ipsa.",
                            Name = "Refined Granite Pizza",
                            ReasonId = 3
                        },
                        new
                        {
                            DepartmentReasonId = 13,
                            DepartmentId = 6,
                            Description = "Corrupti omnis quia aut earum.",
                            Name = "Tasty Fresh Chair",
                            ReasonId = 5
                        },
                        new
                        {
                            DepartmentReasonId = 14,
                            DepartmentId = 5,
                            Description = "Neque in facere fugit neque impedit vel quae.",
                            Name = "Ergonomic Concrete Fish",
                            ReasonId = 2
                        },
                        new
                        {
                            DepartmentReasonId = 15,
                            DepartmentId = 1,
                            Description = "Quasi nihil architecto ab.",
                            Name = "Intelligent Plastic Car",
                            ReasonId = 2
                        },
                        new
                        {
                            DepartmentReasonId = 16,
                            DepartmentId = 2,
                            Description = "Veniam officiis sed.",
                            Name = "Awesome Wooden Fish",
                            ReasonId = 5
                        },
                        new
                        {
                            DepartmentReasonId = 17,
                            DepartmentId = 10,
                            Description = "Architecto iusto porro.",
                            Name = "Ergonomic Metal Soap",
                            ReasonId = 3
                        },
                        new
                        {
                            DepartmentReasonId = 18,
                            DepartmentId = 9,
                            Description = "Sint similique labore labore vel eius ad cumque.",
                            Name = "Unbranded Soft Car",
                            ReasonId = 5
                        },
                        new
                        {
                            DepartmentReasonId = 19,
                            DepartmentId = 1,
                            Description = "Laboriosam modi commodi.",
                            Name = "Licensed Fresh Cheese",
                            ReasonId = 5
                        },
                        new
                        {
                            DepartmentReasonId = 20,
                            DepartmentId = 3,
                            Description = "Dolorem quia nesciunt quo.",
                            Name = "Incredible Granite Car",
                            ReasonId = 5
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Gate", b =>
                {
                    b.Property<int>("GateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GateId"));

                    b.Property<string>("GateCoordinate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GateId");

                    b.ToTable("Gates");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.NotificationUsers", b =>
                {
                    b.Property<int>("NotificationUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationUserID"));

                    b.Property<int>("NotificationID")
                        .HasColumnType("int");

                    b.Property<bool>("ReadStatus")
                        .HasColumnType("bit");

                    b.Property<int>("ReceiverID")
                        .HasColumnType("int");

                    b.Property<int>("SenderID")
                        .HasColumnType("int");

                    b.HasKey("NotificationUserID");

                    b.HasIndex("NotificationID");

                    b.HasIndex("ReceiverID");

                    b.HasIndex("SenderID");

                    b.ToTable("NotificationUsers");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<int>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ProjectId");

                    b.HasIndex("CreateBy");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.Property<int>("QRCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardId"));

                    b.Property<Guid>("CardGuidId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastCancelDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QRCardStatusId")
                        .HasColumnType("int");

                    b.Property<int>("QRCardTypeId")
                        .HasColumnType("int");

                    b.HasKey("QRCardId");

                    b.HasIndex("QRCardStatusId");

                    b.HasIndex("QRCardTypeId");

                    b.ToTable("QRCards");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardStatus", b =>
                {
                    b.Property<int>("QRCardStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardStatusId"));

                    b.Property<int>("StatusName")
                        .HasColumnType("int");

                    b.Property<int>("StatusNumber")
                        .HasColumnType("int");

                    b.HasKey("QRCardStatusId");

                    b.ToTable("QRCardStatus");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardType", b =>
                {
                    b.Property<int>("QRCardTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardTypeId"));

                    b.Property<string>("CardTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QRCardTypeId");

                    b.ToTable("QRCardType");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Reason", b =>
                {
                    b.Property<int>("ReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReasonId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReasonId");

                    b.ToTable("Reasons");

                    b.HasData(
                        new
                        {
                            ReasonId = 1,
                            Description = "Ut vero officiis quia dolorum eveniet nesciunt.",
                            ReasonName = "Rustic Wooden Hat"
                        },
                        new
                        {
                            ReasonId = 2,
                            Description = "Aut ad magni.",
                            ReasonName = "Small Rubber Bacon"
                        },
                        new
                        {
                            ReasonId = 3,
                            Description = "Laboriosam ipsam harum est aut ex aut quod non.",
                            ReasonName = "Small Cotton Chair"
                        },
                        new
                        {
                            ReasonId = 4,
                            Description = "Omnis amet eos eaque quo.",
                            ReasonName = "Small Plastic Chicken"
                        },
                        new
                        {
                            ReasonId = 5,
                            Description = "Natus rerum voluptate.",
                            ReasonName = "Fantastic Fresh Keyboard"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Description = "Quản lý toàn bộ hệ thống",
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            Description = "Quản lý toàn bộ công ty",
                            RoleName = "Manager"
                        },
                        new
                        {
                            RoleId = 3,
                            Description = "Quản lý toàn bộ phòng ban",
                            RoleName = "DepartmentManaager"
                        },
                        new
                        {
                            RoleId = 4,
                            Description = "Tạo và quản lý khách ra vào của phòng ban",
                            RoleName = "Staff"
                        },
                        new
                        {
                            RoleId = 5,
                            Description = "Quản lý khách ra vào tại cổng",
                            RoleName = "Security"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedDate = new DateTime(2024, 3, 19, 5, 55, 52, 536, DateTimeKind.Utc).AddTicks(2080),
                            Email = "admin1@example.com",
                            FullName = "Admin One",
                            Password = "123",
                            PhoneNumber = "0123456789",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 19, 5, 55, 52, 536, DateTimeKind.Utc).AddTicks(2088),
                            UserName = "admin1"
                        },
                        new
                        {
                            UserId = 2,
                            CreatedDate = new DateTime(2024, 6, 19, 5, 55, 52, 536, DateTimeKind.Utc).AddTicks(2091),
                            Email = "manager1@example.com",
                            FullName = "Manager One",
                            Password = "123",
                            PhoneNumber = "0987654321",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 19, 5, 55, 52, 536, DateTimeKind.Utc).AddTicks(2092),
                            UserName = "manager1"
                        },
                        new
                        {
                            UserId = 3,
                            CreatedDate = new DateTime(2024, 7, 19, 5, 55, 52, 536, DateTimeKind.Utc).AddTicks(2093),
                            Email = "employee1@example.com",
                            FullName = "Department Manager One",
                            Password = "123",
                            PhoneNumber = "0112223334",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 19, 5, 55, 52, 536, DateTimeKind.Utc).AddTicks(2094),
                            UserName = "DM1"
                        },
                        new
                        {
                            UserId = 4,
                            CreatedDate = new DateTime(2024, 8, 19, 5, 55, 52, 536, DateTimeKind.Utc).AddTicks(2095),
                            Email = "hr1@example.com",
                            FullName = "Staff One",
                            Password = "123",
                            PhoneNumber = "0223334445",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 19, 5, 55, 52, 536, DateTimeKind.Utc).AddTicks(2096),
                            UserName = "Staff1"
                        },
                        new
                        {
                            UserId = 5,
                            CreatedDate = new DateTime(2024, 5, 19, 5, 55, 52, 536, DateTimeKind.Utc).AddTicks(2097),
                            Email = "it1@example.com",
                            FullName = "Security One",
                            Password = "123",
                            PhoneNumber = "0334445556",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 19, 5, 55, 52, 536, DateTimeKind.Utc).AddTicks(2098),
                            UserName = "Security1"
                        },
                        new
                        {
                            UserId = 6,
                            CreatedDate = new DateTime(2024, 9, 13, 22, 25, 32, 656, DateTimeKind.Unspecified).AddTicks(1309),
                            Email = "gmail.com_Carroll@gmail.com",
                            FullName = "Arvel Witting",
                            Password = "pm16ah",
                            PhoneNumber = "0718901083",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 13, 22, 25, 32, 656, DateTimeKind.Unspecified).AddTicks(1309),
                            UserName = "Sadye_Gerlach"
                        },
                        new
                        {
                            UserId = 7,
                            CreatedDate = new DateTime(2024, 9, 11, 11, 56, 32, 721, DateTimeKind.Unspecified).AddTicks(7665),
                            Email = "gmail.com45@hotmail.com",
                            FullName = "Brannon Gleichner",
                            Password = "ayevxx",
                            PhoneNumber = "0887524404",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 11, 11, 56, 32, 721, DateTimeKind.Unspecified).AddTicks(7665),
                            UserName = "Ezequiel_Batz85"
                        },
                        new
                        {
                            UserId = 8,
                            CreatedDate = new DateTime(2024, 9, 14, 20, 57, 21, 751, DateTimeKind.Unspecified).AddTicks(2988),
                            Email = "gmail.com.Altenwerth@gmail.com",
                            FullName = "Martine Kozey",
                            Password = "av6otp",
                            PhoneNumber = "0316446128",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 14, 20, 57, 21, 751, DateTimeKind.Unspecified).AddTicks(2988),
                            UserName = "Raphaelle42"
                        },
                        new
                        {
                            UserId = 9,
                            CreatedDate = new DateTime(2024, 9, 17, 4, 58, 49, 536, DateTimeKind.Unspecified).AddTicks(7866),
                            Email = "gmail.com.Hickle@gmail.com",
                            FullName = "Rene Daugherty",
                            Password = "fadigt",
                            PhoneNumber = "0445975936",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 17, 4, 58, 49, 536, DateTimeKind.Unspecified).AddTicks(7866),
                            UserName = "Ismael_Sporer83"
                        },
                        new
                        {
                            UserId = 10,
                            CreatedDate = new DateTime(2024, 9, 8, 16, 28, 37, 434, DateTimeKind.Unspecified).AddTicks(5610),
                            Email = "gmail.com.Weber@gmail.com",
                            FullName = "Aniya Reichert",
                            Password = "n7tonn",
                            PhoneNumber = "0780629902",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 8, 16, 28, 37, 434, DateTimeKind.Unspecified).AddTicks(5610),
                            UserName = "Khalid16"
                        },
                        new
                        {
                            UserId = 11,
                            CreatedDate = new DateTime(2024, 9, 5, 1, 30, 44, 775, DateTimeKind.Unspecified).AddTicks(3962),
                            Email = "gmail.com.Gibson@yahoo.com",
                            FullName = "Lauren Tremblay",
                            Password = "1acmbo",
                            PhoneNumber = "0501360178",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 5, 1, 30, 44, 775, DateTimeKind.Unspecified).AddTicks(3962),
                            UserName = "Spencer.Walsh"
                        },
                        new
                        {
                            UserId = 12,
                            CreatedDate = new DateTime(2024, 9, 15, 0, 3, 15, 199, DateTimeKind.Unspecified).AddTicks(6360),
                            Email = "gmail.com_Mante@gmail.com",
                            FullName = "Evie Littel",
                            Password = "2wmrq5",
                            PhoneNumber = "0630618424",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 15, 0, 3, 15, 199, DateTimeKind.Unspecified).AddTicks(6360),
                            UserName = "Rosie99"
                        },
                        new
                        {
                            UserId = 13,
                            CreatedDate = new DateTime(2024, 9, 10, 15, 3, 44, 425, DateTimeKind.Unspecified).AddTicks(6234),
                            Email = "gmail.com.Parisian@hotmail.com",
                            FullName = "Casimir Kub",
                            Password = "ha8hqb",
                            PhoneNumber = "0838940194",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 10, 15, 3, 44, 425, DateTimeKind.Unspecified).AddTicks(6234),
                            UserName = "Misty.Connelly"
                        },
                        new
                        {
                            UserId = 14,
                            CreatedDate = new DateTime(2024, 9, 17, 15, 33, 29, 481, DateTimeKind.Unspecified).AddTicks(3046),
                            Email = "gmail.com.Crooks96@yahoo.com",
                            FullName = "Hillary Mayert",
                            Password = "aepbj3",
                            PhoneNumber = "0284591715",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 17, 15, 33, 29, 481, DateTimeKind.Unspecified).AddTicks(3046),
                            UserName = "Janae.Reilly"
                        },
                        new
                        {
                            UserId = 15,
                            CreatedDate = new DateTime(2024, 9, 15, 2, 6, 25, 67, DateTimeKind.Unspecified).AddTicks(4375),
                            Email = "gmail.com52@hotmail.com",
                            FullName = "Breana Kris",
                            Password = "kpfjfu",
                            PhoneNumber = "0559913983",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 15, 2, 6, 25, 67, DateTimeKind.Unspecified).AddTicks(4375),
                            UserName = "Ashlynn.Cole"
                        },
                        new
                        {
                            UserId = 16,
                            CreatedDate = new DateTime(2024, 9, 13, 16, 27, 50, 658, DateTimeKind.Unspecified).AddTicks(2193),
                            Email = "gmail.com93@gmail.com",
                            FullName = "Mabelle Klein",
                            Password = "9ky09s",
                            PhoneNumber = "0741427139",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 13, 16, 27, 50, 658, DateTimeKind.Unspecified).AddTicks(2193),
                            UserName = "Agustina50"
                        },
                        new
                        {
                            UserId = 17,
                            CreatedDate = new DateTime(2024, 9, 19, 0, 40, 7, 930, DateTimeKind.Unspecified).AddTicks(744),
                            Email = "gmail.com.Wolff96@hotmail.com",
                            FullName = "Dorris Morar",
                            Password = "ejdyjf",
                            PhoneNumber = "0456343057",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 19, 0, 40, 7, 930, DateTimeKind.Unspecified).AddTicks(744),
                            UserName = "Dolly_Hegmann"
                        },
                        new
                        {
                            UserId = 18,
                            CreatedDate = new DateTime(2024, 9, 7, 0, 14, 19, 500, DateTimeKind.Unspecified).AddTicks(4963),
                            Email = "gmail.com.Schuster83@hotmail.com",
                            FullName = "Adela Schuster",
                            Password = "i7fbrq",
                            PhoneNumber = "0691576615",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 7, 0, 14, 19, 500, DateTimeKind.Unspecified).AddTicks(4963),
                            UserName = "Ally_Kiehn"
                        },
                        new
                        {
                            UserId = 19,
                            CreatedDate = new DateTime(2024, 9, 14, 4, 4, 2, 643, DateTimeKind.Unspecified).AddTicks(3674),
                            Email = "gmail.com.Mayer79@hotmail.com",
                            FullName = "Garland Zulauf",
                            Password = "ollizq",
                            PhoneNumber = "0806481939",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 14, 4, 4, 2, 643, DateTimeKind.Unspecified).AddTicks(3674),
                            UserName = "Waino69"
                        },
                        new
                        {
                            UserId = 20,
                            CreatedDate = new DateTime(2024, 9, 2, 4, 31, 32, 325, DateTimeKind.Unspecified).AddTicks(191),
                            Email = "gmail.com_Wehner@yahoo.com",
                            FullName = "Dorothy Witting",
                            Password = "ahioc4",
                            PhoneNumber = "0194213497",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 2, 4, 31, 32, 325, DateTimeKind.Unspecified).AddTicks(191),
                            UserName = "Davon71"
                        },
                        new
                        {
                            UserId = 21,
                            CreatedDate = new DateTime(2024, 9, 1, 1, 49, 5, 569, DateTimeKind.Unspecified).AddTicks(471),
                            Email = "gmail.com.Kohler@gmail.com",
                            FullName = "Sigmund Swift",
                            Password = "6m1vgo",
                            PhoneNumber = "0266929988",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 1, 1, 49, 5, 569, DateTimeKind.Unspecified).AddTicks(471),
                            UserName = "Lindsay93"
                        },
                        new
                        {
                            UserId = 22,
                            CreatedDate = new DateTime(2024, 9, 7, 13, 39, 24, 846, DateTimeKind.Unspecified).AddTicks(9092),
                            Email = "gmail.com.Lebsack@gmail.com",
                            FullName = "Alan Beahan",
                            Password = "a15tyg",
                            PhoneNumber = "0282805895",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 7, 13, 39, 24, 846, DateTimeKind.Unspecified).AddTicks(9092),
                            UserName = "Hoyt_Casper"
                        },
                        new
                        {
                            UserId = 23,
                            CreatedDate = new DateTime(2024, 9, 8, 11, 15, 33, 4, DateTimeKind.Unspecified).AddTicks(7384),
                            Email = "gmail.com_Jacobson@yahoo.com",
                            FullName = "Duane Mraz",
                            Password = "0gt3ul",
                            PhoneNumber = "0689041431",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 8, 11, 15, 33, 4, DateTimeKind.Unspecified).AddTicks(7384),
                            UserName = "Justus_Pagac1"
                        },
                        new
                        {
                            UserId = 24,
                            CreatedDate = new DateTime(2024, 9, 13, 13, 11, 14, 971, DateTimeKind.Unspecified).AddTicks(4944),
                            Email = "gmail.com.Rau@gmail.com",
                            FullName = "Michel Lang",
                            Password = "055zgs",
                            PhoneNumber = "0316975787",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 13, 13, 11, 14, 971, DateTimeKind.Unspecified).AddTicks(4944),
                            UserName = "Forrest.Grant27"
                        },
                        new
                        {
                            UserId = 25,
                            CreatedDate = new DateTime(2024, 9, 9, 18, 23, 7, 580, DateTimeKind.Unspecified).AddTicks(6552),
                            Email = "gmail.com44@gmail.com",
                            FullName = "Cassie Toy",
                            Password = "53c5nb",
                            PhoneNumber = "0252799967",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 9, 18, 23, 7, 580, DateTimeKind.Unspecified).AddTicks(6552),
                            UserName = "Leonardo99"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.UserDepartment", b =>
                {
                    b.Property<int>("UserDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserDepartmentId"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserDepartmentId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDepartments");

                    b.HasData(
                        new
                        {
                            UserDepartmentId = 1,
                            DepartmentId = 1,
                            UserId = 24
                        },
                        new
                        {
                            UserDepartmentId = 2,
                            DepartmentId = 3,
                            UserId = 16
                        },
                        new
                        {
                            UserDepartmentId = 3,
                            DepartmentId = 10,
                            UserId = 22
                        },
                        new
                        {
                            UserDepartmentId = 4,
                            DepartmentId = 4,
                            UserId = 10
                        },
                        new
                        {
                            UserDepartmentId = 5,
                            DepartmentId = 2,
                            UserId = 17
                        },
                        new
                        {
                            UserDepartmentId = 6,
                            DepartmentId = 3,
                            UserId = 12
                        },
                        new
                        {
                            UserDepartmentId = 7,
                            DepartmentId = 5,
                            UserId = 19
                        },
                        new
                        {
                            UserDepartmentId = 8,
                            DepartmentId = 7,
                            UserId = 19
                        },
                        new
                        {
                            UserDepartmentId = 9,
                            DepartmentId = 1,
                            UserId = 1
                        },
                        new
                        {
                            UserDepartmentId = 10,
                            DepartmentId = 7,
                            UserId = 2
                        },
                        new
                        {
                            UserDepartmentId = 11,
                            DepartmentId = 8,
                            UserId = 5
                        },
                        new
                        {
                            UserDepartmentId = 12,
                            DepartmentId = 10,
                            UserId = 15
                        },
                        new
                        {
                            UserDepartmentId = 13,
                            DepartmentId = 3,
                            UserId = 23
                        },
                        new
                        {
                            UserDepartmentId = 14,
                            DepartmentId = 1,
                            UserId = 15
                        },
                        new
                        {
                            UserDepartmentId = 15,
                            DepartmentId = 5,
                            UserId = 24
                        },
                        new
                        {
                            UserDepartmentId = 16,
                            DepartmentId = 9,
                            UserId = 14
                        },
                        new
                        {
                            UserDepartmentId = 17,
                            DepartmentId = 8,
                            UserId = 10
                        },
                        new
                        {
                            UserDepartmentId = 18,
                            DepartmentId = 2,
                            UserId = 23
                        },
                        new
                        {
                            UserDepartmentId = 19,
                            DepartmentId = 4,
                            UserId = 6
                        },
                        new
                        {
                            UserDepartmentId = 20,
                            DepartmentId = 9,
                            UserId = 1
                        },
                        new
                        {
                            UserDepartmentId = 21,
                            DepartmentId = 6,
                            UserId = 20
                        },
                        new
                        {
                            UserDepartmentId = 22,
                            DepartmentId = 9,
                            UserId = 18
                        },
                        new
                        {
                            UserDepartmentId = 23,
                            DepartmentId = 9,
                            UserId = 2
                        },
                        new
                        {
                            UserDepartmentId = 24,
                            DepartmentId = 4,
                            UserId = 19
                        },
                        new
                        {
                            UserDepartmentId = 25,
                            DepartmentId = 9,
                            UserId = 23
                        },
                        new
                        {
                            UserDepartmentId = 26,
                            DepartmentId = 9,
                            UserId = 14
                        },
                        new
                        {
                            UserDepartmentId = 27,
                            DepartmentId = 9,
                            UserId = 11
                        },
                        new
                        {
                            UserDepartmentId = 28,
                            DepartmentId = 7,
                            UserId = 17
                        },
                        new
                        {
                            UserDepartmentId = 29,
                            DepartmentId = 6,
                            UserId = 14
                        },
                        new
                        {
                            UserDepartmentId = 30,
                            DepartmentId = 5,
                            UserId = 24
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.Property<int>("VehicleSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleSessionId"));

                    b.Property<DateTime>("CheckinTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckoutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GateId")
                        .HasColumnType("int");

                    b.Property<int>("SecurityID")
                        .HasColumnType("int");

                    b.Property<int>("VisitDetailId")
                        .HasColumnType("int");

                    b.HasKey("VehicleSessionId");

                    b.HasIndex("GateId");

                    b.HasIndex("SecurityID");

                    b.HasIndex("VisitDetailId");

                    b.ToTable("VehicleSessions");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSessionImage", b =>
                {
                    b.Property<int>("VehicleSessionImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleSessionImageId"));

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleSessionId")
                        .HasColumnType("int");

                    b.Property<string>("VehicleSessionImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleSessionImageId");

                    b.HasIndex("VehicleSessionId");

                    b.ToTable("VehicleSessionImages");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.Property<int>("VisitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitId"));

                    b.Property<int>("AcceptLevel")
                        .HasColumnType("int");

                    b.Property<int>("CreateById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRegister")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentReasonId")
                        .HasColumnType("int");

                    b.Property<int>("UpdateById")
                        .HasColumnType("int");

                    b.Property<int>("VisitQuantity")
                        .HasColumnType("int");

                    b.HasKey("VisitId");

                    b.HasIndex("CreateById");

                    b.HasIndex("DepartmentReasonId");

                    b.HasIndex("UpdateById");

                    b.ToTable("Visits");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.Property<int>("VisitDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitDetailId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpectedTimeIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpectedTimeOut")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("VisitDetailName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.Property<int>("VisitorId")
                        .HasColumnType("int");

                    b.HasKey("VisitDetailId");

                    b.HasIndex("VisitId");

                    b.HasIndex("VisitorId");

                    b.ToTable("VisitDetails");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitProject", b =>
                {
                    b.Property<int>("VisitProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitProjectId"));

                    b.Property<DateTime>("ExpectedTimeIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpectedTimeOut")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("QuantityOfVisit")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.Property<string>("VisitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitProjectId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("VisitId");

                    b.ToTable("VisitProjects");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.Property<int>("VisitorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorId"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CredentialCardTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CredentialsCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VisitorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitorId");

                    b.HasIndex("CredentialCardTypeId");

                    b.ToTable("Visitors");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.Property<int>("VisitorSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorSessionId"));

                    b.Property<DateTime>("CheckinTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckoutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GateId")
                        .HasColumnType("int");

                    b.Property<int>("QRCardId")
                        .HasColumnType("int");

                    b.Property<int>("SecurityID")
                        .HasColumnType("int");

                    b.Property<int>("VisitDetailId")
                        .HasColumnType("int");

                    b.HasKey("VisitorSessionId");

                    b.HasIndex("GateId");

                    b.HasIndex("QRCardId");

                    b.HasIndex("SecurityID");

                    b.HasIndex("VisitDetailId");

                    b.ToTable("VisitorSessions");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSessionsImage", b =>
                {
                    b.Property<int>("VisitorSessionsImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorSessionsImageId"));

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitorSessionId")
                        .HasColumnType("int");

                    b.HasKey("VisitorSessionsImageId");

                    b.HasIndex("VisitorSessionId");

                    b.ToTable("VisitorSessionsImages");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.DepartmentReason", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Department", "Department")
                        .WithMany("DepartmentReason")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Reason", "Reason")
                        .WithMany("DepartmentReason")
                        .HasForeignKey("ReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Reason");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.NotificationUsers", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Notification", "Notification")
                        .WithMany("NotificationUsers")
                        .HasForeignKey("NotificationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Receiver")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Sender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Project", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.User", "User")
                        .WithMany("Project")
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.QRCardStatus", "QRCardStatus")
                        .WithMany("QRCards")
                        .HasForeignKey("QRCardStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.QRCardType", "QRCardType")
                        .WithMany("QRCards")
                        .HasForeignKey("QRCardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QRCardStatus");

                    b.Navigation("QRCardType");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Role", "Role")
                        .WithMany("User")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.UserDepartment", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Department", "Department")
                        .WithMany("UserDepartment")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "User")
                        .WithMany("UserDepartment")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Gate", "Gate")
                        .WithMany("VehicleSession")
                        .HasForeignKey("GateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Security")
                        .WithMany("VehicleSession")
                        .HasForeignKey("SecurityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.VisitDetail", "VisitDetail")
                        .WithMany("VehicleSession")
                        .HasForeignKey("VisitDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gate");

                    b.Navigation("Security");

                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSessionImage", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.VehicleSession", "VehicleSession")
                        .WithMany("Images")
                        .HasForeignKey("VehicleSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.User", "CreateBy")
                        .WithMany("CreatedVisits")
                        .HasForeignKey("CreateById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.DepartmentReason", "DepartmentReason")
                        .WithMany("Visits")
                        .HasForeignKey("DepartmentReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "UpdateBy")
                        .WithMany("UpdatedVisits")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreateBy");

                    b.Navigation("DepartmentReason");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Visit", "Visit")
                        .WithMany("VisitDetail")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Visitor", "Visitor")
                        .WithMany("VisitDetail")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visit");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitProject", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Project", "Project")
                        .WithMany("VisitProject")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Visit", "Visit")
                        .WithMany("VisitProject")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.CredentialCardType", "CredentialCardType")
                        .WithMany("Visitor")
                        .HasForeignKey("CredentialCardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CredentialCardType");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Gate", "Gate")
                        .WithMany("VisitorSession")
                        .HasForeignKey("GateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.QRCard", "QRCard")
                        .WithMany("VisitorSession")
                        .HasForeignKey("QRCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Security")
                        .WithMany("VisitorSession")
                        .HasForeignKey("SecurityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.VisitDetail", "VisitDetail")
                        .WithMany("VisitorSession")
                        .HasForeignKey("VisitDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gate");

                    b.Navigation("QRCard");

                    b.Navigation("Security");

                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSessionsImage", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.VisitorSession", "VisitorSession")
                        .WithMany("Images")
                        .HasForeignKey("VisitorSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.CredentialCardType", b =>
                {
                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Department", b =>
                {
                    b.Navigation("DepartmentReason");

                    b.Navigation("UserDepartment");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.DepartmentReason", b =>
                {
                    b.Navigation("Visits");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Gate", b =>
                {
                    b.Navigation("VehicleSession");

                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Notification", b =>
                {
                    b.Navigation("NotificationUsers");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Project", b =>
                {
                    b.Navigation("VisitProject");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardStatus", b =>
                {
                    b.Navigation("QRCards");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardType", b =>
                {
                    b.Navigation("QRCards");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Reason", b =>
                {
                    b.Navigation("DepartmentReason");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Role", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.Navigation("CreatedVisits");

                    b.Navigation("Project");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("SentNotifications");

                    b.Navigation("UpdatedVisits");

                    b.Navigation("UserDepartment");

                    b.Navigation("VehicleSession");

                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.Navigation("VisitDetail");

                    b.Navigation("VisitProject");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.Navigation("VehicleSession");

                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
