// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SecurityGateApv.Infras.DBContext;

#nullable disable

namespace SecurityGateApv.Infras.Migrations
{
    [DbContext(typeof(SecurityGateApvDbContext))]
    [Migration("20240919061422_SeedData_8")]
    partial class SeedData_8
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SecurityGateApv.Domain.Models.CredentialCardType", b =>
                {
                    b.Property<int>("CredentialCardTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CredentialCardTypeId"));

                    b.Property<string>("CredentialCardTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CredentialCardTypeId");

                    b.ToTable("CredentialCardTypes");

                    b.HasData(
                        new
                        {
                            CredentialCardTypeId = 1,
                            CredentialCardTypeName = "Giấy phép lái xe"
                        },
                        new
                        {
                            CredentialCardTypeId = 2,
                            CredentialCardTypeName = "Giấy phép lái xe"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<int>("AcceptLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            AcceptLevel = 5,
                            CreateDate = new DateTime(2024, 9, 9, 11, 1, 22, 191, DateTimeKind.Utc).AddTicks(8357),
                            DepartmentName = "Phòng R&D",
                            Description = "Laborum magni praesentium et veritatis mollitia qui eveniet.",
                            UpdatedDate = new DateTime(2024, 9, 9, 11, 1, 22, 191, DateTimeKind.Utc).AddTicks(8357)
                        },
                        new
                        {
                            DepartmentId = 2,
                            AcceptLevel = 2,
                            CreateDate = new DateTime(2024, 9, 17, 10, 55, 33, 810, DateTimeKind.Utc).AddTicks(5631),
                            DepartmentName = "Phòng Chăm sóc khách hàng",
                            Description = "Occaecati dolores ea cum nulla numquam.",
                            UpdatedDate = new DateTime(2024, 9, 17, 10, 55, 33, 810, DateTimeKind.Utc).AddTicks(5631)
                        },
                        new
                        {
                            DepartmentId = 3,
                            AcceptLevel = 4,
                            CreateDate = new DateTime(2024, 9, 6, 9, 10, 14, 34, DateTimeKind.Utc).AddTicks(3713),
                            DepartmentName = "Phòng Kinh doanh",
                            Description = "Explicabo fugit eum eum laudantium ratione voluptatem quo.",
                            UpdatedDate = new DateTime(2024, 9, 6, 9, 10, 14, 34, DateTimeKind.Utc).AddTicks(3713)
                        },
                        new
                        {
                            DepartmentId = 4,
                            AcceptLevel = 3,
                            CreateDate = new DateTime(2024, 9, 8, 10, 30, 12, 197, DateTimeKind.Utc).AddTicks(9466),
                            DepartmentName = "Phòng R&D",
                            Description = "Repellat eos nihil placeat eos id dolores.",
                            UpdatedDate = new DateTime(2024, 9, 8, 10, 30, 12, 197, DateTimeKind.Utc).AddTicks(9466)
                        },
                        new
                        {
                            DepartmentId = 5,
                            AcceptLevel = 4,
                            CreateDate = new DateTime(2024, 9, 3, 15, 12, 42, 839, DateTimeKind.Utc).AddTicks(1667),
                            DepartmentName = "Phòng Sản xuất",
                            Description = "Impedit esse numquam officiis ipsum cum saepe est ratione.",
                            UpdatedDate = new DateTime(2024, 9, 3, 15, 12, 42, 839, DateTimeKind.Utc).AddTicks(1667)
                        },
                        new
                        {
                            DepartmentId = 6,
                            AcceptLevel = 3,
                            CreateDate = new DateTime(2024, 9, 2, 16, 1, 12, 567, DateTimeKind.Utc).AddTicks(3117),
                            DepartmentName = "Phòng Marketing",
                            Description = "Voluptas porro officia ipsa laborum aliquam cumque.",
                            UpdatedDate = new DateTime(2024, 9, 2, 16, 1, 12, 567, DateTimeKind.Utc).AddTicks(3117)
                        },
                        new
                        {
                            DepartmentId = 7,
                            AcceptLevel = 4,
                            CreateDate = new DateTime(2024, 9, 18, 8, 31, 54, 675, DateTimeKind.Utc).AddTicks(1257),
                            DepartmentName = "Phòng Chăm sóc khách hàng",
                            Description = "Consequatur aut blanditiis consequatur quia assumenda odio repellendus vero.",
                            UpdatedDate = new DateTime(2024, 9, 18, 8, 31, 54, 675, DateTimeKind.Utc).AddTicks(1257)
                        },
                        new
                        {
                            DepartmentId = 8,
                            AcceptLevel = 2,
                            CreateDate = new DateTime(2024, 9, 15, 23, 52, 19, 474, DateTimeKind.Utc).AddTicks(1254),
                            DepartmentName = "Phòng Pháp chế",
                            Description = "Consequatur reprehenderit aperiam nobis veniam harum tenetur vel est.",
                            UpdatedDate = new DateTime(2024, 9, 15, 23, 52, 19, 474, DateTimeKind.Utc).AddTicks(1254)
                        },
                        new
                        {
                            DepartmentId = 9,
                            AcceptLevel = 5,
                            CreateDate = new DateTime(2024, 9, 4, 17, 56, 25, 939, DateTimeKind.Utc).AddTicks(2452),
                            DepartmentName = "Phòng Marketing",
                            Description = "Cum delectus nobis perferendis commodi dolores.",
                            UpdatedDate = new DateTime(2024, 9, 4, 17, 56, 25, 939, DateTimeKind.Utc).AddTicks(2452)
                        },
                        new
                        {
                            DepartmentId = 10,
                            AcceptLevel = 5,
                            CreateDate = new DateTime(2024, 9, 14, 13, 33, 26, 302, DateTimeKind.Utc).AddTicks(6813),
                            DepartmentName = "Phòng Marketing",
                            Description = "Suscipit consectetur sint consequatur.",
                            UpdatedDate = new DateTime(2024, 9, 14, 13, 33, 26, 302, DateTimeKind.Utc).AddTicks(6813)
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.DepartmentReason", b =>
                {
                    b.Property<int>("DepartmentReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentReasonId"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReasonId")
                        .HasColumnType("int");

                    b.HasKey("DepartmentReasonId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ReasonId");

                    b.ToTable("DepartmentReasons");

                    b.HasData(
                        new
                        {
                            DepartmentReasonId = 1,
                            DepartmentId = 6,
                            Description = "Excepturi a doloribus.",
                            Name = "Licensed Cotton Pants",
                            ReasonId = 3
                        },
                        new
                        {
                            DepartmentReasonId = 2,
                            DepartmentId = 6,
                            Description = "Iste vel vitae quia rerum.",
                            Name = "Licensed Wooden Bacon",
                            ReasonId = 3
                        },
                        new
                        {
                            DepartmentReasonId = 3,
                            DepartmentId = 4,
                            Description = "Excepturi odio aut impedit sapiente quis sunt rerum qui.",
                            Name = "Fantastic Wooden Bacon",
                            ReasonId = 3
                        },
                        new
                        {
                            DepartmentReasonId = 4,
                            DepartmentId = 2,
                            Description = "Aperiam ea sapiente necessitatibus saepe minus est qui.",
                            Name = "Handcrafted Granite Bacon",
                            ReasonId = 4
                        },
                        new
                        {
                            DepartmentReasonId = 5,
                            DepartmentId = 9,
                            Description = "Quidem illum neque voluptas commodi sit molestiae a rerum in.",
                            Name = "Refined Plastic Pizza",
                            ReasonId = 2
                        },
                        new
                        {
                            DepartmentReasonId = 6,
                            DepartmentId = 10,
                            Description = "Et sint asperiores voluptas ut necessitatibus enim deleniti est.",
                            Name = "Intelligent Concrete Shirt",
                            ReasonId = 1
                        },
                        new
                        {
                            DepartmentReasonId = 7,
                            DepartmentId = 7,
                            Description = "Consequatur eos totam perspiciatis cum eos explicabo.",
                            Name = "Handmade Cotton Bike",
                            ReasonId = 5
                        },
                        new
                        {
                            DepartmentReasonId = 8,
                            DepartmentId = 3,
                            Description = "Dolores voluptas ut dicta dolores earum quis voluptates iste.",
                            Name = "Rustic Rubber Pants",
                            ReasonId = 1
                        },
                        new
                        {
                            DepartmentReasonId = 9,
                            DepartmentId = 8,
                            Description = "Omnis repellendus vitae et in.",
                            Name = "Sleek Soft Salad",
                            ReasonId = 5
                        },
                        new
                        {
                            DepartmentReasonId = 10,
                            DepartmentId = 5,
                            Description = "Ratione autem et omnis cumque.",
                            Name = "Generic Plastic Sausages",
                            ReasonId = 1
                        },
                        new
                        {
                            DepartmentReasonId = 11,
                            DepartmentId = 9,
                            Description = "Totam qui corrupti.",
                            Name = "Tasty Soft Computer",
                            ReasonId = 2
                        },
                        new
                        {
                            DepartmentReasonId = 12,
                            DepartmentId = 5,
                            Description = "Nihil dolor fugit ipsam aut natus.",
                            Name = "Handmade Steel Car",
                            ReasonId = 5
                        },
                        new
                        {
                            DepartmentReasonId = 13,
                            DepartmentId = 9,
                            Description = "Maxime maxime modi doloremque assumenda exercitationem.",
                            Name = "Tasty Cotton Cheese",
                            ReasonId = 3
                        },
                        new
                        {
                            DepartmentReasonId = 14,
                            DepartmentId = 3,
                            Description = "Quas esse aut et eligendi facilis laudantium iste.",
                            Name = "Gorgeous Soft Tuna",
                            ReasonId = 1
                        },
                        new
                        {
                            DepartmentReasonId = 15,
                            DepartmentId = 10,
                            Description = "Sed non voluptas dolorum dolore dolores.",
                            Name = "Gorgeous Steel Keyboard",
                            ReasonId = 3
                        },
                        new
                        {
                            DepartmentReasonId = 16,
                            DepartmentId = 7,
                            Description = "Illo voluptas deleniti dolorem libero dolores.",
                            Name = "Intelligent Concrete Fish",
                            ReasonId = 2
                        },
                        new
                        {
                            DepartmentReasonId = 17,
                            DepartmentId = 10,
                            Description = "Et quia dolorem et eligendi et dolore modi beatae quaerat.",
                            Name = "Awesome Cotton Computer",
                            ReasonId = 4
                        },
                        new
                        {
                            DepartmentReasonId = 18,
                            DepartmentId = 3,
                            Description = "Itaque dolores tempore et provident.",
                            Name = "Ergonomic Wooden Chips",
                            ReasonId = 3
                        },
                        new
                        {
                            DepartmentReasonId = 19,
                            DepartmentId = 9,
                            Description = "Sint est alias tenetur facilis eveniet cupiditate.",
                            Name = "Practical Fresh Table",
                            ReasonId = 4
                        },
                        new
                        {
                            DepartmentReasonId = 20,
                            DepartmentId = 6,
                            Description = "Temporibus molestiae ex.",
                            Name = "Handmade Cotton Sausages",
                            ReasonId = 5
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Gate", b =>
                {
                    b.Property<int>("GateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GateId"));

                    b.Property<string>("GateCoordinate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GateId");

                    b.ToTable("Gates");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.NotificationUsers", b =>
                {
                    b.Property<int>("NotificationUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationUserID"));

                    b.Property<int>("NotificationID")
                        .HasColumnType("int");

                    b.Property<bool>("ReadStatus")
                        .HasColumnType("bit");

                    b.Property<int>("ReceiverID")
                        .HasColumnType("int");

                    b.Property<int>("SenderID")
                        .HasColumnType("int");

                    b.HasKey("NotificationUserID");

                    b.HasIndex("NotificationID");

                    b.HasIndex("ReceiverID");

                    b.HasIndex("SenderID");

                    b.ToTable("NotificationUsers");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<int>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("ProjectId");

                    b.HasIndex("CreateBy");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 16, 2, 25, 21, 126, DateTimeKind.Unspecified).AddTicks(9920),
                            ProjectName = "Handcrafted Wooden Chicken",
                            Status = true
                        },
                        new
                        {
                            ProjectId = 2,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 15, 8, 27, 40, 748, DateTimeKind.Unspecified).AddTicks(7721),
                            ProjectName = "Handcrafted Granite Sausages",
                            Status = false
                        },
                        new
                        {
                            ProjectId = 3,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 7, 9, 23, 36, 540, DateTimeKind.Unspecified).AddTicks(4358),
                            ProjectName = "Sleek Steel Cheese",
                            Status = false
                        },
                        new
                        {
                            ProjectId = 4,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 5, 12, 40, 40, 43, DateTimeKind.Unspecified).AddTicks(5012),
                            ProjectName = "Generic Soft Chips",
                            Status = true
                        },
                        new
                        {
                            ProjectId = 5,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 12, 19, 5, 43, 698, DateTimeKind.Unspecified).AddTicks(682),
                            ProjectName = "Handcrafted Fresh Chips",
                            Status = false
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.Property<int>("QRCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardId"));

                    b.Property<Guid>("CardGuidId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastCancelDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QRCardStatusId")
                        .HasColumnType("int");

                    b.Property<int>("QRCardTypeId")
                        .HasColumnType("int");

                    b.HasKey("QRCardId");

                    b.HasIndex("QRCardStatusId");

                    b.HasIndex("QRCardTypeId");

                    b.ToTable("QRCards");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardStatus", b =>
                {
                    b.Property<int>("QRCardStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardStatusId"));

                    b.Property<int>("StatusName")
                        .HasColumnType("int");

                    b.Property<int>("StatusNumber")
                        .HasColumnType("int");

                    b.HasKey("QRCardStatusId");

                    b.ToTable("QRCardStatus");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardType", b =>
                {
                    b.Property<int>("QRCardTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardTypeId"));

                    b.Property<string>("CardTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QRCardTypeId");

                    b.ToTable("QRCardType");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Reason", b =>
                {
                    b.Property<int>("ReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReasonId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReasonId");

                    b.ToTable("Reasons");

                    b.HasData(
                        new
                        {
                            ReasonId = 1,
                            Description = "Iste mollitia ex.",
                            ReasonName = "Refined Frozen Chips"
                        },
                        new
                        {
                            ReasonId = 2,
                            Description = "Vel in eos reiciendis expedita qui suscipit ut expedita fugiat.",
                            ReasonName = "Rustic Soft Towels"
                        },
                        new
                        {
                            ReasonId = 3,
                            Description = "Hic sed molestias rerum laboriosam nisi sed quod.",
                            ReasonName = "Small Metal Tuna"
                        },
                        new
                        {
                            ReasonId = 4,
                            Description = "Vero aut autem.",
                            ReasonName = "Generic Granite Ball"
                        },
                        new
                        {
                            ReasonId = 5,
                            Description = "Fugiat nam amet dolores.",
                            ReasonName = "Practical Concrete Bacon"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Description = "Quản lý toàn bộ hệ thống",
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            Description = "Quản lý toàn bộ công ty",
                            RoleName = "Manager"
                        },
                        new
                        {
                            RoleId = 3,
                            Description = "Quản lý toàn bộ phòng ban",
                            RoleName = "DepartmentManaager"
                        },
                        new
                        {
                            RoleId = 4,
                            Description = "Tạo và quản lý khách ra vào của phòng ban",
                            RoleName = "Staff"
                        },
                        new
                        {
                            RoleId = 5,
                            Description = "Quản lý khách ra vào tại cổng",
                            RoleName = "Security"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedDate = new DateTime(2024, 3, 19, 6, 14, 21, 534, DateTimeKind.Utc).AddTicks(2828),
                            Email = "admin1@example.com",
                            FullName = "Admin One",
                            Password = "123",
                            PhoneNumber = "0123456789",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 19, 6, 14, 21, 534, DateTimeKind.Utc).AddTicks(2835),
                            UserName = "admin1"
                        },
                        new
                        {
                            UserId = 2,
                            CreatedDate = new DateTime(2024, 6, 19, 6, 14, 21, 534, DateTimeKind.Utc).AddTicks(2838),
                            Email = "manager1@example.com",
                            FullName = "Manager One",
                            Password = "123",
                            PhoneNumber = "0987654321",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 19, 6, 14, 21, 534, DateTimeKind.Utc).AddTicks(2839),
                            UserName = "manager1"
                        },
                        new
                        {
                            UserId = 3,
                            CreatedDate = new DateTime(2024, 7, 19, 6, 14, 21, 534, DateTimeKind.Utc).AddTicks(2841),
                            Email = "employee1@example.com",
                            FullName = "Department Manager One",
                            Password = "123",
                            PhoneNumber = "0112223334",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 19, 6, 14, 21, 534, DateTimeKind.Utc).AddTicks(2841),
                            UserName = "DM1"
                        },
                        new
                        {
                            UserId = 4,
                            CreatedDate = new DateTime(2024, 8, 19, 6, 14, 21, 534, DateTimeKind.Utc).AddTicks(2843),
                            Email = "hr1@example.com",
                            FullName = "Staff One",
                            Password = "123",
                            PhoneNumber = "0223334445",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 19, 6, 14, 21, 534, DateTimeKind.Utc).AddTicks(2843),
                            UserName = "Staff1"
                        },
                        new
                        {
                            UserId = 5,
                            CreatedDate = new DateTime(2024, 5, 19, 6, 14, 21, 534, DateTimeKind.Utc).AddTicks(2845),
                            Email = "it1@example.com",
                            FullName = "Security One",
                            Password = "123",
                            PhoneNumber = "0334445556",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 19, 6, 14, 21, 534, DateTimeKind.Utc).AddTicks(2845),
                            UserName = "Security1"
                        },
                        new
                        {
                            UserId = 6,
                            CreatedDate = new DateTime(2024, 9, 4, 5, 21, 59, 816, DateTimeKind.Unspecified).AddTicks(6235),
                            Email = "gmail.com.Pfannerstill26@yahoo.com",
                            FullName = "Tianna Morar",
                            Password = "z4p1x1",
                            PhoneNumber = "0639717046",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 4, 5, 21, 59, 816, DateTimeKind.Unspecified).AddTicks(6235),
                            UserName = "Colton_Bogisich"
                        },
                        new
                        {
                            UserId = 7,
                            CreatedDate = new DateTime(2024, 9, 7, 8, 0, 35, 426, DateTimeKind.Unspecified).AddTicks(3586),
                            Email = "gmail.com75@yahoo.com",
                            FullName = "Archibald Bashirian",
                            Password = "itgsqm",
                            PhoneNumber = "0677018812",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 7, 8, 0, 35, 426, DateTimeKind.Unspecified).AddTicks(3586),
                            UserName = "Johnpaul.Murphy"
                        },
                        new
                        {
                            UserId = 8,
                            CreatedDate = new DateTime(2024, 9, 15, 2, 58, 23, 112, DateTimeKind.Unspecified).AddTicks(4428),
                            Email = "gmail.com.OKeefe@yahoo.com",
                            FullName = "Joy Gutmann",
                            Password = "yu5xpw",
                            PhoneNumber = "0136627500",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 15, 2, 58, 23, 112, DateTimeKind.Unspecified).AddTicks(4428),
                            UserName = "Deron94"
                        },
                        new
                        {
                            UserId = 9,
                            CreatedDate = new DateTime(2024, 9, 3, 21, 19, 17, 546, DateTimeKind.Unspecified).AddTicks(1055),
                            Email = "gmail.com.Willms@gmail.com",
                            FullName = "Forrest Koss",
                            Password = "ooakrz",
                            PhoneNumber = "0132140761",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 3, 21, 19, 17, 546, DateTimeKind.Unspecified).AddTicks(1055),
                            UserName = "Doyle_Vandervort33"
                        },
                        new
                        {
                            UserId = 10,
                            CreatedDate = new DateTime(2024, 9, 16, 17, 18, 58, 501, DateTimeKind.Unspecified).AddTicks(789),
                            Email = "gmail.com.Mertz5@yahoo.com",
                            FullName = "Emmitt Kulas",
                            Password = "386dr1",
                            PhoneNumber = "0573363134",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 16, 17, 18, 58, 501, DateTimeKind.Unspecified).AddTicks(789),
                            UserName = "Melany_Reynolds7"
                        },
                        new
                        {
                            UserId = 11,
                            CreatedDate = new DateTime(2024, 9, 1, 16, 57, 5, 910, DateTimeKind.Unspecified).AddTicks(7667),
                            Email = "gmail.com_Bechtelar53@yahoo.com",
                            FullName = "Kenya Cartwright",
                            Password = "rv7chs",
                            PhoneNumber = "0977068674",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 1, 16, 57, 5, 910, DateTimeKind.Unspecified).AddTicks(7667),
                            UserName = "Alaina.Kilback87"
                        },
                        new
                        {
                            UserId = 12,
                            CreatedDate = new DateTime(2024, 9, 12, 10, 59, 32, 813, DateTimeKind.Unspecified).AddTicks(8052),
                            Email = "gmail.com_Mueller@hotmail.com",
                            FullName = "Emmett Cronin",
                            Password = "5v1nv7",
                            PhoneNumber = "0507056976",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 12, 10, 59, 32, 813, DateTimeKind.Unspecified).AddTicks(8052),
                            UserName = "Keith.Kshlerin"
                        },
                        new
                        {
                            UserId = 13,
                            CreatedDate = new DateTime(2024, 9, 8, 12, 17, 31, 158, DateTimeKind.Unspecified).AddTicks(1285),
                            Email = "gmail.com.Grimes19@yahoo.com",
                            FullName = "Hilton Gaylord",
                            Password = "dh8ctr",
                            PhoneNumber = "0642083663",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 8, 12, 17, 31, 158, DateTimeKind.Unspecified).AddTicks(1285),
                            UserName = "Rashad_Terry17"
                        },
                        new
                        {
                            UserId = 14,
                            CreatedDate = new DateTime(2024, 9, 9, 13, 19, 19, 6, DateTimeKind.Unspecified).AddTicks(6596),
                            Email = "gmail.com.Koss74@hotmail.com",
                            FullName = "Amir Schimmel",
                            Password = "69bayo",
                            PhoneNumber = "0311867729",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 9, 13, 19, 19, 6, DateTimeKind.Unspecified).AddTicks(6596),
                            UserName = "Tia_Kuphal"
                        },
                        new
                        {
                            UserId = 15,
                            CreatedDate = new DateTime(2024, 9, 9, 16, 45, 9, 221, DateTimeKind.Unspecified).AddTicks(6610),
                            Email = "gmail.com.Denesik@hotmail.com",
                            FullName = "Haleigh Emard",
                            Password = "m008e5",
                            PhoneNumber = "0532596496",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 9, 16, 45, 9, 221, DateTimeKind.Unspecified).AddTicks(6610),
                            UserName = "Brayan_Goodwin71"
                        },
                        new
                        {
                            UserId = 16,
                            CreatedDate = new DateTime(2024, 9, 15, 18, 11, 36, 887, DateTimeKind.Unspecified).AddTicks(9894),
                            Email = "gmail.com13@yahoo.com",
                            FullName = "Emile Runte",
                            Password = "y853yw",
                            PhoneNumber = "0398748470",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 15, 18, 11, 36, 887, DateTimeKind.Unspecified).AddTicks(9894),
                            UserName = "Jordan.Keebler72"
                        },
                        new
                        {
                            UserId = 17,
                            CreatedDate = new DateTime(2024, 9, 17, 10, 16, 43, 658, DateTimeKind.Unspecified).AddTicks(3951),
                            Email = "gmail.com.Franecki@gmail.com",
                            FullName = "Arnold Kling",
                            Password = "ym9w0m",
                            PhoneNumber = "0697452871",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 17, 10, 16, 43, 658, DateTimeKind.Unspecified).AddTicks(3951),
                            UserName = "Loraine_Glover"
                        },
                        new
                        {
                            UserId = 18,
                            CreatedDate = new DateTime(2024, 9, 3, 9, 44, 43, 2, DateTimeKind.Unspecified).AddTicks(5951),
                            Email = "gmail.com.Hodkiewicz@yahoo.com",
                            FullName = "America Conroy",
                            Password = "lb4nwt",
                            PhoneNumber = "0878186267",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 3, 9, 44, 43, 2, DateTimeKind.Unspecified).AddTicks(5951),
                            UserName = "Ora90"
                        },
                        new
                        {
                            UserId = 19,
                            CreatedDate = new DateTime(2024, 9, 10, 7, 20, 44, 259, DateTimeKind.Unspecified).AddTicks(5716),
                            Email = "gmail.com.Collier@gmail.com",
                            FullName = "Myah Metz",
                            Password = "xgv3ix",
                            PhoneNumber = "0627783284",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 10, 7, 20, 44, 259, DateTimeKind.Unspecified).AddTicks(5716),
                            UserName = "Kurtis.Ritchie91"
                        },
                        new
                        {
                            UserId = 20,
                            CreatedDate = new DateTime(2024, 9, 6, 21, 35, 14, 893, DateTimeKind.Unspecified).AddTicks(3456),
                            Email = "gmail.com.Trantow@hotmail.com",
                            FullName = "Armando Koss",
                            Password = "qyvq6n",
                            PhoneNumber = "0176986915",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 6, 21, 35, 14, 893, DateTimeKind.Unspecified).AddTicks(3456),
                            UserName = "Myrna_Boehm64"
                        },
                        new
                        {
                            UserId = 21,
                            CreatedDate = new DateTime(2024, 9, 5, 17, 58, 47, 110, DateTimeKind.Unspecified).AddTicks(7961),
                            Email = "gmail.com.Bruen88@hotmail.com",
                            FullName = "Collin Bashirian",
                            Password = "qpk87b",
                            PhoneNumber = "0915617378",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 5, 17, 58, 47, 110, DateTimeKind.Unspecified).AddTicks(7961),
                            UserName = "Benjamin34"
                        },
                        new
                        {
                            UserId = 22,
                            CreatedDate = new DateTime(2024, 9, 2, 16, 8, 32, 765, DateTimeKind.Unspecified).AddTicks(5723),
                            Email = "gmail.com_Green74@yahoo.com",
                            FullName = "Ezequiel Hansen",
                            Password = "q5no6q",
                            PhoneNumber = "0366177050",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 2, 16, 8, 32, 765, DateTimeKind.Unspecified).AddTicks(5723),
                            UserName = "Gene.Bartoletti84"
                        },
                        new
                        {
                            UserId = 23,
                            CreatedDate = new DateTime(2024, 9, 8, 10, 14, 55, 311, DateTimeKind.Unspecified).AddTicks(5929),
                            Email = "gmail.com73@gmail.com",
                            FullName = "Hillary Predovic",
                            Password = "p1ek63",
                            PhoneNumber = "0318602712",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 8, 10, 14, 55, 311, DateTimeKind.Unspecified).AddTicks(5929),
                            UserName = "Alysa75"
                        },
                        new
                        {
                            UserId = 24,
                            CreatedDate = new DateTime(2024, 9, 17, 20, 41, 21, 335, DateTimeKind.Unspecified).AddTicks(722),
                            Email = "gmail.com.Emmerich26@gmail.com",
                            FullName = "Henderson Huels",
                            Password = "0t1m3d",
                            PhoneNumber = "0451636146",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 17, 20, 41, 21, 335, DateTimeKind.Unspecified).AddTicks(722),
                            UserName = "Yoshiko_Treutel"
                        },
                        new
                        {
                            UserId = 25,
                            CreatedDate = new DateTime(2024, 9, 15, 18, 51, 10, 323, DateTimeKind.Unspecified).AddTicks(2541),
                            Email = "gmail.com.Pagac@yahoo.com",
                            FullName = "Alec Skiles",
                            Password = "m3yogp",
                            PhoneNumber = "0382900756",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 15, 18, 51, 10, 323, DateTimeKind.Unspecified).AddTicks(2541),
                            UserName = "Chance.Hermiston54"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.UserDepartment", b =>
                {
                    b.Property<int>("UserDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserDepartmentId"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserDepartmentId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDepartments");

                    b.HasData(
                        new
                        {
                            UserDepartmentId = 1,
                            DepartmentId = 3,
                            UserId = 19
                        },
                        new
                        {
                            UserDepartmentId = 2,
                            DepartmentId = 7,
                            UserId = 6
                        },
                        new
                        {
                            UserDepartmentId = 3,
                            DepartmentId = 3,
                            UserId = 23
                        },
                        new
                        {
                            UserDepartmentId = 4,
                            DepartmentId = 5,
                            UserId = 2
                        },
                        new
                        {
                            UserDepartmentId = 5,
                            DepartmentId = 8,
                            UserId = 22
                        },
                        new
                        {
                            UserDepartmentId = 6,
                            DepartmentId = 7,
                            UserId = 6
                        },
                        new
                        {
                            UserDepartmentId = 7,
                            DepartmentId = 7,
                            UserId = 9
                        },
                        new
                        {
                            UserDepartmentId = 8,
                            DepartmentId = 5,
                            UserId = 17
                        },
                        new
                        {
                            UserDepartmentId = 9,
                            DepartmentId = 5,
                            UserId = 21
                        },
                        new
                        {
                            UserDepartmentId = 10,
                            DepartmentId = 8,
                            UserId = 1
                        },
                        new
                        {
                            UserDepartmentId = 11,
                            DepartmentId = 5,
                            UserId = 21
                        },
                        new
                        {
                            UserDepartmentId = 12,
                            DepartmentId = 9,
                            UserId = 24
                        },
                        new
                        {
                            UserDepartmentId = 13,
                            DepartmentId = 1,
                            UserId = 6
                        },
                        new
                        {
                            UserDepartmentId = 14,
                            DepartmentId = 6,
                            UserId = 7
                        },
                        new
                        {
                            UserDepartmentId = 15,
                            DepartmentId = 2,
                            UserId = 11
                        },
                        new
                        {
                            UserDepartmentId = 16,
                            DepartmentId = 2,
                            UserId = 17
                        },
                        new
                        {
                            UserDepartmentId = 17,
                            DepartmentId = 6,
                            UserId = 21
                        },
                        new
                        {
                            UserDepartmentId = 18,
                            DepartmentId = 10,
                            UserId = 16
                        },
                        new
                        {
                            UserDepartmentId = 19,
                            DepartmentId = 4,
                            UserId = 4
                        },
                        new
                        {
                            UserDepartmentId = 20,
                            DepartmentId = 7,
                            UserId = 9
                        },
                        new
                        {
                            UserDepartmentId = 21,
                            DepartmentId = 7,
                            UserId = 3
                        },
                        new
                        {
                            UserDepartmentId = 22,
                            DepartmentId = 5,
                            UserId = 2
                        },
                        new
                        {
                            UserDepartmentId = 23,
                            DepartmentId = 8,
                            UserId = 6
                        },
                        new
                        {
                            UserDepartmentId = 24,
                            DepartmentId = 9,
                            UserId = 4
                        },
                        new
                        {
                            UserDepartmentId = 25,
                            DepartmentId = 9,
                            UserId = 22
                        },
                        new
                        {
                            UserDepartmentId = 26,
                            DepartmentId = 2,
                            UserId = 10
                        },
                        new
                        {
                            UserDepartmentId = 27,
                            DepartmentId = 7,
                            UserId = 16
                        },
                        new
                        {
                            UserDepartmentId = 28,
                            DepartmentId = 9,
                            UserId = 11
                        },
                        new
                        {
                            UserDepartmentId = 29,
                            DepartmentId = 7,
                            UserId = 10
                        },
                        new
                        {
                            UserDepartmentId = 30,
                            DepartmentId = 8,
                            UserId = 9
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.Property<int>("VehicleSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleSessionId"));

                    b.Property<DateTime>("CheckinTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckoutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GateId")
                        .HasColumnType("int");

                    b.Property<int>("SecurityID")
                        .HasColumnType("int");

                    b.Property<int>("VisitDetailId")
                        .HasColumnType("int");

                    b.HasKey("VehicleSessionId");

                    b.HasIndex("GateId");

                    b.HasIndex("SecurityID");

                    b.HasIndex("VisitDetailId");

                    b.ToTable("VehicleSessions");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSessionImage", b =>
                {
                    b.Property<int>("VehicleSessionImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleSessionImageId"));

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleSessionId")
                        .HasColumnType("int");

                    b.Property<string>("VehicleSessionImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleSessionImageId");

                    b.HasIndex("VehicleSessionId");

                    b.ToTable("VehicleSessionImages");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.Property<int>("VisitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitId"));

                    b.Property<int>("AcceptLevel")
                        .HasColumnType("int");

                    b.Property<int>("CreateById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRegister")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentReasonId")
                        .HasColumnType("int");

                    b.Property<int>("UpdateById")
                        .HasColumnType("int");

                    b.Property<int>("VisitQuantity")
                        .HasColumnType("int");

                    b.HasKey("VisitId");

                    b.HasIndex("CreateById");

                    b.HasIndex("DepartmentReasonId");

                    b.HasIndex("UpdateById");

                    b.ToTable("Visits");

                    b.HasData(
                        new
                        {
                            VisitId = 1,
                            AcceptLevel = 3,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 17, 9, 39, 57, 486, DateTimeKind.Unspecified).AddTicks(5561),
                            DepartmentReasonId = 5,
                            UpdateById = 4,
                            VisitQuantity = 2
                        },
                        new
                        {
                            VisitId = 2,
                            AcceptLevel = 2,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 7, 13, 7, 31, 983, DateTimeKind.Unspecified).AddTicks(8732),
                            DepartmentReasonId = 5,
                            UpdateById = 4,
                            VisitQuantity = 7
                        },
                        new
                        {
                            VisitId = 3,
                            AcceptLevel = 1,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 13, 18, 59, 41, 21, DateTimeKind.Unspecified).AddTicks(5),
                            DepartmentReasonId = 2,
                            UpdateById = 4,
                            VisitQuantity = 1
                        },
                        new
                        {
                            VisitId = 4,
                            AcceptLevel = 1,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 9, 19, 48, 37, 190, DateTimeKind.Unspecified).AddTicks(8112),
                            DepartmentReasonId = 5,
                            UpdateById = 4,
                            VisitQuantity = 4
                        },
                        new
                        {
                            VisitId = 5,
                            AcceptLevel = 4,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 6, 8, 57, 58, 787, DateTimeKind.Unspecified).AddTicks(2753),
                            DepartmentReasonId = 2,
                            UpdateById = 4,
                            VisitQuantity = 7
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.Property<int>("VisitDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitDetailId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpectedTimeIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpectedTimeOut")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("VisitDetailName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.Property<int>("VisitorId")
                        .HasColumnType("int");

                    b.HasKey("VisitDetailId");

                    b.HasIndex("VisitId");

                    b.HasIndex("VisitorId");

                    b.ToTable("VisitDetails");

                    b.HasData(
                        new
                        {
                            VisitDetailId = 1,
                            Description = "Est in sit doloribus eius officia quos. Minima autem rerum. Et voluptas non voluptate ratione est.",
                            ExpectedTimeIn = new DateTime(2025, 5, 19, 21, 27, 21, 765, DateTimeKind.Local).AddTicks(2665),
                            ExpectedTimeOut = new DateTime(2025, 2, 23, 17, 46, 54, 855, DateTimeKind.Local).AddTicks(2012),
                            Status = true,
                            VisitDetailName = "Generic Granite Table",
                            VisitId = 3,
                            VisitorId = 6
                        },
                        new
                        {
                            VisitDetailId = 2,
                            Description = "Facilis enim nulla enim sit doloremque fuga nihil et sunt. Assumenda omnis odio fugit quaerat voluptates ipsam minus. Quaerat fugiat maiores praesentium natus incidunt consequatur quo et. Et ad iure.",
                            ExpectedTimeIn = new DateTime(2025, 2, 27, 6, 20, 36, 462, DateTimeKind.Local).AddTicks(7093),
                            ExpectedTimeOut = new DateTime(2025, 6, 1, 1, 23, 4, 344, DateTimeKind.Local).AddTicks(7484),
                            Status = true,
                            VisitDetailName = "Handcrafted Wooden Fish",
                            VisitId = 2,
                            VisitorId = 10
                        },
                        new
                        {
                            VisitDetailId = 3,
                            Description = "Aperiam expedita id modi reprehenderit sapiente. Sunt reprehenderit iusto animi ut. Occaecati tenetur neque repellendus. Alias ea omnis illo. Consectetur voluptate consequuntur sint sit non delectus itaque tenetur adipisci. Est eos quia ut voluptatum consectetur.",
                            ExpectedTimeIn = new DateTime(2025, 9, 6, 3, 34, 39, 438, DateTimeKind.Local).AddTicks(984),
                            ExpectedTimeOut = new DateTime(2025, 1, 22, 6, 27, 55, 31, DateTimeKind.Local).AddTicks(2713),
                            Status = true,
                            VisitDetailName = "Incredible Plastic Table",
                            VisitId = 5,
                            VisitorId = 3
                        },
                        new
                        {
                            VisitDetailId = 4,
                            Description = "Rem soluta dignissimos eos id quidem voluptatem est est in. Odit voluptatem atque laboriosam nihil in eum. Blanditiis ratione voluptatem excepturi id autem cupiditate. Culpa suscipit dolores doloribus rerum illo provident quia qui. Fugit velit sint autem est praesentium et harum. Hic error expedita veritatis ducimus.",
                            ExpectedTimeIn = new DateTime(2025, 9, 18, 15, 55, 15, 355, DateTimeKind.Local).AddTicks(9463),
                            ExpectedTimeOut = new DateTime(2025, 1, 2, 18, 18, 0, 192, DateTimeKind.Local).AddTicks(7799),
                            Status = false,
                            VisitDetailName = "Incredible Frozen Sausages",
                            VisitId = 1,
                            VisitorId = 4
                        },
                        new
                        {
                            VisitDetailId = 5,
                            Description = "Ad voluptatum est ut nostrum eos iste cupiditate et velit. Ab expedita consequatur expedita quae quas exercitationem consequatur. Fugit doloribus ipsam aspernatur et veritatis quaerat a. Voluptas atque maiores et id.",
                            ExpectedTimeIn = new DateTime(2025, 8, 20, 16, 22, 17, 412, DateTimeKind.Local).AddTicks(8362),
                            ExpectedTimeOut = new DateTime(2025, 8, 11, 3, 10, 37, 12, DateTimeKind.Local).AddTicks(7941),
                            Status = false,
                            VisitDetailName = "Awesome Granite Chips",
                            VisitId = 3,
                            VisitorId = 10
                        },
                        new
                        {
                            VisitDetailId = 6,
                            Description = "Velit et voluptatem molestiae sequi consectetur porro expedita quia. Veniam fugiat id harum et quo laboriosam omnis. Cupiditate occaecati ratione sapiente sunt id. Eius hic eligendi. Quis quia odit.",
                            ExpectedTimeIn = new DateTime(2025, 4, 24, 9, 22, 23, 775, DateTimeKind.Local).AddTicks(8092),
                            ExpectedTimeOut = new DateTime(2025, 5, 20, 5, 36, 20, 153, DateTimeKind.Local).AddTicks(9713),
                            Status = true,
                            VisitDetailName = "Generic Cotton Shirt",
                            VisitId = 2,
                            VisitorId = 4
                        },
                        new
                        {
                            VisitDetailId = 7,
                            Description = "Facere est laboriosam quo. Id delectus sapiente veritatis temporibus ratione fugit. Voluptatem ex ab numquam cum et voluptas cupiditate aperiam alias. Veritatis eos possimus tempora. Velit enim deleniti neque. Quae nihil at culpa rerum.",
                            ExpectedTimeIn = new DateTime(2024, 12, 30, 16, 51, 25, 550, DateTimeKind.Local).AddTicks(8785),
                            ExpectedTimeOut = new DateTime(2025, 1, 1, 16, 13, 1, 30, DateTimeKind.Local).AddTicks(1942),
                            Status = true,
                            VisitDetailName = "Awesome Steel Gloves",
                            VisitId = 3,
                            VisitorId = 5
                        },
                        new
                        {
                            VisitDetailId = 8,
                            Description = "Sit non iure quis in dicta in et itaque. Et enim soluta dolor quo molestiae rerum. Est dolores id perspiciatis. Ipsam quidem porro voluptatem cupiditate repudiandae itaque aut. Eos optio fugiat. Velit maiores ut.",
                            ExpectedTimeIn = new DateTime(2025, 8, 24, 18, 40, 9, 993, DateTimeKind.Local).AddTicks(5343),
                            ExpectedTimeOut = new DateTime(2025, 4, 9, 12, 29, 26, 230, DateTimeKind.Local).AddTicks(3098),
                            Status = true,
                            VisitDetailName = "Unbranded Frozen Bike",
                            VisitId = 2,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitDetailId = 9,
                            Description = "Odit et dolorem asperiores sapiente neque architecto ea nisi et. Quos eius ut dolorem dolorem ut. Repudiandae provident dicta similique amet corrupti eos consectetur aut maxime. Illo quidem voluptatibus.",
                            ExpectedTimeIn = new DateTime(2025, 9, 1, 15, 8, 43, 990, DateTimeKind.Local).AddTicks(6744),
                            ExpectedTimeOut = new DateTime(2025, 8, 21, 0, 39, 35, 370, DateTimeKind.Local).AddTicks(605),
                            Status = false,
                            VisitDetailName = "Unbranded Metal Pizza",
                            VisitId = 4,
                            VisitorId = 3
                        },
                        new
                        {
                            VisitDetailId = 10,
                            Description = "Nesciunt accusamus quo qui sed qui adipisci explicabo voluptatem. Commodi natus sunt nesciunt. Officia maxime in porro ab inventore vitae aut. Sequi deleniti voluptas ut placeat. Earum culpa qui quia. Impedit inventore doloribus quod aut beatae laudantium dolor nam architecto.",
                            ExpectedTimeIn = new DateTime(2025, 9, 16, 21, 19, 42, 823, DateTimeKind.Local).AddTicks(5501),
                            ExpectedTimeOut = new DateTime(2025, 9, 3, 1, 42, 39, 839, DateTimeKind.Local).AddTicks(5750),
                            Status = true,
                            VisitDetailName = "Practical Soft Chips",
                            VisitId = 1,
                            VisitorId = 2
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitProject", b =>
                {
                    b.Property<int>("VisitProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitProjectId"));

                    b.Property<DateTime>("ExpectedTimeIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpectedTimeOut")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("QuantityOfVisit")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.Property<string>("VisitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitProjectId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("VisitId");

                    b.ToTable("VisitProjects");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.Property<int>("VisitorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorId"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CredentialCardTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CredentialsCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VisitorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitorId");

                    b.HasIndex("CredentialCardTypeId");

                    b.ToTable("Visitors");

                    b.HasData(
                        new
                        {
                            VisitorId = 1,
                            CompanyName = "Roob and Sons",
                            CreatedDate = new DateTime(2024, 9, 13, 8, 57, 0, 750, DateTimeKind.Unspecified).AddTicks(8347),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "mjiql8i54v",
                            PhoneNumber = "0438131737",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 13, 8, 57, 0, 750, DateTimeKind.Unspecified).AddTicks(8347),
                            VisitorName = "Marguerite Kozey"
                        },
                        new
                        {
                            VisitorId = 2,
                            CompanyName = "Berge - Stiedemann",
                            CreatedDate = new DateTime(2024, 9, 17, 19, 48, 55, 280, DateTimeKind.Unspecified).AddTicks(3797),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "idxwcd1vr3",
                            PhoneNumber = "0730906586",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 17, 19, 48, 55, 280, DateTimeKind.Unspecified).AddTicks(3797),
                            VisitorName = "Isabel Davis"
                        },
                        new
                        {
                            VisitorId = 3,
                            CompanyName = "Tromp Inc",
                            CreatedDate = new DateTime(2024, 9, 11, 10, 23, 9, 113, DateTimeKind.Unspecified).AddTicks(2807),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "4n9v2sgkmg",
                            PhoneNumber = "0429779272",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 11, 10, 23, 9, 113, DateTimeKind.Unspecified).AddTicks(2807),
                            VisitorName = "David Baumbach"
                        },
                        new
                        {
                            VisitorId = 4,
                            CompanyName = "Leannon Group",
                            CreatedDate = new DateTime(2024, 9, 13, 2, 30, 34, 473, DateTimeKind.Unspecified).AddTicks(5584),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "szmgogc5jq",
                            PhoneNumber = "0169407332",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 13, 2, 30, 34, 473, DateTimeKind.Unspecified).AddTicks(5584),
                            VisitorName = "Cecile Abernathy"
                        },
                        new
                        {
                            VisitorId = 5,
                            CompanyName = "Nicolas - Hudson",
                            CreatedDate = new DateTime(2024, 9, 11, 22, 16, 54, 213, DateTimeKind.Unspecified).AddTicks(550),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "fcfx81lbm1",
                            PhoneNumber = "0979985324",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 11, 22, 16, 54, 213, DateTimeKind.Unspecified).AddTicks(550),
                            VisitorName = "Noelia Terry"
                        },
                        new
                        {
                            VisitorId = 6,
                            CompanyName = "Kassulke, Nicolas and Schmeler",
                            CreatedDate = new DateTime(2024, 9, 3, 15, 35, 51, 938, DateTimeKind.Unspecified).AddTicks(1237),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "tzb8x2yg5s",
                            PhoneNumber = "0379351955",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 3, 15, 35, 51, 938, DateTimeKind.Unspecified).AddTicks(1237),
                            VisitorName = "Olin Crist"
                        },
                        new
                        {
                            VisitorId = 7,
                            CompanyName = "Emard LLC",
                            CreatedDate = new DateTime(2024, 9, 17, 22, 6, 36, 393, DateTimeKind.Unspecified).AddTicks(1567),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "s78rfj5zrr",
                            PhoneNumber = "0408108141",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 17, 22, 6, 36, 393, DateTimeKind.Unspecified).AddTicks(1567),
                            VisitorName = "Mackenzie Hackett"
                        },
                        new
                        {
                            VisitorId = 8,
                            CompanyName = "Marks Group",
                            CreatedDate = new DateTime(2024, 9, 9, 20, 41, 7, 488, DateTimeKind.Unspecified).AddTicks(6287),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "tfg9x3y9qj",
                            PhoneNumber = "0164577087",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 9, 20, 41, 7, 488, DateTimeKind.Unspecified).AddTicks(6287),
                            VisitorName = "Lenora Altenwerth"
                        },
                        new
                        {
                            VisitorId = 9,
                            CompanyName = "Dach, Langosh and Heidenreich",
                            CreatedDate = new DateTime(2024, 9, 17, 14, 8, 4, 770, DateTimeKind.Unspecified).AddTicks(7310),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "ks2rkbzjcw",
                            PhoneNumber = "0815508392",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 17, 14, 8, 4, 770, DateTimeKind.Unspecified).AddTicks(7310),
                            VisitorName = "Arno Hackett"
                        },
                        new
                        {
                            VisitorId = 10,
                            CompanyName = "Bins LLC",
                            CreatedDate = new DateTime(2024, 9, 3, 5, 7, 39, 751, DateTimeKind.Unspecified).AddTicks(5483),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "y1a1ipugk4",
                            PhoneNumber = "0103584779",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 3, 5, 7, 39, 751, DateTimeKind.Unspecified).AddTicks(5483),
                            VisitorName = "Heidi Hessel"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.Property<int>("VisitorSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorSessionId"));

                    b.Property<DateTime>("CheckinTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckoutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GateId")
                        .HasColumnType("int");

                    b.Property<int>("QRCardId")
                        .HasColumnType("int");

                    b.Property<int>("SecurityID")
                        .HasColumnType("int");

                    b.Property<int>("VisitDetailId")
                        .HasColumnType("int");

                    b.HasKey("VisitorSessionId");

                    b.HasIndex("GateId");

                    b.HasIndex("QRCardId");

                    b.HasIndex("SecurityID");

                    b.HasIndex("VisitDetailId");

                    b.ToTable("VisitorSessions");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSessionsImage", b =>
                {
                    b.Property<int>("VisitorSessionsImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorSessionsImageId"));

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitorSessionId")
                        .HasColumnType("int");

                    b.HasKey("VisitorSessionsImageId");

                    b.HasIndex("VisitorSessionId");

                    b.ToTable("VisitorSessionsImages");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.DepartmentReason", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Department", "Department")
                        .WithMany("DepartmentReason")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Reason", "Reason")
                        .WithMany("DepartmentReason")
                        .HasForeignKey("ReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Reason");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.NotificationUsers", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Notification", "Notification")
                        .WithMany("NotificationUsers")
                        .HasForeignKey("NotificationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Receiver")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Sender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Project", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.User", "User")
                        .WithMany("Project")
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.QRCardStatus", "QRCardStatus")
                        .WithMany("QRCards")
                        .HasForeignKey("QRCardStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.QRCardType", "QRCardType")
                        .WithMany("QRCards")
                        .HasForeignKey("QRCardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QRCardStatus");

                    b.Navigation("QRCardType");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Role", "Role")
                        .WithMany("User")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.UserDepartment", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Department", "Department")
                        .WithMany("UserDepartment")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "User")
                        .WithMany("UserDepartment")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Gate", "Gate")
                        .WithMany("VehicleSession")
                        .HasForeignKey("GateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Security")
                        .WithMany("VehicleSession")
                        .HasForeignKey("SecurityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.VisitDetail", "VisitDetail")
                        .WithMany("VehicleSession")
                        .HasForeignKey("VisitDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gate");

                    b.Navigation("Security");

                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSessionImage", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.VehicleSession", "VehicleSession")
                        .WithMany("Images")
                        .HasForeignKey("VehicleSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.User", "CreateBy")
                        .WithMany("CreatedVisits")
                        .HasForeignKey("CreateById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.DepartmentReason", "DepartmentReason")
                        .WithMany("Visits")
                        .HasForeignKey("DepartmentReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "UpdateBy")
                        .WithMany("UpdatedVisits")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreateBy");

                    b.Navigation("DepartmentReason");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Visit", "Visit")
                        .WithMany("VisitDetail")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Visitor", "Visitor")
                        .WithMany("VisitDetail")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visit");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitProject", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Project", "Project")
                        .WithMany("VisitProject")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Visit", "Visit")
                        .WithMany("VisitProject")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.CredentialCardType", "CredentialCardType")
                        .WithMany("Visitor")
                        .HasForeignKey("CredentialCardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CredentialCardType");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Gate", "Gate")
                        .WithMany("VisitorSession")
                        .HasForeignKey("GateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.QRCard", "QRCard")
                        .WithMany("VisitorSession")
                        .HasForeignKey("QRCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Security")
                        .WithMany("VisitorSession")
                        .HasForeignKey("SecurityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.VisitDetail", "VisitDetail")
                        .WithMany("VisitorSession")
                        .HasForeignKey("VisitDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gate");

                    b.Navigation("QRCard");

                    b.Navigation("Security");

                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSessionsImage", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.VisitorSession", "VisitorSession")
                        .WithMany("Images")
                        .HasForeignKey("VisitorSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.CredentialCardType", b =>
                {
                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Department", b =>
                {
                    b.Navigation("DepartmentReason");

                    b.Navigation("UserDepartment");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.DepartmentReason", b =>
                {
                    b.Navigation("Visits");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Gate", b =>
                {
                    b.Navigation("VehicleSession");

                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Notification", b =>
                {
                    b.Navigation("NotificationUsers");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Project", b =>
                {
                    b.Navigation("VisitProject");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardStatus", b =>
                {
                    b.Navigation("QRCards");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardType", b =>
                {
                    b.Navigation("QRCards");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Reason", b =>
                {
                    b.Navigation("DepartmentReason");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Role", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.Navigation("CreatedVisits");

                    b.Navigation("Project");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("SentNotifications");

                    b.Navigation("UpdatedVisits");

                    b.Navigation("UserDepartment");

                    b.Navigation("VehicleSession");

                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.Navigation("VisitDetail");

                    b.Navigation("VisitProject");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.Navigation("VehicleSession");

                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
