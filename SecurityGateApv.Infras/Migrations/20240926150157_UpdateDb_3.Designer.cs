// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SecurityGateApv.Infras.DBContext;

#nullable disable

namespace SecurityGateApv.Infras.Migrations
{
    [DbContext(typeof(SecurityGateApvDbContext))]
    [Migration("20240926150157_UpdateDb_3")]
    partial class UpdateDb_3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SecurityGateApv.Domain.Models.CredentialCardType", b =>
                {
                    b.Property<int>("CredentialCardTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CredentialCardTypeId"));

                    b.Property<string>("CredentialCardTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CredentialCardTypeId");

                    b.ToTable("CredentialCardTypes");

                    b.HasData(
                        new
                        {
                            CredentialCardTypeId = 1,
                            CredentialCardTypeName = "Giấy phép lái xe"
                        },
                        new
                        {
                            CredentialCardTypeId = 2,
                            CredentialCardTypeName = "Căn cước công dân"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<int>("AcceptLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            AcceptLevel = 2,
                            CreateDate = new DateTime(2024, 9, 12, 13, 59, 47, 356, DateTimeKind.Utc).AddTicks(3102),
                            DepartmentName = "Phòng Pháp chế",
                            Description = "Quia commodi neque nam illo in dolor aut distinctio omnis.",
                            UpdatedDate = new DateTime(2024, 9, 12, 13, 59, 47, 356, DateTimeKind.Utc).AddTicks(3102)
                        },
                        new
                        {
                            DepartmentId = 2,
                            AcceptLevel = 3,
                            CreateDate = new DateTime(2024, 9, 20, 4, 56, 57, 986, DateTimeKind.Utc).AddTicks(5568),
                            DepartmentName = "Phòng R&D",
                            Description = "Qui odio doloremque maxime.",
                            UpdatedDate = new DateTime(2024, 9, 20, 4, 56, 57, 986, DateTimeKind.Utc).AddTicks(5568)
                        },
                        new
                        {
                            DepartmentId = 3,
                            AcceptLevel = 3,
                            CreateDate = new DateTime(2024, 9, 14, 5, 7, 18, 853, DateTimeKind.Utc).AddTicks(1804),
                            DepartmentName = "Phòng Kế toán",
                            Description = "Velit velit voluptas et expedita officia.",
                            UpdatedDate = new DateTime(2024, 9, 14, 5, 7, 18, 853, DateTimeKind.Utc).AddTicks(1804)
                        },
                        new
                        {
                            DepartmentId = 4,
                            AcceptLevel = 2,
                            CreateDate = new DateTime(2024, 9, 24, 22, 7, 54, 310, DateTimeKind.Utc).AddTicks(1282),
                            DepartmentName = "Phòng Hành chính",
                            Description = "Culpa quae molestiae.",
                            UpdatedDate = new DateTime(2024, 9, 24, 22, 7, 54, 310, DateTimeKind.Utc).AddTicks(1282)
                        },
                        new
                        {
                            DepartmentId = 5,
                            AcceptLevel = 3,
                            CreateDate = new DateTime(2024, 9, 13, 11, 59, 47, 45, DateTimeKind.Utc).AddTicks(5481),
                            DepartmentName = "Phòng Hành chính",
                            Description = "Explicabo esse aut et magnam.",
                            UpdatedDate = new DateTime(2024, 9, 13, 11, 59, 47, 45, DateTimeKind.Utc).AddTicks(5481)
                        },
                        new
                        {
                            DepartmentId = 6,
                            AcceptLevel = 5,
                            CreateDate = new DateTime(2024, 9, 11, 7, 2, 9, 604, DateTimeKind.Utc).AddTicks(4683),
                            DepartmentName = "Phòng Pháp chế",
                            Description = "Quibusdam veniam repellat et dignissimos.",
                            UpdatedDate = new DateTime(2024, 9, 11, 7, 2, 9, 604, DateTimeKind.Utc).AddTicks(4683)
                        },
                        new
                        {
                            DepartmentId = 7,
                            AcceptLevel = 5,
                            CreateDate = new DateTime(2024, 9, 19, 12, 29, 52, 866, DateTimeKind.Utc).AddTicks(2538),
                            DepartmentName = "Phòng Kinh doanh",
                            Description = "Facilis sint earum accusantium consectetur id placeat.",
                            UpdatedDate = new DateTime(2024, 9, 19, 12, 29, 52, 866, DateTimeKind.Utc).AddTicks(2538)
                        },
                        new
                        {
                            DepartmentId = 8,
                            AcceptLevel = 4,
                            CreateDate = new DateTime(2024, 9, 5, 4, 58, 6, 993, DateTimeKind.Utc).AddTicks(2195),
                            DepartmentName = "Phòng IT",
                            Description = "Atque eius laboriosam dicta velit velit maiores impedit adipisci.",
                            UpdatedDate = new DateTime(2024, 9, 5, 4, 58, 6, 993, DateTimeKind.Utc).AddTicks(2195)
                        },
                        new
                        {
                            DepartmentId = 9,
                            AcceptLevel = 5,
                            CreateDate = new DateTime(2024, 9, 15, 21, 14, 35, 164, DateTimeKind.Utc).AddTicks(9232),
                            DepartmentName = "Phòng Pháp chế",
                            Description = "Unde quae dignissimos ducimus sequi.",
                            UpdatedDate = new DateTime(2024, 9, 15, 21, 14, 35, 164, DateTimeKind.Utc).AddTicks(9232)
                        },
                        new
                        {
                            DepartmentId = 10,
                            AcceptLevel = 3,
                            CreateDate = new DateTime(2024, 9, 19, 7, 49, 3, 988, DateTimeKind.Utc).AddTicks(9141),
                            DepartmentName = "Phòng R&D",
                            Description = "Quia excepturi itaque reprehenderit est.",
                            UpdatedDate = new DateTime(2024, 9, 19, 7, 49, 3, 988, DateTimeKind.Utc).AddTicks(9141)
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Gate", b =>
                {
                    b.Property<int>("GateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GateId"));

                    b.Property<string>("GateCoordinate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GateId");

                    b.ToTable("Gates");

                    b.HasData(
                        new
                        {
                            GateId = 1,
                            GateCoordinate = "Ra vào trong ngày",
                            GateName = "Cổng 1"
                        },
                        new
                        {
                            GateId = 2,
                            GateCoordinate = "Ra vào trong ngày",
                            GateName = "Cổng 2"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.NotificationUsers", b =>
                {
                    b.Property<int>("NotificationUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationUserID"));

                    b.Property<int>("NotificationID")
                        .HasColumnType("int");

                    b.Property<bool>("ReadStatus")
                        .HasColumnType("bit");

                    b.Property<int>("ReceiverID")
                        .HasColumnType("int");

                    b.Property<int>("SenderID")
                        .HasColumnType("int");

                    b.HasKey("NotificationUserID");

                    b.HasIndex("NotificationID");

                    b.HasIndex("ReceiverID");

                    b.HasIndex("SenderID");

                    b.ToTable("NotificationUsers");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Process", b =>
                {
                    b.Property<int>("ProcessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProcessId"));

                    b.Property<int>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("VisitTypeId")
                        .HasColumnType("int");

                    b.HasKey("ProcessId");

                    b.HasIndex("CreateBy");

                    b.HasIndex("VisitTypeId");

                    b.ToTable("Processes");

                    b.HasData(
                        new
                        {
                            ProcessId = 1,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 24, 15, 1, 56, 562, DateTimeKind.Utc).AddTicks(4189),
                            Description = "",
                            ProcessName = "Handmade Granite Pants",
                            Status = true,
                            VisitTypeId = 1
                        },
                        new
                        {
                            ProcessId = 2,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 24, 15, 1, 56, 562, DateTimeKind.Utc).AddTicks(5948),
                            Description = "",
                            ProcessName = "Practical Steel Salad",
                            Status = true,
                            VisitTypeId = 1
                        },
                        new
                        {
                            ProcessId = 3,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 24, 15, 1, 56, 562, DateTimeKind.Utc).AddTicks(5980),
                            Description = "",
                            ProcessName = "Intelligent Metal Tuna",
                            Status = true,
                            VisitTypeId = 1
                        },
                        new
                        {
                            ProcessId = 4,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 24, 15, 1, 56, 562, DateTimeKind.Utc).AddTicks(6000),
                            Description = "",
                            ProcessName = "Practical Wooden Hat",
                            Status = false,
                            VisitTypeId = 1
                        },
                        new
                        {
                            ProcessId = 5,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 24, 15, 1, 56, 562, DateTimeKind.Utc).AddTicks(6018),
                            Description = "",
                            ProcessName = "Intelligent Fresh Chips",
                            Status = true,
                            VisitTypeId = 1
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.Property<int>("QRCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardId"));

                    b.Property<Guid>("CardGuidId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastCancelDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QRCardStatusId")
                        .HasColumnType("int");

                    b.Property<int>("QRCardTypeId")
                        .HasColumnType("int");

                    b.HasKey("QRCardId");

                    b.HasIndex("QRCardStatusId");

                    b.HasIndex("QRCardTypeId");

                    b.ToTable("QRCards");

                    b.HasData(
                        new
                        {
                            QRCardId = 1,
                            CardGuidId = new Guid("f97fb998-cac6-4f1d-8c30-df91aa3c4c8f"),
                            CreateDate = new DateTime(2024, 9, 26, 22, 1, 56, 618, DateTimeKind.Local).AddTicks(8355),
                            LastCancelDate = new DateTime(2024, 10, 26, 22, 1, 56, 618, DateTimeKind.Local).AddTicks(8355),
                            QRCardStatusId = 1,
                            QRCardTypeId = 2
                        },
                        new
                        {
                            QRCardId = 2,
                            CardGuidId = new Guid("dc7ecff1-6371-4e59-9af2-11f0c76ae65d"),
                            CreateDate = new DateTime(2024, 9, 26, 22, 1, 56, 618, DateTimeKind.Local).AddTicks(8665),
                            LastCancelDate = new DateTime(2024, 10, 26, 22, 1, 56, 618, DateTimeKind.Local).AddTicks(8665),
                            QRCardStatusId = 1,
                            QRCardTypeId = 1
                        },
                        new
                        {
                            QRCardId = 3,
                            CardGuidId = new Guid("aef735dd-844a-4c1a-99d4-d3301f47b4c3"),
                            CreateDate = new DateTime(2024, 9, 26, 22, 1, 56, 618, DateTimeKind.Local).AddTicks(8680),
                            LastCancelDate = new DateTime(2024, 10, 26, 22, 1, 56, 618, DateTimeKind.Local).AddTicks(8680),
                            QRCardStatusId = 2,
                            QRCardTypeId = 1
                        },
                        new
                        {
                            QRCardId = 4,
                            CardGuidId = new Guid("8f6e262b-3690-4954-878b-b36fad669d03"),
                            CreateDate = new DateTime(2024, 9, 26, 22, 1, 56, 618, DateTimeKind.Local).AddTicks(8688),
                            LastCancelDate = new DateTime(2024, 10, 26, 22, 1, 56, 618, DateTimeKind.Local).AddTicks(8688),
                            QRCardStatusId = 2,
                            QRCardTypeId = 2
                        },
                        new
                        {
                            QRCardId = 5,
                            CardGuidId = new Guid("74e7aff9-10b8-437d-926e-e37dc1fb192a"),
                            CreateDate = new DateTime(2024, 9, 26, 22, 1, 56, 618, DateTimeKind.Local).AddTicks(8707),
                            LastCancelDate = new DateTime(2024, 10, 26, 22, 1, 56, 618, DateTimeKind.Local).AddTicks(8707),
                            QRCardStatusId = 2,
                            QRCardTypeId = 2
                        },
                        new
                        {
                            QRCardId = 6,
                            CardGuidId = new Guid("d3d47821-a881-4653-8dd1-4aa7454e5619"),
                            CreateDate = new DateTime(2024, 9, 26, 22, 1, 56, 618, DateTimeKind.Local).AddTicks(8726),
                            LastCancelDate = new DateTime(2024, 10, 26, 22, 1, 56, 618, DateTimeKind.Local).AddTicks(8726),
                            QRCardStatusId = 2,
                            QRCardTypeId = 1
                        },
                        new
                        {
                            QRCardId = 7,
                            CardGuidId = new Guid("ae1369d3-ec84-497c-a774-381f4a1739b0"),
                            CreateDate = new DateTime(2024, 9, 26, 22, 1, 56, 618, DateTimeKind.Local).AddTicks(8734),
                            LastCancelDate = new DateTime(2024, 10, 26, 22, 1, 56, 618, DateTimeKind.Local).AddTicks(8734),
                            QRCardStatusId = 1,
                            QRCardTypeId = 2
                        },
                        new
                        {
                            QRCardId = 8,
                            CardGuidId = new Guid("3b9c3005-ef82-4cb2-a2fa-2d5b23876371"),
                            CreateDate = new DateTime(2024, 9, 26, 22, 1, 56, 618, DateTimeKind.Local).AddTicks(8740),
                            LastCancelDate = new DateTime(2024, 10, 26, 22, 1, 56, 618, DateTimeKind.Local).AddTicks(8740),
                            QRCardStatusId = 1,
                            QRCardTypeId = 1
                        },
                        new
                        {
                            QRCardId = 9,
                            CardGuidId = new Guid("666f60d5-4954-49f8-874b-53008418be01"),
                            CreateDate = new DateTime(2024, 9, 26, 22, 1, 56, 618, DateTimeKind.Local).AddTicks(8747),
                            LastCancelDate = new DateTime(2024, 10, 26, 22, 1, 56, 618, DateTimeKind.Local).AddTicks(8747),
                            QRCardStatusId = 2,
                            QRCardTypeId = 2
                        },
                        new
                        {
                            QRCardId = 10,
                            CardGuidId = new Guid("41947d75-7cb2-47af-a82d-f30c1b849649"),
                            CreateDate = new DateTime(2024, 9, 26, 22, 1, 56, 618, DateTimeKind.Local).AddTicks(8753),
                            LastCancelDate = new DateTime(2024, 10, 26, 22, 1, 56, 618, DateTimeKind.Local).AddTicks(8753),
                            QRCardStatusId = 1,
                            QRCardTypeId = 1
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardStatus", b =>
                {
                    b.Property<int>("QRCardStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardStatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusNumber")
                        .HasColumnType("int");

                    b.HasKey("QRCardStatusId");

                    b.ToTable("QRCardStatus");

                    b.HasData(
                        new
                        {
                            QRCardStatusId = 1,
                            StatusName = "Active",
                            StatusNumber = 1
                        },
                        new
                        {
                            QRCardStatusId = 2,
                            StatusName = "Inactive",
                            StatusNumber = 0
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardType", b =>
                {
                    b.Property<int>("QRCardTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardTypeId"));

                    b.Property<string>("CardTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QRCardTypeId");

                    b.ToTable("QRCardType");

                    b.HasData(
                        new
                        {
                            QRCardTypeId = 1,
                            CardTypeName = "Employee",
                            TypeDescription = "Employee QR Card"
                        },
                        new
                        {
                            QRCardTypeId = 2,
                            CardTypeName = "Visitor",
                            TypeDescription = "Visitor QR Card"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Description = "Quản lý toàn bộ hệ thống",
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            Description = "Quản lý toàn bộ công ty",
                            RoleName = "Manager"
                        },
                        new
                        {
                            RoleId = 3,
                            Description = "Quản lý toàn bộ phòng ban",
                            RoleName = "DepartmentManaager"
                        },
                        new
                        {
                            RoleId = 4,
                            Description = "Tạo và quản lý khách ra vào của phòng ban",
                            RoleName = "Staff"
                        },
                        new
                        {
                            RoleId = 5,
                            Description = "Quản lý khách ra vào tại cổng",
                            RoleName = "Security"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedDate = new DateTime(2024, 3, 26, 15, 1, 56, 540, DateTimeKind.Utc).AddTicks(4422),
                            Email = "admin1@example.com",
                            FullName = "Admin One",
                            Password = "123",
                            PhoneNumber = "0123456789",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 15, 1, 56, 540, DateTimeKind.Utc).AddTicks(4434),
                            UserName = "admin1"
                        },
                        new
                        {
                            UserId = 2,
                            CreatedDate = new DateTime(2024, 6, 26, 15, 1, 56, 540, DateTimeKind.Utc).AddTicks(4440),
                            Email = "manager1@example.com",
                            FullName = "Manager One",
                            Password = "123",
                            PhoneNumber = "0987654321",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 15, 1, 56, 540, DateTimeKind.Utc).AddTicks(4441),
                            UserName = "manager1"
                        },
                        new
                        {
                            UserId = 3,
                            CreatedDate = new DateTime(2024, 7, 26, 15, 1, 56, 540, DateTimeKind.Utc).AddTicks(4443),
                            Email = "employee1@example.com",
                            FullName = "Department Manager One",
                            Password = "123",
                            PhoneNumber = "0112223334",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 15, 1, 56, 540, DateTimeKind.Utc).AddTicks(4443),
                            UserName = "DM1"
                        },
                        new
                        {
                            UserId = 4,
                            CreatedDate = new DateTime(2024, 8, 26, 15, 1, 56, 540, DateTimeKind.Utc).AddTicks(4445),
                            Email = "hr1@example.com",
                            FullName = "Staff One",
                            Password = "123",
                            PhoneNumber = "0223334445",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 15, 1, 56, 540, DateTimeKind.Utc).AddTicks(4446),
                            UserName = "Staff1"
                        },
                        new
                        {
                            UserId = 5,
                            CreatedDate = new DateTime(2024, 5, 26, 15, 1, 56, 540, DateTimeKind.Utc).AddTicks(4448),
                            Email = "it1@example.com",
                            FullName = "Security One",
                            Password = "123",
                            PhoneNumber = "0334445556",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 15, 1, 56, 540, DateTimeKind.Utc).AddTicks(4449),
                            UserName = "Security1"
                        },
                        new
                        {
                            UserId = 6,
                            CreatedDate = new DateTime(2024, 9, 24, 20, 55, 10, 697, DateTimeKind.Unspecified).AddTicks(6479),
                            Email = "gmail.com_West7@yahoo.com",
                            FullName = "Sidney Wisozk",
                            Password = "leh5mo",
                            PhoneNumber = "0484157380",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 24, 20, 55, 10, 697, DateTimeKind.Unspecified).AddTicks(6479),
                            UserName = "Shania85"
                        },
                        new
                        {
                            UserId = 7,
                            CreatedDate = new DateTime(2024, 9, 4, 16, 27, 44, 48, DateTimeKind.Unspecified).AddTicks(5029),
                            Email = "gmail.com78@yahoo.com",
                            FullName = "Effie Gibson",
                            Password = "eoyk0s",
                            PhoneNumber = "0619697971",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 4, 16, 27, 44, 48, DateTimeKind.Unspecified).AddTicks(5029),
                            UserName = "Annette_Hand74"
                        },
                        new
                        {
                            UserId = 8,
                            CreatedDate = new DateTime(2024, 9, 14, 16, 9, 1, 533, DateTimeKind.Unspecified).AddTicks(2723),
                            Email = "gmail.com_Ritchie9@yahoo.com",
                            FullName = "Fannie Jacobi",
                            Password = "id5802",
                            PhoneNumber = "0130441622",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 14, 16, 9, 1, 533, DateTimeKind.Unspecified).AddTicks(2723),
                            UserName = "Camron88"
                        },
                        new
                        {
                            UserId = 9,
                            CreatedDate = new DateTime(2024, 9, 16, 6, 37, 7, 901, DateTimeKind.Unspecified).AddTicks(8514),
                            Email = "gmail.com_Schamberger@gmail.com",
                            FullName = "Vivian Dickens",
                            Password = "x6rg10",
                            PhoneNumber = "0908472880",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 16, 6, 37, 7, 901, DateTimeKind.Unspecified).AddTicks(8514),
                            UserName = "Alia70"
                        },
                        new
                        {
                            UserId = 10,
                            CreatedDate = new DateTime(2024, 9, 22, 22, 4, 29, 168, DateTimeKind.Unspecified).AddTicks(3459),
                            Email = "gmail.com77@gmail.com",
                            FullName = "Raoul Fritsch",
                            Password = "bs14fe",
                            PhoneNumber = "0486777244",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 22, 22, 4, 29, 168, DateTimeKind.Unspecified).AddTicks(3459),
                            UserName = "Micaela33"
                        },
                        new
                        {
                            UserId = 11,
                            CreatedDate = new DateTime(2024, 9, 21, 19, 3, 32, 971, DateTimeKind.Unspecified).AddTicks(7250),
                            Email = "gmail.com.Lockman70@yahoo.com",
                            FullName = "Jovany Reilly",
                            Password = "5bq0lj",
                            PhoneNumber = "0514227000",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 21, 19, 3, 32, 971, DateTimeKind.Unspecified).AddTicks(7250),
                            UserName = "Kendra_Breitenberg72"
                        },
                        new
                        {
                            UserId = 12,
                            CreatedDate = new DateTime(2024, 9, 22, 3, 2, 56, 754, DateTimeKind.Unspecified).AddTicks(5466),
                            Email = "gmail.com.Langosh67@gmail.com",
                            FullName = "Johnnie O'Reilly",
                            Password = "mzxxkw",
                            PhoneNumber = "0372425936",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 22, 3, 2, 56, 754, DateTimeKind.Unspecified).AddTicks(5466),
                            UserName = "Mavis_Block"
                        },
                        new
                        {
                            UserId = 13,
                            CreatedDate = new DateTime(2024, 9, 21, 22, 29, 3, 509, DateTimeKind.Unspecified).AddTicks(8194),
                            Email = "gmail.com36@hotmail.com",
                            FullName = "Virginie Wuckert",
                            Password = "wiqrb0",
                            PhoneNumber = "0870583135",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 21, 22, 29, 3, 509, DateTimeKind.Unspecified).AddTicks(8194),
                            UserName = "Willow_Hilpert38"
                        },
                        new
                        {
                            UserId = 14,
                            CreatedDate = new DateTime(2024, 9, 26, 12, 16, 4, 402, DateTimeKind.Unspecified).AddTicks(9538),
                            Email = "gmail.com_Orn@gmail.com",
                            FullName = "Theron Buckridge",
                            Password = "hfwm12",
                            PhoneNumber = "0284126576",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 12, 16, 4, 402, DateTimeKind.Unspecified).AddTicks(9538),
                            UserName = "Josianne_Welch"
                        },
                        new
                        {
                            UserId = 15,
                            CreatedDate = new DateTime(2024, 9, 1, 19, 46, 59, 176, DateTimeKind.Unspecified).AddTicks(8107),
                            Email = "gmail.com_Friesen@hotmail.com",
                            FullName = "Jerrell Raynor",
                            Password = "pydbrk",
                            PhoneNumber = "0882796181",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 1, 19, 46, 59, 176, DateTimeKind.Unspecified).AddTicks(8107),
                            UserName = "Bernadine.Ruecker86"
                        },
                        new
                        {
                            UserId = 16,
                            CreatedDate = new DateTime(2024, 9, 8, 18, 24, 52, 70, DateTimeKind.Unspecified).AddTicks(3859),
                            Email = "gmail.com47@gmail.com",
                            FullName = "Constantin Hagenes",
                            Password = "nnprad",
                            PhoneNumber = "0661492837",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 8, 18, 24, 52, 70, DateTimeKind.Unspecified).AddTicks(3859),
                            UserName = "Kenyatta_Larkin87"
                        },
                        new
                        {
                            UserId = 17,
                            CreatedDate = new DateTime(2024, 9, 25, 7, 33, 58, 99, DateTimeKind.Unspecified).AddTicks(4769),
                            Email = "gmail.com.Gerlach@yahoo.com",
                            FullName = "Jensen Ullrich",
                            Password = "rhsbe8",
                            PhoneNumber = "0446834523",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 25, 7, 33, 58, 99, DateTimeKind.Unspecified).AddTicks(4769),
                            UserName = "Marvin.Murazik31"
                        },
                        new
                        {
                            UserId = 18,
                            CreatedDate = new DateTime(2024, 9, 5, 22, 55, 35, 948, DateTimeKind.Unspecified).AddTicks(1265),
                            Email = "gmail.com.OKon@gmail.com",
                            FullName = "Ward Wilderman",
                            Password = "50mupf",
                            PhoneNumber = "0236054712",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 5, 22, 55, 35, 948, DateTimeKind.Unspecified).AddTicks(1265),
                            UserName = "Karson71"
                        },
                        new
                        {
                            UserId = 19,
                            CreatedDate = new DateTime(2024, 9, 15, 0, 1, 53, 384, DateTimeKind.Unspecified).AddTicks(9887),
                            Email = "gmail.com_Wilderman82@yahoo.com",
                            FullName = "Conor Feest",
                            Password = "yq0okm",
                            PhoneNumber = "0950020636",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 15, 0, 1, 53, 384, DateTimeKind.Unspecified).AddTicks(9887),
                            UserName = "Clemens_Gibson"
                        },
                        new
                        {
                            UserId = 20,
                            CreatedDate = new DateTime(2024, 9, 18, 2, 15, 15, 319, DateTimeKind.Unspecified).AddTicks(5839),
                            Email = "gmail.com_Bernhard@hotmail.com",
                            FullName = "Lyla Swaniawski",
                            Password = "qblws5",
                            PhoneNumber = "0141089722",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 18, 2, 15, 15, 319, DateTimeKind.Unspecified).AddTicks(5839),
                            UserName = "Leta_Hettinger14"
                        },
                        new
                        {
                            UserId = 21,
                            CreatedDate = new DateTime(2024, 9, 11, 20, 53, 25, 251, DateTimeKind.Unspecified).AddTicks(4082),
                            Email = "gmail.com.Boyle@gmail.com",
                            FullName = "Catalina Jenkins",
                            Password = "49qvsc",
                            PhoneNumber = "0780665504",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 11, 20, 53, 25, 251, DateTimeKind.Unspecified).AddTicks(4082),
                            UserName = "Demetrius.Von12"
                        },
                        new
                        {
                            UserId = 22,
                            CreatedDate = new DateTime(2024, 9, 22, 16, 52, 11, 968, DateTimeKind.Unspecified).AddTicks(9135),
                            Email = "gmail.com_Bartell99@yahoo.com",
                            FullName = "Crawford Dickens",
                            Password = "la634p",
                            PhoneNumber = "0519665316",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 22, 16, 52, 11, 968, DateTimeKind.Unspecified).AddTicks(9135),
                            UserName = "Alex.Hills"
                        },
                        new
                        {
                            UserId = 23,
                            CreatedDate = new DateTime(2024, 9, 18, 7, 16, 13, 763, DateTimeKind.Unspecified).AddTicks(4525),
                            Email = "gmail.com73@yahoo.com",
                            FullName = "Lamont Murray",
                            Password = "6f5l1j",
                            PhoneNumber = "0949171824",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 18, 7, 16, 13, 763, DateTimeKind.Unspecified).AddTicks(4525),
                            UserName = "Anastasia.Moen"
                        },
                        new
                        {
                            UserId = 24,
                            CreatedDate = new DateTime(2024, 9, 19, 1, 25, 8, 544, DateTimeKind.Unspecified).AddTicks(6448),
                            Email = "gmail.com_Waelchi@hotmail.com",
                            FullName = "Ryder Cassin",
                            Password = "c3wry1",
                            PhoneNumber = "0694422490",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 19, 1, 25, 8, 544, DateTimeKind.Unspecified).AddTicks(6448),
                            UserName = "Miles72"
                        },
                        new
                        {
                            UserId = 25,
                            CreatedDate = new DateTime(2024, 9, 14, 19, 44, 24, 313, DateTimeKind.Unspecified).AddTicks(3021),
                            Email = "gmail.com.Hills@hotmail.com",
                            FullName = "Emma Bosco",
                            Password = "jhedxa",
                            PhoneNumber = "0353301750",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 14, 19, 44, 24, 313, DateTimeKind.Unspecified).AddTicks(3021),
                            UserName = "Lia.Funk99"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.UserDepartment", b =>
                {
                    b.Property<int>("UserDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserDepartmentId"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserDepartmentId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDepartments");

                    b.HasData(
                        new
                        {
                            UserDepartmentId = 1,
                            DepartmentId = 1,
                            UserId = 3
                        },
                        new
                        {
                            UserDepartmentId = 2,
                            DepartmentId = 1,
                            UserId = 4
                        },
                        new
                        {
                            UserDepartmentId = 3,
                            DepartmentId = 2,
                            UserId = 3
                        },
                        new
                        {
                            UserDepartmentId = 4,
                            DepartmentId = 4,
                            UserId = 6
                        },
                        new
                        {
                            UserDepartmentId = 5,
                            DepartmentId = 1,
                            UserId = 16
                        },
                        new
                        {
                            UserDepartmentId = 6,
                            DepartmentId = 5,
                            UserId = 22
                        },
                        new
                        {
                            UserDepartmentId = 7,
                            DepartmentId = 2,
                            UserId = 11
                        },
                        new
                        {
                            UserDepartmentId = 8,
                            DepartmentId = 10,
                            UserId = 25
                        },
                        new
                        {
                            UserDepartmentId = 9,
                            DepartmentId = 2,
                            UserId = 23
                        },
                        new
                        {
                            UserDepartmentId = 10,
                            DepartmentId = 5,
                            UserId = 20
                        },
                        new
                        {
                            UserDepartmentId = 11,
                            DepartmentId = 10,
                            UserId = 21
                        },
                        new
                        {
                            UserDepartmentId = 12,
                            DepartmentId = 10,
                            UserId = 21
                        },
                        new
                        {
                            UserDepartmentId = 13,
                            DepartmentId = 3,
                            UserId = 23
                        },
                        new
                        {
                            UserDepartmentId = 14,
                            DepartmentId = 7,
                            UserId = 9
                        },
                        new
                        {
                            UserDepartmentId = 15,
                            DepartmentId = 3,
                            UserId = 16
                        },
                        new
                        {
                            UserDepartmentId = 16,
                            DepartmentId = 2,
                            UserId = 20
                        },
                        new
                        {
                            UserDepartmentId = 17,
                            DepartmentId = 3,
                            UserId = 15
                        },
                        new
                        {
                            UserDepartmentId = 18,
                            DepartmentId = 9,
                            UserId = 13
                        },
                        new
                        {
                            UserDepartmentId = 19,
                            DepartmentId = 8,
                            UserId = 18
                        },
                        new
                        {
                            UserDepartmentId = 20,
                            DepartmentId = 9,
                            UserId = 24
                        },
                        new
                        {
                            UserDepartmentId = 21,
                            DepartmentId = 6,
                            UserId = 11
                        },
                        new
                        {
                            UserDepartmentId = 22,
                            DepartmentId = 5,
                            UserId = 10
                        },
                        new
                        {
                            UserDepartmentId = 23,
                            DepartmentId = 10,
                            UserId = 24
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.Property<int>("VehicleSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleSessionId"));

                    b.Property<DateTime>("CheckinTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckoutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GateId")
                        .HasColumnType("int");

                    b.Property<int>("SecurityID")
                        .HasColumnType("int");

                    b.Property<int>("VisitDetailId")
                        .HasColumnType("int");

                    b.HasKey("VehicleSessionId");

                    b.HasIndex("GateId");

                    b.HasIndex("SecurityID");

                    b.HasIndex("VisitDetailId");

                    b.ToTable("VehicleSessions");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSessionImage", b =>
                {
                    b.Property<int>("VehicleSessionImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleSessionImageId"));

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleSessionId")
                        .HasColumnType("int");

                    b.Property<string>("VehicleSessionImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleSessionImageId");

                    b.HasIndex("VehicleSessionId");

                    b.ToTable("VehicleSessionImages");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.Property<int>("VisitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitId"));

                    b.Property<int>("AcceptLevel")
                        .HasColumnType("int");

                    b.Property<int>("CreateById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRegister")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UpdateById")
                        .HasColumnType("int");

                    b.Property<string>("VisitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitQuantity")
                        .HasColumnType("int");

                    b.Property<string>("VisitType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitId");

                    b.HasIndex("CreateById");

                    b.HasIndex("UpdateById");

                    b.ToTable("Visits");

                    b.HasData(
                        new
                        {
                            VisitId = 1,
                            AcceptLevel = 1,
                            CreateById = 3,
                            DateRegister = new DateTime(2024, 9, 24, 22, 1, 56, 563, DateTimeKind.Local).AddTicks(7527),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        },
                        new
                        {
                            VisitId = 2,
                            AcceptLevel = 2,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 26, 15, 1, 56, 576, DateTimeKind.Utc).AddTicks(5682),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        },
                        new
                        {
                            VisitId = 3,
                            AcceptLevel = 2,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 26, 15, 1, 56, 576, DateTimeKind.Utc).AddTicks(6121),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        },
                        new
                        {
                            VisitId = 4,
                            AcceptLevel = 2,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 26, 15, 1, 56, 576, DateTimeKind.Utc).AddTicks(6144),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        },
                        new
                        {
                            VisitId = 5,
                            AcceptLevel = 2,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 26, 15, 1, 56, 576, DateTimeKind.Utc).AddTicks(6153),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        },
                        new
                        {
                            VisitId = 6,
                            AcceptLevel = 2,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 26, 15, 1, 56, 576, DateTimeKind.Utc).AddTicks(6163),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.Property<int>("VisitDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitDetailId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ExpectedEndTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("ExpectedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ExpectedStartTime")
                        .HasColumnType("time");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.Property<int>("VisitorId")
                        .HasColumnType("int");

                    b.HasKey("VisitDetailId");

                    b.HasIndex("VisitId");

                    b.HasIndex("VisitorId");

                    b.ToTable("VisitDetails");

                    b.HasData(
                        new
                        {
                            VisitDetailId = 1,
                            Description = "Officiis et similique cupiditate exercitationem. Iure saepe deleniti aspernatur rerum dolorem eveniet consequatur nesciunt. Fuga et voluptatem sapiente et. Est ad consectetur adipisci perferendis. Odit accusantium dolor at magni. Aut et corrupti asperiores vel omnis error.",
                            ExpectedEndDate = new DateTime(2024, 10, 25, 22, 1, 56, 574, DateTimeKind.Local).AddTicks(531),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 25, 22, 1, 56, 574, DateTimeKind.Local).AddTicks(468),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 1,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitDetailId = 2,
                            Description = "Et porro ut quas. Dignissimos ad consequatur minima fugit maiores incidunt explicabo. Nobis qui dignissimos ut ut in qui possimus. Fugit et sint distinctio et et temporibus aut rerum eius.",
                            ExpectedEndDate = new DateTime(2024, 10, 25, 22, 1, 56, 574, DateTimeKind.Local).AddTicks(1106),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 25, 22, 1, 56, 574, DateTimeKind.Local).AddTicks(1103),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 1,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitDetailId = 3,
                            Description = "Dolores quisquam pariatur a et. Sunt sed enim ex est hic enim. Magni veritatis sint eos assumenda rerum non necessitatibus. Et ut adipisci eaque.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 22, 1, 56, 584, DateTimeKind.Local).AddTicks(6650),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 22, 1, 56, 584, DateTimeKind.Local).AddTicks(6542),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 2,
                            VisitorId = 2
                        },
                        new
                        {
                            VisitDetailId = 4,
                            Description = "Dolor modi et earum iure earum. Cumque voluptas ipsum non id ex nisi sequi non odit. Amet et iusto assumenda ut qui qui est ducimus. At voluptas vero non enim velit vel. At commodi saepe voluptatem impedit quam est fugit molestias consequatur. Ea aut nihil aut quas quo commodi quos eum.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 22, 1, 56, 584, DateTimeKind.Local).AddTicks(7334),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 22, 1, 56, 584, DateTimeKind.Local).AddTicks(7329),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 2,
                            VisitorId = 9
                        },
                        new
                        {
                            VisitDetailId = 5,
                            Description = "Et tenetur et dolores eius minima qui cum consequuntur fugiat. Aliquam a placeat qui molestias. Reiciendis vitae suscipit inventore qui dolores velit aut minima.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 22, 1, 56, 587, DateTimeKind.Local).AddTicks(1721),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 22, 1, 56, 587, DateTimeKind.Local).AddTicks(1645),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 2,
                            VisitorId = 2
                        },
                        new
                        {
                            VisitDetailId = 6,
                            Description = "In nihil deleniti eius commodi ut accusantium porro suscipit rerum. Consequuntur quis quibusdam et tempore consequuntur. Veritatis illum iusto velit facere accusantium. Est quisquam eum et architecto et ex. Consequuntur sit qui natus consequatur velit similique voluptatem.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 22, 1, 56, 587, DateTimeKind.Local).AddTicks(2229),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 22, 1, 56, 587, DateTimeKind.Local).AddTicks(2225),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 2,
                            VisitorId = 7
                        },
                        new
                        {
                            VisitDetailId = 7,
                            Description = "Tenetur quo et quia et. Aut sed nisi minima tenetur. Temporibus accusantium at nostrum quibusdam eaque est. Tempora ut occaecati.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 22, 1, 56, 588, DateTimeKind.Local).AddTicks(9388),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 22, 1, 56, 588, DateTimeKind.Local).AddTicks(9338),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 2,
                            VisitorId = 9
                        },
                        new
                        {
                            VisitDetailId = 8,
                            Description = "Asperiores perspiciatis et et et qui maiores. Qui deserunt et natus architecto vero officiis quam id. Sed in tempora sunt deleniti eum tenetur.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 22, 1, 56, 588, DateTimeKind.Local).AddTicks(9691),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 22, 1, 56, 588, DateTimeKind.Local).AddTicks(9686),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 2,
                            VisitorId = 2
                        },
                        new
                        {
                            VisitDetailId = 9,
                            Description = "Porro non officiis doloremque accusamus voluptas commodi suscipit molestiae incidunt. Doloremque aut rerum tempore illo id voluptatem. Quisquam atque sunt excepturi ipsam.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 22, 1, 56, 590, DateTimeKind.Local).AddTicks(2683),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 22, 1, 56, 590, DateTimeKind.Local).AddTicks(2649),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 3,
                            VisitorId = 4
                        },
                        new
                        {
                            VisitDetailId = 10,
                            Description = "Delectus laudantium expedita sint nihil. Est aperiam repellendus et dolorum repudiandae ea libero nihil mollitia. Et consequuntur vel suscipit iste quo quasi rerum id. Molestiae accusamus temporibus eum repudiandae et et veritatis nostrum.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 22, 1, 56, 590, DateTimeKind.Local).AddTicks(2942),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 22, 1, 56, 590, DateTimeKind.Local).AddTicks(2940),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 3,
                            VisitorId = 9
                        },
                        new
                        {
                            VisitDetailId = 11,
                            Description = "Nobis velit et amet quis modi. Accusantium dolorum qui. Vero quia quis ad nam ratione qui aut. Quibusdam est iure quo sed perspiciatis voluptas pariatur. Odio quos necessitatibus dolores aut eligendi ex.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 22, 1, 56, 591, DateTimeKind.Local).AddTicks(4915),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 22, 1, 56, 591, DateTimeKind.Local).AddTicks(4885),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 3,
                            VisitorId = 9
                        },
                        new
                        {
                            VisitDetailId = 12,
                            Description = "Error soluta tenetur est consectetur. Et quas enim id et est facilis. Eum nulla laudantium rerum beatae quaerat non velit aliquam. Consequuntur corrupti consectetur qui eos tempora deleniti enim.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 22, 1, 56, 591, DateTimeKind.Local).AddTicks(5146),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 22, 1, 56, 591, DateTimeKind.Local).AddTicks(5144),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 3,
                            VisitorId = 9
                        },
                        new
                        {
                            VisitDetailId = 13,
                            Description = "Qui eum quia voluptatem. Blanditiis sint eum autem. Asperiores eum temporibus quo voluptatem. Rerum dolores amet assumenda exercitationem beatae saepe aut autem sit. Sint perspiciatis numquam ducimus sint aut modi voluptas dolore.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 22, 1, 56, 594, DateTimeKind.Local).AddTicks(8936),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 22, 1, 56, 594, DateTimeKind.Local).AddTicks(8774),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 3,
                            VisitorId = 7
                        },
                        new
                        {
                            VisitDetailId = 14,
                            Description = "Velit dolor iure repudiandae. Saepe dolorem rerum est. Eaque sapiente est nemo sit necessitatibus sunt eius error non. Culpa reprehenderit labore aut dolorem sed nihil. Illum dolorem voluptatibus sit nostrum incidunt voluptas eaque quia qui. Placeat qui qui.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 22, 1, 56, 594, DateTimeKind.Local).AddTicks(9296),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 22, 1, 56, 594, DateTimeKind.Local).AddTicks(9293),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 3,
                            VisitorId = 4
                        },
                        new
                        {
                            VisitDetailId = 15,
                            Description = "Molestias non ut. Voluptas aut labore quia voluptatibus ab maxime provident magni. Voluptatum doloremque eveniet fuga maiores est ipsum. Fuga quas quia molestiae. Qui quia nobis tempore quod corporis voluptatem.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 22, 1, 56, 596, DateTimeKind.Local).AddTicks(3275),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 22, 1, 56, 596, DateTimeKind.Local).AddTicks(3235),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 9
                        },
                        new
                        {
                            VisitDetailId = 16,
                            Description = "Quasi repudiandae nobis optio ut. Minus est aut fugiat enim quia fuga quasi placeat. Maxime aut excepturi deserunt non. Praesentium nisi harum mollitia possimus officia mollitia. Sapiente explicabo earum non ipsa porro accusantium quam quia. Impedit ipsam aut quia voluptate ut ad quia.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 22, 1, 56, 596, DateTimeKind.Local).AddTicks(3582),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 22, 1, 56, 596, DateTimeKind.Local).AddTicks(3580),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 7
                        },
                        new
                        {
                            VisitDetailId = 17,
                            Description = "Corporis ut molestiae sunt unde excepturi quis autem et quia. Ut beatae nesciunt. Atque libero est doloribus. Dolor ut dolorum fuga voluptatem placeat. Ut neque dignissimos quaerat facere dolorem pariatur velit. Omnis vel nemo illo error qui.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 22, 1, 56, 597, DateTimeKind.Local).AddTicks(9758),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 22, 1, 56, 597, DateTimeKind.Local).AddTicks(9589),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 7
                        },
                        new
                        {
                            VisitDetailId = 18,
                            Description = "Tenetur fugiat est nam quas. Ad nesciunt quam sunt omnis corrupti impedit rerum. Atque voluptates laborum quam provident soluta et rerum earum. Recusandae dolores error consequatur.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 22, 1, 56, 598, DateTimeKind.Local).AddTicks(994),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 22, 1, 56, 598, DateTimeKind.Local).AddTicks(984),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 3
                        },
                        new
                        {
                            VisitDetailId = 19,
                            Description = "Rem excepturi explicabo laboriosam non quo expedita aut. Cumque ratione molestiae cupiditate est excepturi corrupti. Assumenda iste ad. Voluptatem doloremque rerum. Est molestiae autem architecto et et ut pariatur est nulla. Magnam dolor eius vel.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 22, 1, 56, 600, DateTimeKind.Local).AddTicks(8345),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 22, 1, 56, 600, DateTimeKind.Local).AddTicks(8268),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 10
                        },
                        new
                        {
                            VisitDetailId = 20,
                            Description = "Eos natus eveniet incidunt. Ut dolorem voluptates et aut. Quis neque eos quae.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 22, 1, 56, 600, DateTimeKind.Local).AddTicks(8750),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 22, 1, 56, 600, DateTimeKind.Local).AddTicks(8745),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 2
                        },
                        new
                        {
                            VisitDetailId = 21,
                            Description = "Beatae quia quidem labore rerum. Sit aspernatur modi explicabo eius. Ea in ut tempora placeat. Dignissimos qui magnam.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 22, 1, 56, 603, DateTimeKind.Local).AddTicks(2984),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 22, 1, 56, 603, DateTimeKind.Local).AddTicks(2916),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 5,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitDetailId = 22,
                            Description = "Iure dignissimos dolorum illum hic excepturi aut. Eaque iusto sed quae voluptatem in eum. Rerum dignissimos non est sunt. Quo et est iusto nihil. Aut blanditiis delectus eum. Amet dignissimos impedit dolor non qui tempora.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 22, 1, 56, 603, DateTimeKind.Local).AddTicks(3531),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 22, 1, 56, 603, DateTimeKind.Local).AddTicks(3523),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 5,
                            VisitorId = 2
                        },
                        new
                        {
                            VisitDetailId = 23,
                            Description = "Voluptates reiciendis in quia. Vel eaque vel. Provident et aut. Quos dignissimos unde perferendis omnis temporibus rerum. Est natus error aut earum asperiores assumenda hic et.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 22, 1, 56, 606, DateTimeKind.Local).AddTicks(7309),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 22, 1, 56, 606, DateTimeKind.Local).AddTicks(7237),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 5,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitDetailId = 24,
                            Description = "Excepturi quas nobis ut dolorum alias provident velit et beatae. Exercitationem ad beatae. Qui voluptatum tempora eos iure aut numquam aut sequi ab.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 22, 1, 56, 606, DateTimeKind.Local).AddTicks(7761),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 22, 1, 56, 606, DateTimeKind.Local).AddTicks(7756),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 5,
                            VisitorId = 10
                        },
                        new
                        {
                            VisitDetailId = 25,
                            Description = "Libero est ipsam. Eligendi nisi quia vel doloremque. Quia eum exercitationem perferendis modi in quis dolore minima.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 22, 1, 56, 609, DateTimeKind.Local).AddTicks(4853),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 22, 1, 56, 609, DateTimeKind.Local).AddTicks(4758),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 5,
                            VisitorId = 7
                        },
                        new
                        {
                            VisitDetailId = 26,
                            Description = "Repellat aperiam pariatur voluptatem dolores et ut. Consequatur vel fugit aperiam veniam nemo autem ut. Possimus magni sed reiciendis rerum. Asperiores impedit in suscipit distinctio iste consequatur. Voluptatibus eum minima distinctio aliquid aut ut.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 22, 1, 56, 609, DateTimeKind.Local).AddTicks(5983),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 22, 1, 56, 609, DateTimeKind.Local).AddTicks(5978),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 5,
                            VisitorId = 9
                        },
                        new
                        {
                            VisitDetailId = 27,
                            Description = "Molestiae blanditiis nihil rem eligendi. Id sed ea voluptas expedita nihil molestiae eum sit laborum. Qui adipisci quia doloribus. Tempora et et.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 22, 1, 56, 612, DateTimeKind.Local).AddTicks(5167),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 22, 1, 56, 612, DateTimeKind.Local).AddTicks(5090),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 6,
                            VisitorId = 5
                        },
                        new
                        {
                            VisitDetailId = 28,
                            Description = "Enim consequatur nisi est dolor commodi sed atque molestiae quia. Minima nihil voluptates illo quas reprehenderit dolor perferendis odit. Id a impedit. Eos tempore sit et dolor aut.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 22, 1, 56, 612, DateTimeKind.Local).AddTicks(5542),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 22, 1, 56, 612, DateTimeKind.Local).AddTicks(5540),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 6,
                            VisitorId = 7
                        },
                        new
                        {
                            VisitDetailId = 29,
                            Description = "Necessitatibus enim minima. Ut corrupti ipsa laudantium dolore quia maxime. Sint expedita soluta. Reiciendis adipisci odio nam est. Itaque incidunt quia totam quis. Non velit dolorum sed voluptatem accusamus numquam libero quibusdam maiores.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 22, 1, 56, 615, DateTimeKind.Local).AddTicks(6822),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 22, 1, 56, 615, DateTimeKind.Local).AddTicks(6772),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 6,
                            VisitorId = 10
                        },
                        new
                        {
                            VisitDetailId = 30,
                            Description = "Odit laborum tempore rerum veritatis deserunt perferendis. Recusandae veritatis distinctio veniam dolores consequatur eveniet fugiat sit corporis. Velit et nesciunt optio molestiae quod quaerat adipisci ut. Odio porro sapiente ducimus quasi ut sit mollitia qui optio. Vel inventore consectetur libero ea vel dolorum vitae id.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 22, 1, 56, 615, DateTimeKind.Local).AddTicks(7145),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 22, 1, 56, 615, DateTimeKind.Local).AddTicks(7143),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 6,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitDetailId = 31,
                            Description = "Quis ex magni et voluptas iure aspernatur repellendus. Vero adipisci voluptas. Occaecati nobis quia eius nobis quia quia sit rerum nobis.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 22, 1, 56, 616, DateTimeKind.Local).AddTicks(9258),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 22, 1, 56, 616, DateTimeKind.Local).AddTicks(9229),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 6,
                            VisitorId = 8
                        },
                        new
                        {
                            VisitDetailId = 32,
                            Description = "Minus quo non adipisci. Odit expedita iusto. Doloribus reiciendis cupiditate aut quos sit sed corporis. Ex ex officia. Sit veritatis quaerat ut mollitia.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 22, 1, 56, 616, DateTimeKind.Local).AddTicks(9490),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 22, 1, 56, 616, DateTimeKind.Local).AddTicks(9487),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 6,
                            VisitorId = 5
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitProcess", b =>
                {
                    b.Property<int>("VisitProcessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitProcessId"));

                    b.Property<string>("DaysOfProcess")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ExpectedEndTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("ExpectedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ExpectedStartTime")
                        .HasColumnType("time");

                    b.Property<int>("ProcessId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VisitId")
                        .HasColumnType("int");

                    b.Property<int>("VisitQuantity")
                        .HasColumnType("int");

                    b.HasKey("VisitProcessId");

                    b.HasIndex("ProcessId");

                    b.HasIndex("VisitId");

                    b.ToTable("VisitProcesses");

                    b.HasData(
                        new
                        {
                            VisitProcessId = 1,
                            DaysOfProcess = "Monday",
                            ExpectedEndDate = new DateTime(2024, 10, 25, 22, 1, 56, 564, DateTimeKind.Local).AddTicks(8765),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 25, 22, 1, 56, 564, DateTimeKind.Local).AddTicks(8726),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            ProcessId = 1,
                            Status = "Processing",
                            VisitId = 1,
                            VisitQuantity = 2
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitType", b =>
                {
                    b.Property<int>("VisitTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitTypeId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VisitTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitTypeId");

                    b.ToTable("VisitTypes");

                    b.HasData(
                        new
                        {
                            VisitTypeId = 1,
                            Description = "Process trong tuần",
                            VisitTypeName = "ProcessWeek"
                        },
                        new
                        {
                            VisitTypeId = 2,
                            Description = "Process trong tháng",
                            VisitTypeName = "ProcessMonth"
                        },
                        new
                        {
                            VisitTypeId = 3,
                            Description = "Project",
                            VisitTypeName = "Project"
                        },
                        new
                        {
                            VisitTypeId = 4,
                            Description = "Visit được tạo bởi staff",
                            VisitTypeName = "VisitStaff"
                        },
                        new
                        {
                            VisitTypeId = 5,
                            Description = "Visit được tạo bởi security",
                            VisitTypeName = "VisitSecurity"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.Property<int>("VisitorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorId"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreateById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CredentialCardTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CredentialsCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("VisitorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitorId");

                    b.HasIndex("CreateById");

                    b.HasIndex("CredentialCardTypeId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Visitors");

                    b.HasData(
                        new
                        {
                            VisitorId = 1,
                            CompanyName = "Turner Inc",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 4, 11, 15, 26, 921, DateTimeKind.Unspecified).AddTicks(963),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "4l0zq7goah",
                            PhoneNumber = "0138159709",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 4, 11, 15, 26, 921, DateTimeKind.Unspecified).AddTicks(963),
                            VisitorName = "Virgil Ziemann"
                        },
                        new
                        {
                            VisitorId = 2,
                            CompanyName = "Yost - Cronin",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 7, 19, 37, 31, 179, DateTimeKind.Unspecified).AddTicks(9536),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "mro4qbl7sq",
                            PhoneNumber = "0112633713",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 7, 19, 37, 31, 179, DateTimeKind.Unspecified).AddTicks(9536),
                            VisitorName = "Margaret Daniel"
                        },
                        new
                        {
                            VisitorId = 3,
                            CompanyName = "Kovacek - Leuschke",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 22, 8, 3, 14, 359, DateTimeKind.Unspecified).AddTicks(6875),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "llekvzqas1",
                            PhoneNumber = "0441545014",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 22, 8, 3, 14, 359, DateTimeKind.Unspecified).AddTicks(6875),
                            VisitorName = "Fae Kris"
                        },
                        new
                        {
                            VisitorId = 4,
                            CompanyName = "Carroll, Erdman and Nicolas",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 7, 13, 8, 47, 933, DateTimeKind.Unspecified).AddTicks(9821),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "90yc96jdd5",
                            PhoneNumber = "0624278818",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 7, 13, 8, 47, 933, DateTimeKind.Unspecified).AddTicks(9821),
                            VisitorName = "Betsy Schmeler"
                        },
                        new
                        {
                            VisitorId = 5,
                            CompanyName = "Cruickshank Group",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 8, 21, 9, 47, 484, DateTimeKind.Unspecified).AddTicks(7661),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "awiki8nu39",
                            PhoneNumber = "0178576530",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 8, 21, 9, 47, 484, DateTimeKind.Unspecified).AddTicks(7661),
                            VisitorName = "Gene Pollich"
                        },
                        new
                        {
                            VisitorId = 6,
                            CompanyName = "Klocko - Mertz",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 14, 15, 9, 11, 931, DateTimeKind.Unspecified).AddTicks(3179),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "54k1hvos1u",
                            PhoneNumber = "0860263744",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 14, 15, 9, 11, 931, DateTimeKind.Unspecified).AddTicks(3179),
                            VisitorName = "Veronica Moen"
                        },
                        new
                        {
                            VisitorId = 7,
                            CompanyName = "Streich and Sons",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 12, 12, 9, 24, 616, DateTimeKind.Unspecified).AddTicks(4343),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "fgdnu67pqe",
                            PhoneNumber = "0225187916",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 12, 12, 9, 24, 616, DateTimeKind.Unspecified).AddTicks(4343),
                            VisitorName = "Unique Lowe"
                        },
                        new
                        {
                            VisitorId = 8,
                            CompanyName = "Stracke Group",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 9, 3, 29, 55, 234, DateTimeKind.Unspecified).AddTicks(727),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "ir0pw4qyyl",
                            PhoneNumber = "0902292846",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 9, 3, 29, 55, 234, DateTimeKind.Unspecified).AddTicks(727),
                            VisitorName = "Jazmyn Casper"
                        },
                        new
                        {
                            VisitorId = 9,
                            CompanyName = "Thompson LLC",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 4, 2, 26, 39, 926, DateTimeKind.Unspecified).AddTicks(984),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "t6ogjglyug",
                            PhoneNumber = "0840123812",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 4, 2, 26, 39, 926, DateTimeKind.Unspecified).AddTicks(984),
                            VisitorName = "Myrtie Langworth"
                        },
                        new
                        {
                            VisitorId = 10,
                            CompanyName = "Runte LLC",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 15, 5, 2, 14, 518, DateTimeKind.Unspecified).AddTicks(7631),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "g6hqx7j1k5",
                            PhoneNumber = "0933306822",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 15, 5, 2, 14, 518, DateTimeKind.Unspecified).AddTicks(7631),
                            VisitorName = "Libbie Jones"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.Property<int>("VisitorSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorSessionId"));

                    b.Property<DateTime>("CheckinTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CheckoutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GateInId")
                        .HasColumnType("int");

                    b.Property<int?>("GateOutId")
                        .HasColumnType("int");

                    b.Property<int>("QRCardId")
                        .HasColumnType("int");

                    b.Property<int>("SecurityInId")
                        .HasColumnType("int");

                    b.Property<int?>("SecurityOutId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitDetailId")
                        .HasColumnType("int");

                    b.HasKey("VisitorSessionId");

                    b.HasIndex("GateInId");

                    b.HasIndex("GateOutId");

                    b.HasIndex("QRCardId");

                    b.HasIndex("SecurityInId");

                    b.HasIndex("SecurityOutId");

                    b.HasIndex("VisitDetailId");

                    b.ToTable("VisitorSessions");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSessionsImage", b =>
                {
                    b.Property<int>("VisitorSessionsImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorSessionsImageId"));

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitorSessionId")
                        .HasColumnType("int");

                    b.HasKey("VisitorSessionsImageId");

                    b.HasIndex("VisitorSessionId");

                    b.ToTable("VisitorSessionsImages");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.NotificationUsers", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Notification", "Notification")
                        .WithMany("NotificationUsers")
                        .HasForeignKey("NotificationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Receiver")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Sender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Process", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.User", "User")
                        .WithMany("Project")
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.VisitType", "VisitType")
                        .WithMany("VisitTypes")
                        .HasForeignKey("VisitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("VisitType");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.QRCardStatus", "QRCardStatus")
                        .WithMany("QRCards")
                        .HasForeignKey("QRCardStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.QRCardType", "QRCardType")
                        .WithMany("QRCards")
                        .HasForeignKey("QRCardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QRCardStatus");

                    b.Navigation("QRCardType");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Role", "Role")
                        .WithMany("User")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.UserDepartment", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Department", "Department")
                        .WithMany("UserDepartment")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "User")
                        .WithMany("UserDepartment")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Gate", "Gate")
                        .WithMany("VehicleSession")
                        .HasForeignKey("GateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Security")
                        .WithMany("VehicleSession")
                        .HasForeignKey("SecurityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.VisitDetail", "VisitDetail")
                        .WithMany("VehicleSession")
                        .HasForeignKey("VisitDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gate");

                    b.Navigation("Security");

                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSessionImage", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.VehicleSession", "VehicleSession")
                        .WithMany("Images")
                        .HasForeignKey("VehicleSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.User", "CreateBy")
                        .WithMany("CreatedVisits")
                        .HasForeignKey("CreateById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "UpdateBy")
                        .WithMany("UpdatedVisits")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreateBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Visit", "Visit")
                        .WithMany("VisitDetail")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Visitor", "Visitor")
                        .WithMany("VisitDetail")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visit");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitProcess", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Process", "Process")
                        .WithMany("VisitProject")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Visit", "Visit")
                        .WithMany("VisitProcess")
                        .HasForeignKey("VisitId");

                    b.Navigation("Process");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.UserDepartment", "UserDepartment")
                        .WithMany("Visitors")
                        .HasForeignKey("CreateById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.CredentialCardType", "CredentialCardType")
                        .WithMany("Visitor")
                        .HasForeignKey("CredentialCardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "User")
                        .WithOne("Visitor")
                        .HasForeignKey("SecurityGateApv.Domain.Models.Visitor", "UserId");

                    b.Navigation("CredentialCardType");

                    b.Navigation("User");

                    b.Navigation("UserDepartment");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Gate", "GateIn")
                        .WithMany("VisitorSessionsIn")
                        .HasForeignKey("GateInId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Gate", "GateOut")
                        .WithMany("VisitorSessionsOut")
                        .HasForeignKey("GateOutId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SecurityGateApv.Domain.Models.QRCard", "QRCard")
                        .WithMany("VisitorSession")
                        .HasForeignKey("QRCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "SecurityIn")
                        .WithMany("SecurityInSessions")
                        .HasForeignKey("SecurityInId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "SecurityOut")
                        .WithMany("SecurityOutSessions")
                        .HasForeignKey("SecurityOutId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SecurityGateApv.Domain.Models.VisitDetail", "VisitDetail")
                        .WithMany("VisitorSession")
                        .HasForeignKey("VisitDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GateIn");

                    b.Navigation("GateOut");

                    b.Navigation("QRCard");

                    b.Navigation("SecurityIn");

                    b.Navigation("SecurityOut");

                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSessionsImage", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.VisitorSession", "VisitorSession")
                        .WithMany("Images")
                        .HasForeignKey("VisitorSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.CredentialCardType", b =>
                {
                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Department", b =>
                {
                    b.Navigation("UserDepartment");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Gate", b =>
                {
                    b.Navigation("VehicleSession");

                    b.Navigation("VisitorSessionsIn");

                    b.Navigation("VisitorSessionsOut");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Notification", b =>
                {
                    b.Navigation("NotificationUsers");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Process", b =>
                {
                    b.Navigation("VisitProject");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardStatus", b =>
                {
                    b.Navigation("QRCards");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardType", b =>
                {
                    b.Navigation("QRCards");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Role", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.Navigation("CreatedVisits");

                    b.Navigation("Project");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("SecurityInSessions");

                    b.Navigation("SecurityOutSessions");

                    b.Navigation("SentNotifications");

                    b.Navigation("UpdatedVisits");

                    b.Navigation("UserDepartment");

                    b.Navigation("VehicleSession");

                    b.Navigation("Visitor")
                        .IsRequired();
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.UserDepartment", b =>
                {
                    b.Navigation("Visitors");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.Navigation("VisitDetail");

                    b.Navigation("VisitProcess");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.Navigation("VehicleSession");

                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitType", b =>
                {
                    b.Navigation("VisitTypes");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
