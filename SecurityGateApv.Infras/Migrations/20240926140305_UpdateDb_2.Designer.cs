// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SecurityGateApv.Infras.DBContext;

#nullable disable

namespace SecurityGateApv.Infras.Migrations
{
    [DbContext(typeof(SecurityGateApvDbContext))]
    [Migration("20240926140305_UpdateDb_2")]
    partial class UpdateDb_2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SecurityGateApv.Domain.Models.CredentialCardType", b =>
                {
                    b.Property<int>("CredentialCardTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CredentialCardTypeId"));

                    b.Property<string>("CredentialCardTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CredentialCardTypeId");

                    b.ToTable("CredentialCardTypes");

                    b.HasData(
                        new
                        {
                            CredentialCardTypeId = 1,
                            CredentialCardTypeName = "Giấy phép lái xe"
                        },
                        new
                        {
                            CredentialCardTypeId = 2,
                            CredentialCardTypeName = "Giấy phép lái xe"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<int>("AcceptLevel")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            AcceptLevel = 5,
                            CreateDate = new DateTime(2024, 9, 14, 17, 29, 1, 444, DateTimeKind.Utc).AddTicks(6787),
                            DepartmentName = "Phòng Nhân sự",
                            Description = "Placeat consectetur rerum fugiat.",
                            UpdatedDate = new DateTime(2024, 9, 14, 17, 29, 1, 444, DateTimeKind.Utc).AddTicks(6787)
                        },
                        new
                        {
                            DepartmentId = 2,
                            AcceptLevel = 3,
                            CreateDate = new DateTime(2024, 9, 15, 4, 42, 8, 564, DateTimeKind.Utc).AddTicks(5646),
                            DepartmentName = "Phòng Nhân sự",
                            Description = "Quaerat enim et nesciunt possimus veritatis numquam in.",
                            UpdatedDate = new DateTime(2024, 9, 15, 4, 42, 8, 564, DateTimeKind.Utc).AddTicks(5646)
                        },
                        new
                        {
                            DepartmentId = 3,
                            AcceptLevel = 5,
                            CreateDate = new DateTime(2024, 9, 3, 21, 19, 1, 81, DateTimeKind.Utc).AddTicks(2807),
                            DepartmentName = "Phòng Kinh doanh",
                            Description = "Fugiat quia facilis.",
                            UpdatedDate = new DateTime(2024, 9, 3, 21, 19, 1, 81, DateTimeKind.Utc).AddTicks(2807)
                        },
                        new
                        {
                            DepartmentId = 4,
                            AcceptLevel = 4,
                            CreateDate = new DateTime(2024, 9, 19, 21, 32, 17, 638, DateTimeKind.Utc).AddTicks(697),
                            DepartmentName = "Phòng IT",
                            Description = "Sed consequatur cum ad laborum tempore consequatur dolores nam.",
                            UpdatedDate = new DateTime(2024, 9, 19, 21, 32, 17, 638, DateTimeKind.Utc).AddTicks(697)
                        },
                        new
                        {
                            DepartmentId = 5,
                            AcceptLevel = 2,
                            CreateDate = new DateTime(2024, 9, 25, 21, 46, 14, 396, DateTimeKind.Utc).AddTicks(1757),
                            DepartmentName = "Phòng Nhân sự",
                            Description = "Accusamus et voluptate animi assumenda ut expedita quam.",
                            UpdatedDate = new DateTime(2024, 9, 25, 21, 46, 14, 396, DateTimeKind.Utc).AddTicks(1757)
                        },
                        new
                        {
                            DepartmentId = 6,
                            AcceptLevel = 3,
                            CreateDate = new DateTime(2024, 9, 17, 1, 49, 53, 702, DateTimeKind.Utc).AddTicks(3256),
                            DepartmentName = "Phòng Kế toán",
                            Description = "Sint ea ut earum possimus est ut adipisci.",
                            UpdatedDate = new DateTime(2024, 9, 17, 1, 49, 53, 702, DateTimeKind.Utc).AddTicks(3256)
                        },
                        new
                        {
                            DepartmentId = 7,
                            AcceptLevel = 4,
                            CreateDate = new DateTime(2024, 9, 19, 22, 52, 18, 274, DateTimeKind.Utc).AddTicks(2542),
                            DepartmentName = "Phòng Pháp chế",
                            Description = "Vitae doloribus incidunt libero qui voluptas voluptatem similique natus beatae.",
                            UpdatedDate = new DateTime(2024, 9, 19, 22, 52, 18, 274, DateTimeKind.Utc).AddTicks(2542)
                        },
                        new
                        {
                            DepartmentId = 8,
                            AcceptLevel = 4,
                            CreateDate = new DateTime(2024, 9, 11, 23, 52, 19, 248, DateTimeKind.Utc).AddTicks(3647),
                            DepartmentName = "Phòng IT",
                            Description = "Sit quia similique voluptas et possimus autem.",
                            UpdatedDate = new DateTime(2024, 9, 11, 23, 52, 19, 248, DateTimeKind.Utc).AddTicks(3647)
                        },
                        new
                        {
                            DepartmentId = 9,
                            AcceptLevel = 2,
                            CreateDate = new DateTime(2024, 9, 4, 1, 3, 3, 821, DateTimeKind.Utc).AddTicks(300),
                            DepartmentName = "Phòng Sản xuất",
                            Description = "Consequatur quas blanditiis ducimus pariatur perspiciatis.",
                            UpdatedDate = new DateTime(2024, 9, 4, 1, 3, 3, 821, DateTimeKind.Utc).AddTicks(300)
                        },
                        new
                        {
                            DepartmentId = 10,
                            AcceptLevel = 1,
                            CreateDate = new DateTime(2024, 9, 15, 8, 25, 49, 871, DateTimeKind.Utc).AddTicks(9162),
                            DepartmentName = "Phòng Chăm sóc khách hàng",
                            Description = "Molestiae rerum temporibus et eos rerum maiores.",
                            UpdatedDate = new DateTime(2024, 9, 15, 8, 25, 49, 871, DateTimeKind.Utc).AddTicks(9162)
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Gate", b =>
                {
                    b.Property<int>("GateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GateId"));

                    b.Property<string>("GateCoordinate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GateId");

                    b.ToTable("Gates");

                    b.HasData(
                        new
                        {
                            GateId = 1,
                            GateCoordinate = "Ra vào trong ngày",
                            GateName = "Cổng 1"
                        },
                        new
                        {
                            GateId = 2,
                            GateCoordinate = "Ra vào trong ngày",
                            GateName = "Cổng 2"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReadDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.NotificationUsers", b =>
                {
                    b.Property<int>("NotificationUserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationUserID"));

                    b.Property<int>("NotificationID")
                        .HasColumnType("int");

                    b.Property<bool>("ReadStatus")
                        .HasColumnType("bit");

                    b.Property<int>("ReceiverID")
                        .HasColumnType("int");

                    b.Property<int>("SenderID")
                        .HasColumnType("int");

                    b.HasKey("NotificationUserID");

                    b.HasIndex("NotificationID");

                    b.HasIndex("ReceiverID");

                    b.HasIndex("SenderID");

                    b.ToTable("NotificationUsers");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Process", b =>
                {
                    b.Property<int>("ProcessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProcessId"));

                    b.Property<int>("CreateBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("VisitTypeId")
                        .HasColumnType("int");

                    b.HasKey("ProcessId");

                    b.HasIndex("CreateBy");

                    b.HasIndex("VisitTypeId");

                    b.ToTable("Processes");

                    b.HasData(
                        new
                        {
                            ProcessId = 1,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 24, 14, 3, 5, 125, DateTimeKind.Utc).AddTicks(6164),
                            Description = "",
                            ProcessName = "Unbranded Wooden Ball",
                            Status = false,
                            VisitTypeId = 1
                        },
                        new
                        {
                            ProcessId = 2,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 24, 14, 3, 5, 125, DateTimeKind.Utc).AddTicks(8027),
                            Description = "",
                            ProcessName = "Tasty Plastic Fish",
                            Status = true,
                            VisitTypeId = 1
                        },
                        new
                        {
                            ProcessId = 3,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 24, 14, 3, 5, 125, DateTimeKind.Utc).AddTicks(8055),
                            Description = "",
                            ProcessName = "Practical Soft Mouse",
                            Status = true,
                            VisitTypeId = 1
                        },
                        new
                        {
                            ProcessId = 4,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 24, 14, 3, 5, 125, DateTimeKind.Utc).AddTicks(8073),
                            Description = "",
                            ProcessName = "Gorgeous Cotton Computer",
                            Status = false,
                            VisitTypeId = 1
                        },
                        new
                        {
                            ProcessId = 5,
                            CreateBy = 3,
                            CreateTime = new DateTime(2024, 9, 24, 14, 3, 5, 125, DateTimeKind.Utc).AddTicks(8090),
                            Description = "",
                            ProcessName = "Gorgeous Fresh Tuna",
                            Status = false,
                            VisitTypeId = 1
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.Property<int>("QRCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardId"));

                    b.Property<Guid>("CardGuidId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastCancelDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QRCardStatusId")
                        .HasColumnType("int");

                    b.Property<int>("QRCardTypeId")
                        .HasColumnType("int");

                    b.HasKey("QRCardId");

                    b.HasIndex("QRCardStatusId");

                    b.HasIndex("QRCardTypeId");

                    b.ToTable("QRCards");

                    b.HasData(
                        new
                        {
                            QRCardId = 1,
                            CardGuidId = new Guid("ece5de14-04ba-4ba4-a42c-65a3c46f2f1e"),
                            CreateDate = new DateTime(2024, 9, 26, 21, 3, 5, 167, DateTimeKind.Local).AddTicks(268),
                            LastCancelDate = new DateTime(2024, 10, 26, 21, 3, 5, 167, DateTimeKind.Local).AddTicks(268),
                            QRCardStatusId = 1,
                            QRCardTypeId = 1
                        },
                        new
                        {
                            QRCardId = 2,
                            CardGuidId = new Guid("c73da352-a17b-49f4-9e73-3b321be65345"),
                            CreateDate = new DateTime(2024, 9, 26, 21, 3, 5, 167, DateTimeKind.Local).AddTicks(456),
                            LastCancelDate = new DateTime(2024, 10, 26, 21, 3, 5, 167, DateTimeKind.Local).AddTicks(456),
                            QRCardStatusId = 2,
                            QRCardTypeId = 1
                        },
                        new
                        {
                            QRCardId = 3,
                            CardGuidId = new Guid("d4315112-7ffd-496d-a209-6136e9c4a338"),
                            CreateDate = new DateTime(2024, 9, 26, 21, 3, 5, 167, DateTimeKind.Local).AddTicks(468),
                            LastCancelDate = new DateTime(2024, 10, 26, 21, 3, 5, 167, DateTimeKind.Local).AddTicks(468),
                            QRCardStatusId = 1,
                            QRCardTypeId = 1
                        },
                        new
                        {
                            QRCardId = 4,
                            CardGuidId = new Guid("e14d6c25-7fab-4421-9b14-de07523911f4"),
                            CreateDate = new DateTime(2024, 9, 26, 21, 3, 5, 167, DateTimeKind.Local).AddTicks(476),
                            LastCancelDate = new DateTime(2024, 10, 26, 21, 3, 5, 167, DateTimeKind.Local).AddTicks(476),
                            QRCardStatusId = 2,
                            QRCardTypeId = 2
                        },
                        new
                        {
                            QRCardId = 5,
                            CardGuidId = new Guid("2899667c-a36f-497a-99f2-e576346adfd2"),
                            CreateDate = new DateTime(2024, 9, 26, 21, 3, 5, 167, DateTimeKind.Local).AddTicks(483),
                            LastCancelDate = new DateTime(2024, 10, 26, 21, 3, 5, 167, DateTimeKind.Local).AddTicks(483),
                            QRCardStatusId = 1,
                            QRCardTypeId = 1
                        },
                        new
                        {
                            QRCardId = 6,
                            CardGuidId = new Guid("6935d4ec-edd0-476f-950d-2703a2ee01a7"),
                            CreateDate = new DateTime(2024, 9, 26, 21, 3, 5, 167, DateTimeKind.Local).AddTicks(503),
                            LastCancelDate = new DateTime(2024, 10, 26, 21, 3, 5, 167, DateTimeKind.Local).AddTicks(503),
                            QRCardStatusId = 2,
                            QRCardTypeId = 1
                        },
                        new
                        {
                            QRCardId = 7,
                            CardGuidId = new Guid("c1072234-9bdf-4b34-b073-575cfccb39c7"),
                            CreateDate = new DateTime(2024, 9, 26, 21, 3, 5, 167, DateTimeKind.Local).AddTicks(510),
                            LastCancelDate = new DateTime(2024, 10, 26, 21, 3, 5, 167, DateTimeKind.Local).AddTicks(510),
                            QRCardStatusId = 1,
                            QRCardTypeId = 2
                        },
                        new
                        {
                            QRCardId = 8,
                            CardGuidId = new Guid("f33222a6-9836-4eeb-ab14-5eb32e3f97ec"),
                            CreateDate = new DateTime(2024, 9, 26, 21, 3, 5, 167, DateTimeKind.Local).AddTicks(516),
                            LastCancelDate = new DateTime(2024, 10, 26, 21, 3, 5, 167, DateTimeKind.Local).AddTicks(516),
                            QRCardStatusId = 1,
                            QRCardTypeId = 2
                        },
                        new
                        {
                            QRCardId = 9,
                            CardGuidId = new Guid("f1c55b40-e612-4869-92b8-ae148cc0c7a1"),
                            CreateDate = new DateTime(2024, 9, 26, 21, 3, 5, 167, DateTimeKind.Local).AddTicks(523),
                            LastCancelDate = new DateTime(2024, 10, 26, 21, 3, 5, 167, DateTimeKind.Local).AddTicks(523),
                            QRCardStatusId = 2,
                            QRCardTypeId = 1
                        },
                        new
                        {
                            QRCardId = 10,
                            CardGuidId = new Guid("e36cd8c3-fe4e-4924-a1e6-c14d00b8babe"),
                            CreateDate = new DateTime(2024, 9, 26, 21, 3, 5, 167, DateTimeKind.Local).AddTicks(530),
                            LastCancelDate = new DateTime(2024, 10, 26, 21, 3, 5, 167, DateTimeKind.Local).AddTicks(530),
                            QRCardStatusId = 2,
                            QRCardTypeId = 1
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardStatus", b =>
                {
                    b.Property<int>("QRCardStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardStatusId"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusNumber")
                        .HasColumnType("int");

                    b.HasKey("QRCardStatusId");

                    b.ToTable("QRCardStatus");

                    b.HasData(
                        new
                        {
                            QRCardStatusId = 1,
                            StatusName = "Active",
                            StatusNumber = 1
                        },
                        new
                        {
                            QRCardStatusId = 2,
                            StatusName = "Inactive",
                            StatusNumber = 0
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardType", b =>
                {
                    b.Property<int>("QRCardTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QRCardTypeId"));

                    b.Property<string>("CardTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QRCardTypeId");

                    b.ToTable("QRCardType");

                    b.HasData(
                        new
                        {
                            QRCardTypeId = 1,
                            CardTypeName = "Employee",
                            TypeDescription = "Employee QR Card"
                        },
                        new
                        {
                            QRCardTypeId = 2,
                            CardTypeName = "Visitor",
                            TypeDescription = "Visitor QR Card"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Description = "Quản lý toàn bộ hệ thống",
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            Description = "Quản lý toàn bộ công ty",
                            RoleName = "Manager"
                        },
                        new
                        {
                            RoleId = 3,
                            Description = "Quản lý toàn bộ phòng ban",
                            RoleName = "DepartmentManaager"
                        },
                        new
                        {
                            RoleId = 4,
                            Description = "Tạo và quản lý khách ra vào của phòng ban",
                            RoleName = "Staff"
                        },
                        new
                        {
                            RoleId = 5,
                            Description = "Quản lý khách ra vào tại cổng",
                            RoleName = "Security"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedDate = new DateTime(2024, 3, 26, 14, 3, 5, 115, DateTimeKind.Utc).AddTicks(7724),
                            Email = "admin1@example.com",
                            FullName = "Admin One",
                            Password = "123",
                            PhoneNumber = "0123456789",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 14, 3, 5, 115, DateTimeKind.Utc).AddTicks(7731),
                            UserName = "admin1"
                        },
                        new
                        {
                            UserId = 2,
                            CreatedDate = new DateTime(2024, 6, 26, 14, 3, 5, 115, DateTimeKind.Utc).AddTicks(7733),
                            Email = "manager1@example.com",
                            FullName = "Manager One",
                            Password = "123",
                            PhoneNumber = "0987654321",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 14, 3, 5, 115, DateTimeKind.Utc).AddTicks(7734),
                            UserName = "manager1"
                        },
                        new
                        {
                            UserId = 3,
                            CreatedDate = new DateTime(2024, 7, 26, 14, 3, 5, 115, DateTimeKind.Utc).AddTicks(7736),
                            Email = "employee1@example.com",
                            FullName = "Department Manager One",
                            Password = "123",
                            PhoneNumber = "0112223334",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 14, 3, 5, 115, DateTimeKind.Utc).AddTicks(7737),
                            UserName = "DM1"
                        },
                        new
                        {
                            UserId = 4,
                            CreatedDate = new DateTime(2024, 8, 26, 14, 3, 5, 115, DateTimeKind.Utc).AddTicks(7738),
                            Email = "hr1@example.com",
                            FullName = "Staff One",
                            Password = "123",
                            PhoneNumber = "0223334445",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 14, 3, 5, 115, DateTimeKind.Utc).AddTicks(7739),
                            UserName = "Staff1"
                        },
                        new
                        {
                            UserId = 5,
                            CreatedDate = new DateTime(2024, 5, 26, 14, 3, 5, 115, DateTimeKind.Utc).AddTicks(7740),
                            Email = "it1@example.com",
                            FullName = "Security One",
                            Password = "123",
                            PhoneNumber = "0334445556",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 14, 3, 5, 115, DateTimeKind.Utc).AddTicks(7741),
                            UserName = "Security1"
                        },
                        new
                        {
                            UserId = 6,
                            CreatedDate = new DateTime(2024, 9, 21, 10, 17, 21, 318, DateTimeKind.Unspecified).AddTicks(4704),
                            Email = "gmail.com53@hotmail.com",
                            FullName = "Jimmie Reynolds",
                            Password = "arv6at",
                            PhoneNumber = "0665974443",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 21, 10, 17, 21, 318, DateTimeKind.Unspecified).AddTicks(4704),
                            UserName = "Emmanuelle_Windler"
                        },
                        new
                        {
                            UserId = 7,
                            CreatedDate = new DateTime(2024, 9, 5, 19, 37, 7, 976, DateTimeKind.Unspecified).AddTicks(7784),
                            Email = "gmail.com90@yahoo.com",
                            FullName = "Caesar King",
                            Password = "0xryjf",
                            PhoneNumber = "0291205743",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 5, 19, 37, 7, 976, DateTimeKind.Unspecified).AddTicks(7784),
                            UserName = "Cleora_Howell"
                        },
                        new
                        {
                            UserId = 8,
                            CreatedDate = new DateTime(2024, 9, 22, 4, 49, 3, 99, DateTimeKind.Unspecified).AddTicks(4462),
                            Email = "gmail.com.Botsford79@gmail.com",
                            FullName = "Sigrid Morar",
                            Password = "11shoe",
                            PhoneNumber = "0303930993",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 22, 4, 49, 3, 99, DateTimeKind.Unspecified).AddTicks(4462),
                            UserName = "Berniece.Daugherty"
                        },
                        new
                        {
                            UserId = 9,
                            CreatedDate = new DateTime(2024, 9, 23, 5, 9, 42, 158, DateTimeKind.Unspecified).AddTicks(8122),
                            Email = "gmail.com.Armstrong@gmail.com",
                            FullName = "Rosemary Schuster",
                            Password = "9bvh1b",
                            PhoneNumber = "0753101194",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 23, 5, 9, 42, 158, DateTimeKind.Unspecified).AddTicks(8122),
                            UserName = "Jena_Orn"
                        },
                        new
                        {
                            UserId = 10,
                            CreatedDate = new DateTime(2024, 9, 17, 16, 19, 27, 603, DateTimeKind.Unspecified).AddTicks(3487),
                            Email = "gmail.com5@yahoo.com",
                            FullName = "Mara Barton",
                            Password = "f6x6lz",
                            PhoneNumber = "0795732876",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 17, 16, 19, 27, 603, DateTimeKind.Unspecified).AddTicks(3487),
                            UserName = "Ruth16"
                        },
                        new
                        {
                            UserId = 11,
                            CreatedDate = new DateTime(2024, 9, 17, 22, 22, 15, 650, DateTimeKind.Unspecified).AddTicks(1352),
                            Email = "gmail.com.Hansen72@yahoo.com",
                            FullName = "Katlyn Crona",
                            Password = "8np1ig",
                            PhoneNumber = "0235348308",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 17, 22, 22, 15, 650, DateTimeKind.Unspecified).AddTicks(1352),
                            UserName = "Luther88"
                        },
                        new
                        {
                            UserId = 12,
                            CreatedDate = new DateTime(2024, 9, 6, 21, 47, 43, 963, DateTimeKind.Unspecified).AddTicks(3248),
                            Email = "gmail.com.Schulist92@hotmail.com",
                            FullName = "Dexter Crona",
                            Password = "kt920x",
                            PhoneNumber = "0642349016",
                            RoleId = 3,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 6, 21, 47, 43, 963, DateTimeKind.Unspecified).AddTicks(3248),
                            UserName = "Daphne_Baumbach"
                        },
                        new
                        {
                            UserId = 13,
                            CreatedDate = new DateTime(2024, 9, 26, 5, 6, 6, 246, DateTimeKind.Unspecified).AddTicks(4025),
                            Email = "gmail.com82@yahoo.com",
                            FullName = "Jared Schroeder",
                            Password = "pfe1ft",
                            PhoneNumber = "0577689162",
                            RoleId = 2,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 26, 5, 6, 6, 246, DateTimeKind.Unspecified).AddTicks(4025),
                            UserName = "Elmira_Turcotte"
                        },
                        new
                        {
                            UserId = 14,
                            CreatedDate = new DateTime(2024, 9, 12, 1, 22, 49, 817, DateTimeKind.Unspecified).AddTicks(6804),
                            Email = "gmail.com_Dach71@gmail.com",
                            FullName = "Brock Torp",
                            Password = "3retk0",
                            PhoneNumber = "0865642984",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 12, 1, 22, 49, 817, DateTimeKind.Unspecified).AddTicks(6804),
                            UserName = "Federico_Spencer"
                        },
                        new
                        {
                            UserId = 15,
                            CreatedDate = new DateTime(2024, 9, 12, 7, 48, 24, 254, DateTimeKind.Unspecified).AddTicks(3765),
                            Email = "gmail.com_Krajcik87@hotmail.com",
                            FullName = "Ebony Krajcik",
                            Password = "3gh28x",
                            PhoneNumber = "0593442985",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 12, 7, 48, 24, 254, DateTimeKind.Unspecified).AddTicks(3765),
                            UserName = "Adolf.Wilderman85"
                        },
                        new
                        {
                            UserId = 16,
                            CreatedDate = new DateTime(2024, 9, 3, 22, 6, 40, 38, DateTimeKind.Unspecified).AddTicks(8811),
                            Email = "gmail.com87@gmail.com",
                            FullName = "Selina Stamm",
                            Password = "2b71f3",
                            PhoneNumber = "0381805576",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 3, 22, 6, 40, 38, DateTimeKind.Unspecified).AddTicks(8811),
                            UserName = "Valentin20"
                        },
                        new
                        {
                            UserId = 17,
                            CreatedDate = new DateTime(2024, 9, 8, 3, 9, 41, 111, DateTimeKind.Unspecified).AddTicks(9770),
                            Email = "gmail.com.Dooley64@yahoo.com",
                            FullName = "Dagmar Kessler",
                            Password = "eklr4s",
                            PhoneNumber = "0352564289",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 8, 3, 9, 41, 111, DateTimeKind.Unspecified).AddTicks(9770),
                            UserName = "Alana.Cummings52"
                        },
                        new
                        {
                            UserId = 18,
                            CreatedDate = new DateTime(2024, 9, 3, 13, 50, 58, 321, DateTimeKind.Unspecified).AddTicks(224),
                            Email = "gmail.com_Heidenreich69@gmail.com",
                            FullName = "Gene Durgan",
                            Password = "x9a9dz",
                            PhoneNumber = "0366988498",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 3, 13, 50, 58, 321, DateTimeKind.Unspecified).AddTicks(224),
                            UserName = "Coleman.Hessel"
                        },
                        new
                        {
                            UserId = 19,
                            CreatedDate = new DateTime(2024, 9, 7, 21, 55, 19, 605, DateTimeKind.Unspecified).AddTicks(8441),
                            Email = "gmail.com.Davis@gmail.com",
                            FullName = "Kenya Walsh",
                            Password = "43cp3l",
                            PhoneNumber = "0942738479",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 7, 21, 55, 19, 605, DateTimeKind.Unspecified).AddTicks(8441),
                            UserName = "Mittie.Heller26"
                        },
                        new
                        {
                            UserId = 20,
                            CreatedDate = new DateTime(2024, 9, 14, 18, 39, 52, 367, DateTimeKind.Unspecified).AddTicks(4496),
                            Email = "gmail.com.Marvin@gmail.com",
                            FullName = "Bettye Glover",
                            Password = "hc3nzx",
                            PhoneNumber = "0405171272",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 14, 18, 39, 52, 367, DateTimeKind.Unspecified).AddTicks(4496),
                            UserName = "Torrey_Rempel"
                        },
                        new
                        {
                            UserId = 21,
                            CreatedDate = new DateTime(2024, 9, 17, 7, 44, 47, 97, DateTimeKind.Unspecified).AddTicks(1506),
                            Email = "gmail.com_Carroll1@hotmail.com",
                            FullName = "Rico Purdy",
                            Password = "5q8ig3",
                            PhoneNumber = "0788160925",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 17, 7, 44, 47, 97, DateTimeKind.Unspecified).AddTicks(1506),
                            UserName = "Jerome_Kunde51"
                        },
                        new
                        {
                            UserId = 22,
                            CreatedDate = new DateTime(2024, 9, 24, 7, 31, 18, 801, DateTimeKind.Unspecified).AddTicks(401),
                            Email = "gmail.com24@yahoo.com",
                            FullName = "Cassandre Champlin",
                            Password = "rhini3",
                            PhoneNumber = "0990818444",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 24, 7, 31, 18, 801, DateTimeKind.Unspecified).AddTicks(401),
                            UserName = "Kane.Hand"
                        },
                        new
                        {
                            UserId = 23,
                            CreatedDate = new DateTime(2024, 9, 17, 3, 52, 19, 28, DateTimeKind.Unspecified).AddTicks(2489),
                            Email = "gmail.com_Moen5@gmail.com",
                            FullName = "Felix Ritchie",
                            Password = "mgwpwn",
                            PhoneNumber = "0264742827",
                            RoleId = 1,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 17, 3, 52, 19, 28, DateTimeKind.Unspecified).AddTicks(2489),
                            UserName = "Libbie.Lind"
                        },
                        new
                        {
                            UserId = 24,
                            CreatedDate = new DateTime(2024, 9, 25, 18, 30, 15, 925, DateTimeKind.Unspecified).AddTicks(9626),
                            Email = "gmail.com_Fadel25@yahoo.com",
                            FullName = "Esperanza Dach",
                            Password = "rlx6x3",
                            PhoneNumber = "0139837893",
                            RoleId = 4,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 25, 18, 30, 15, 925, DateTimeKind.Unspecified).AddTicks(9626),
                            UserName = "Buddy78"
                        },
                        new
                        {
                            UserId = 25,
                            CreatedDate = new DateTime(2024, 9, 19, 19, 41, 50, 541, DateTimeKind.Unspecified).AddTicks(4589),
                            Email = "gmail.com68@hotmail.com",
                            FullName = "Johan O'Conner",
                            Password = "01fv6k",
                            PhoneNumber = "0662040845",
                            RoleId = 5,
                            Status = "Active",
                            UpdatedDate = new DateTime(2024, 9, 19, 19, 41, 50, 541, DateTimeKind.Unspecified).AddTicks(4589),
                            UserName = "Mireya_Wyman"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.UserDepartment", b =>
                {
                    b.Property<int>("UserDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserDepartmentId"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserDepartmentId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDepartments");

                    b.HasData(
                        new
                        {
                            UserDepartmentId = 1,
                            DepartmentId = 1,
                            UserId = 3
                        },
                        new
                        {
                            UserDepartmentId = 2,
                            DepartmentId = 1,
                            UserId = 4
                        },
                        new
                        {
                            UserDepartmentId = 3,
                            DepartmentId = 2,
                            UserId = 3
                        },
                        new
                        {
                            UserDepartmentId = 4,
                            DepartmentId = 1,
                            UserId = 18
                        },
                        new
                        {
                            UserDepartmentId = 5,
                            DepartmentId = 1,
                            UserId = 7
                        },
                        new
                        {
                            UserDepartmentId = 6,
                            DepartmentId = 7,
                            UserId = 19
                        },
                        new
                        {
                            UserDepartmentId = 7,
                            DepartmentId = 6,
                            UserId = 12
                        },
                        new
                        {
                            UserDepartmentId = 8,
                            DepartmentId = 6,
                            UserId = 20
                        },
                        new
                        {
                            UserDepartmentId = 9,
                            DepartmentId = 6,
                            UserId = 20
                        },
                        new
                        {
                            UserDepartmentId = 10,
                            DepartmentId = 1,
                            UserId = 10
                        },
                        new
                        {
                            UserDepartmentId = 11,
                            DepartmentId = 4,
                            UserId = 10
                        },
                        new
                        {
                            UserDepartmentId = 12,
                            DepartmentId = 5,
                            UserId = 13
                        },
                        new
                        {
                            UserDepartmentId = 13,
                            DepartmentId = 10,
                            UserId = 23
                        },
                        new
                        {
                            UserDepartmentId = 14,
                            DepartmentId = 4,
                            UserId = 7
                        },
                        new
                        {
                            UserDepartmentId = 15,
                            DepartmentId = 2,
                            UserId = 12
                        },
                        new
                        {
                            UserDepartmentId = 16,
                            DepartmentId = 9,
                            UserId = 15
                        },
                        new
                        {
                            UserDepartmentId = 17,
                            DepartmentId = 5,
                            UserId = 6
                        },
                        new
                        {
                            UserDepartmentId = 18,
                            DepartmentId = 3,
                            UserId = 10
                        },
                        new
                        {
                            UserDepartmentId = 19,
                            DepartmentId = 3,
                            UserId = 10
                        },
                        new
                        {
                            UserDepartmentId = 20,
                            DepartmentId = 8,
                            UserId = 25
                        },
                        new
                        {
                            UserDepartmentId = 21,
                            DepartmentId = 10,
                            UserId = 16
                        },
                        new
                        {
                            UserDepartmentId = 22,
                            DepartmentId = 3,
                            UserId = 22
                        },
                        new
                        {
                            UserDepartmentId = 23,
                            DepartmentId = 2,
                            UserId = 23
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.Property<int>("VehicleSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleSessionId"));

                    b.Property<DateTime>("CheckinTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckoutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GateId")
                        .HasColumnType("int");

                    b.Property<int>("SecurityID")
                        .HasColumnType("int");

                    b.Property<int>("VisitDetailId")
                        .HasColumnType("int");

                    b.HasKey("VehicleSessionId");

                    b.HasIndex("GateId");

                    b.HasIndex("SecurityID");

                    b.HasIndex("VisitDetailId");

                    b.ToTable("VehicleSessions");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSessionImage", b =>
                {
                    b.Property<int>("VehicleSessionImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleSessionImageId"));

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VehicleSessionId")
                        .HasColumnType("int");

                    b.Property<string>("VehicleSessionImageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleSessionImageId");

                    b.HasIndex("VehicleSessionId");

                    b.ToTable("VehicleSessionImages");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.Property<int>("VisitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitId"));

                    b.Property<int>("AcceptLevel")
                        .HasColumnType("int");

                    b.Property<int>("CreateById")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateRegister")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UpdateById")
                        .HasColumnType("int");

                    b.Property<string>("VisitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitQuantity")
                        .HasColumnType("int");

                    b.Property<string>("VisitType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitId");

                    b.HasIndex("CreateById");

                    b.HasIndex("UpdateById");

                    b.ToTable("Visits");

                    b.HasData(
                        new
                        {
                            VisitId = 1,
                            AcceptLevel = 1,
                            CreateById = 3,
                            DateRegister = new DateTime(2024, 9, 24, 21, 3, 5, 127, DateTimeKind.Local).AddTicks(669),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        },
                        new
                        {
                            VisitId = 2,
                            AcceptLevel = 2,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 26, 14, 3, 5, 130, DateTimeKind.Utc).AddTicks(6750),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        },
                        new
                        {
                            VisitId = 3,
                            AcceptLevel = 2,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 26, 14, 3, 5, 130, DateTimeKind.Utc).AddTicks(6904),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        },
                        new
                        {
                            VisitId = 4,
                            AcceptLevel = 2,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 26, 14, 3, 5, 130, DateTimeKind.Utc).AddTicks(6919),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        },
                        new
                        {
                            VisitId = 5,
                            AcceptLevel = 2,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 26, 14, 3, 5, 130, DateTimeKind.Utc).AddTicks(6929),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        },
                        new
                        {
                            VisitId = 6,
                            AcceptLevel = 2,
                            CreateById = 4,
                            DateRegister = new DateTime(2024, 9, 26, 14, 3, 5, 130, DateTimeKind.Utc).AddTicks(6937),
                            UpdateById = 4,
                            VisitName = "Dọn vệ sinh",
                            VisitQuantity = 2,
                            VisitType = "ProcessWeek"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.Property<int>("VisitDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitDetailId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ExpectedEndTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("ExpectedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ExpectedStartTime")
                        .HasColumnType("time");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("VisitId")
                        .HasColumnType("int");

                    b.Property<int>("VisitorId")
                        .HasColumnType("int");

                    b.HasKey("VisitDetailId");

                    b.HasIndex("VisitId");

                    b.HasIndex("VisitorId");

                    b.ToTable("VisitDetails");

                    b.HasData(
                        new
                        {
                            VisitDetailId = 1,
                            Description = "Iste et cumque et et nemo necessitatibus sit. Voluptas dignissimos enim dolorem perspiciatis. Rem quasi perferendis officia adipisci tenetur mollitia. Sunt in ut blanditiis voluptas adipisci ullam qui quia quis. Optio consequatur voluptates earum et ipsa.",
                            ExpectedEndDate = new DateTime(2024, 10, 25, 21, 3, 5, 129, DateTimeKind.Local).AddTicks(5485),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 25, 21, 3, 5, 129, DateTimeKind.Local).AddTicks(5448),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 1,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitDetailId = 2,
                            Description = "Autem aliquam culpa. Magni voluptas velit fugit assumenda nostrum minima quo et. Laboriosam in dolores facilis dolorem suscipit maiores ducimus neque ipsa. Assumenda dicta minima numquam sit sit consequatur. Molestiae quam magni. Et optio ut odio non.",
                            ExpectedEndDate = new DateTime(2024, 10, 25, 21, 3, 5, 129, DateTimeKind.Local).AddTicks(5968),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 25, 21, 3, 5, 129, DateTimeKind.Local).AddTicks(5965),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 1,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitDetailId = 3,
                            Description = "Nesciunt reprehenderit omnis consectetur expedita dolorem ducimus non sed. Explicabo officia culpa nostrum recusandae eaque iste quaerat quia. Est explicabo debitis sit harum eos aut dolores. Aut quo optio iste pariatur accusamus.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 21, 3, 5, 131, DateTimeKind.Local).AddTicks(7534),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 21, 3, 5, 131, DateTimeKind.Local).AddTicks(7506),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 2,
                            VisitorId = 3
                        },
                        new
                        {
                            VisitDetailId = 4,
                            Description = "Optio maiores suscipit similique dolores quas facere id. Magni est qui libero. Consequatur consequatur assumenda aperiam aut aut numquam recusandae qui rerum. Natus rerum magnam. Explicabo reiciendis fugiat aperiam.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 21, 3, 5, 131, DateTimeKind.Local).AddTicks(7771),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 21, 3, 5, 131, DateTimeKind.Local).AddTicks(7769),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 2,
                            VisitorId = 8
                        },
                        new
                        {
                            VisitDetailId = 5,
                            Description = "Labore error a. Sit similique repellendus aut neque et est occaecati voluptas aut. Nesciunt sed quo labore enim ratione voluptas dolores dolorem eos.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 21, 3, 5, 132, DateTimeKind.Local).AddTicks(8256),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 21, 3, 5, 132, DateTimeKind.Local).AddTicks(8231),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 2,
                            VisitorId = 8
                        },
                        new
                        {
                            VisitDetailId = 6,
                            Description = "Ea fugiat qui voluptatibus similique aut delectus. Amet cupiditate dolores fuga vero et. Fugiat in qui nisi corporis ut nostrum et sapiente.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 21, 3, 5, 132, DateTimeKind.Local).AddTicks(8456),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 21, 3, 5, 132, DateTimeKind.Local).AddTicks(8454),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 2,
                            VisitorId = 5
                        },
                        new
                        {
                            VisitDetailId = 7,
                            Description = "Aspernatur repellat repellat eaque adipisci. Iure et libero deleniti debitis. Suscipit ut tenetur aspernatur qui omnis quia animi. Molestias veniam non ut libero et iste voluptas doloremque est. Consequatur odio error odio aperiam iusto cupiditate exercitationem expedita nam.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 21, 3, 5, 133, DateTimeKind.Local).AddTicks(8964),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 21, 3, 5, 133, DateTimeKind.Local).AddTicks(8939),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 2,
                            VisitorId = 7
                        },
                        new
                        {
                            VisitDetailId = 8,
                            Description = "Ad dolor consequatur totam perferendis culpa. Sed facilis ratione. Omnis impedit sapiente beatae blanditiis aut est voluptatem.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 21, 3, 5, 133, DateTimeKind.Local).AddTicks(9162),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 21, 3, 5, 133, DateTimeKind.Local).AddTicks(9160),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 2,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitDetailId = 9,
                            Description = "Qui nam et nulla quod non iste dicta aut. Omnis dolore facilis molestiae qui. Vitae in reprehenderit. Omnis minima ipsa consequuntur aliquam cupiditate repellendus dolor. Hic sit animi. Totam quis fugiat deserunt est cumque.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 21, 3, 5, 137, DateTimeKind.Local).AddTicks(1937),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 21, 3, 5, 137, DateTimeKind.Local).AddTicks(1899),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 3,
                            VisitorId = 1
                        },
                        new
                        {
                            VisitDetailId = 10,
                            Description = "In tenetur impedit tenetur sunt. Odit dolor ipsa nihil ipsa quisquam quia ut assumenda. Libero eveniet rerum aliquam suscipit nostrum officia porro est corporis. Ut optio dolorem incidunt. Deleniti libero aliquam.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 21, 3, 5, 137, DateTimeKind.Local).AddTicks(2208),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 21, 3, 5, 137, DateTimeKind.Local).AddTicks(2205),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 3,
                            VisitorId = 6
                        },
                        new
                        {
                            VisitDetailId = 11,
                            Description = "Omnis alias consectetur autem ut qui exercitationem est minima illum. Amet natus ipsam non reiciendis et id quam rerum. Quis voluptate nam asperiores quis est. Vel perferendis laboriosam est deserunt qui est autem.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 21, 3, 5, 153, DateTimeKind.Local).AddTicks(1271),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 21, 3, 5, 153, DateTimeKind.Local).AddTicks(1222),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 3,
                            VisitorId = 4
                        },
                        new
                        {
                            VisitDetailId = 12,
                            Description = "Explicabo voluptate hic voluptatem provident dolorem odit qui porro corrupti. Saepe ut quo et aspernatur voluptas animi et. Enim voluptatem nihil quis placeat modi hic.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 21, 3, 5, 153, DateTimeKind.Local).AddTicks(1571),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 21, 3, 5, 153, DateTimeKind.Local).AddTicks(1569),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 3,
                            VisitorId = 9
                        },
                        new
                        {
                            VisitDetailId = 13,
                            Description = "Repellendus dolorem non sed ut odio qui qui. Aliquid sed recusandae. Aspernatur vitae facilis et eveniet. Repellat veniam dolores voluptas.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 21, 3, 5, 154, DateTimeKind.Local).AddTicks(4689),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 21, 3, 5, 154, DateTimeKind.Local).AddTicks(4658),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 3,
                            VisitorId = 10
                        },
                        new
                        {
                            VisitDetailId = 14,
                            Description = "Omnis placeat asperiores assumenda quos sed beatae nam. Praesentium error et nostrum exercitationem rem incidunt doloribus est. Error temporibus non sit tempore.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 21, 3, 5, 154, DateTimeKind.Local).AddTicks(4924),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 21, 3, 5, 154, DateTimeKind.Local).AddTicks(4921),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 3,
                            VisitorId = 6
                        },
                        new
                        {
                            VisitDetailId = 15,
                            Description = "Vitae labore dicta. Numquam et earum quaerat. Sit voluptatem accusamus repudiandae sit nesciunt iusto repellendus. Adipisci ipsa consectetur. Illo soluta in mollitia est.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 21, 3, 5, 155, DateTimeKind.Local).AddTicks(5694),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 21, 3, 5, 155, DateTimeKind.Local).AddTicks(5666),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 4
                        },
                        new
                        {
                            VisitDetailId = 16,
                            Description = "Non cupiditate dolorum accusantium. Error illo odit quos. Impedit quia ut commodi et et quidem aut animi suscipit. Qui sed aut sit similique cum voluptates occaecati. Unde distinctio id.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 21, 3, 5, 155, DateTimeKind.Local).AddTicks(5925),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 21, 3, 5, 155, DateTimeKind.Local).AddTicks(5922),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 8
                        },
                        new
                        {
                            VisitDetailId = 17,
                            Description = "Voluptate ut beatae occaecati eum aut at et molestias. Quaerat cum molestiae aspernatur voluptatem ea. Rerum unde modi aliquam neque aut labore. A id sed.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 21, 3, 5, 156, DateTimeKind.Local).AddTicks(7180),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 21, 3, 5, 156, DateTimeKind.Local).AddTicks(7154),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 2
                        },
                        new
                        {
                            VisitDetailId = 18,
                            Description = "Quo qui maxime nisi. Eos ea a ex molestiae sunt cupiditate non nesciunt. Quia sunt fuga. Ducimus non repellat suscipit dolor ratione eum rerum. Odio numquam tenetur sunt nemo nam iure sint et laborum.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 21, 3, 5, 156, DateTimeKind.Local).AddTicks(7417),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 21, 3, 5, 156, DateTimeKind.Local).AddTicks(7415),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 6
                        },
                        new
                        {
                            VisitDetailId = 19,
                            Description = "Voluptatem qui ea praesentium qui. Totam qui maxime consectetur. Veritatis officia ab sequi illum. Aliquid aspernatur ducimus libero iure voluptas nemo pariatur. Odit commodi tenetur sequi qui.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 21, 3, 5, 157, DateTimeKind.Local).AddTicks(8436),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 21, 3, 5, 157, DateTimeKind.Local).AddTicks(8411),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 10
                        },
                        new
                        {
                            VisitDetailId = 20,
                            Description = "Sunt voluptatum eaque et aut sed eum ab ducimus vel. Fuga voluptates omnis ut rerum. Necessitatibus ab repellendus est quis.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 21, 3, 5, 157, DateTimeKind.Local).AddTicks(8637),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 21, 3, 5, 157, DateTimeKind.Local).AddTicks(8635),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 4,
                            VisitorId = 8
                        },
                        new
                        {
                            VisitDetailId = 21,
                            Description = "Iste quia aut ad unde deserunt enim molestias in fuga. Animi quos aut est voluptas sed porro. Et sed vel. Eaque blanditiis inventore dolore sint. Labore saepe et perferendis facere non totam. Odio consequatur quasi ut placeat nam ea et est.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 21, 3, 5, 158, DateTimeKind.Local).AddTicks(9917),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 21, 3, 5, 158, DateTimeKind.Local).AddTicks(9888),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 5,
                            VisitorId = 9
                        },
                        new
                        {
                            VisitDetailId = 22,
                            Description = "Sit et nemo. Optio fugiat ipsa qui qui. Accusamus rerum quidem. Iusto sed est delectus omnis ea accusamus.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 21, 3, 5, 159, DateTimeKind.Local).AddTicks(122),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 21, 3, 5, 159, DateTimeKind.Local).AddTicks(120),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 5,
                            VisitorId = 7
                        },
                        new
                        {
                            VisitDetailId = 23,
                            Description = "Nesciunt dolorum aut. Qui beatae quibusdam fugit doloribus cumque nam accusantium. Quia voluptas aspernatur nam. Vel voluptas eveniet porro porro dolor nesciunt. Iste rerum dolorem accusamus et.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 21, 3, 5, 160, DateTimeKind.Local).AddTicks(1441),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 21, 3, 5, 160, DateTimeKind.Local).AddTicks(1415),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 5,
                            VisitorId = 3
                        },
                        new
                        {
                            VisitDetailId = 24,
                            Description = "Et ab magni necessitatibus earum. Enim amet voluptatum non est ut tempora quia nemo debitis. Soluta fugiat aut fugit debitis quo deserunt saepe id. Incidunt autem dolorem aut aut sed minima consectetur consectetur.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 21, 3, 5, 160, DateTimeKind.Local).AddTicks(1674),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 21, 3, 5, 160, DateTimeKind.Local).AddTicks(1672),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 5,
                            VisitorId = 4
                        },
                        new
                        {
                            VisitDetailId = 25,
                            Description = "Quam aperiam vitae aliquam expedita natus nam iure quod. Rerum inventore cum ad nihil voluptate. Sed voluptatum dolorem deserunt.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 21, 3, 5, 162, DateTimeKind.Local).AddTicks(3921),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 21, 3, 5, 162, DateTimeKind.Local).AddTicks(3891),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 5,
                            VisitorId = 9
                        },
                        new
                        {
                            VisitDetailId = 26,
                            Description = "Voluptatem laudantium nesciunt porro saepe autem ea laudantium officiis nam. Fugit voluptatum consequatur facere. Quas doloremque aut aut quaerat quae culpa velit porro veniam.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 21, 3, 5, 162, DateTimeKind.Local).AddTicks(4158),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 21, 3, 5, 162, DateTimeKind.Local).AddTicks(4156),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 5,
                            VisitorId = 4
                        },
                        new
                        {
                            VisitDetailId = 27,
                            Description = "Voluptatem iusto et cupiditate commodi eveniet quis. Maiores aut tempore. Odio cum qui impedit ex nesciunt sed aspernatur. Fugiat ut sit dolorum dolorem facilis ut quia eos dolor.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 21, 3, 5, 163, DateTimeKind.Local).AddTicks(5002),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 21, 3, 5, 163, DateTimeKind.Local).AddTicks(4975),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 6,
                            VisitorId = 4
                        },
                        new
                        {
                            VisitDetailId = 28,
                            Description = "Dolores officia aut. Explicabo occaecati ut et. Id sit tempore eos dolorem at et soluta inventore accusamus. Adipisci aut eum eveniet pariatur. Dicta exercitationem explicabo nobis.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 21, 3, 5, 163, DateTimeKind.Local).AddTicks(5224),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 21, 3, 5, 163, DateTimeKind.Local).AddTicks(5222),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 6,
                            VisitorId = 9
                        },
                        new
                        {
                            VisitDetailId = 29,
                            Description = "Perspiciatis magni ex ipsum. In animi voluptate enim voluptatibus. Assumenda fugit nesciunt vel numquam esse nihil enim quia. Aut voluptatem qui quam adipisci. Commodi soluta totam alias. Voluptates tempore aliquid veritatis aut qui.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 21, 3, 5, 164, DateTimeKind.Local).AddTicks(5871),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 21, 3, 5, 164, DateTimeKind.Local).AddTicks(5844),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 6,
                            VisitorId = 10
                        },
                        new
                        {
                            VisitDetailId = 30,
                            Description = "At doloremque vel consequuntur dolorem voluptas quisquam illum officiis. A laboriosam quia voluptates voluptates similique dolore tempore. Et sit ullam doloremque. Molestiae repudiandae ut fugiat delectus hic est consequatur dolores. Eos nihil ipsa unde alias sit.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 21, 3, 5, 164, DateTimeKind.Local).AddTicks(6114),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 21, 3, 5, 164, DateTimeKind.Local).AddTicks(6112),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 6,
                            VisitorId = 3
                        },
                        new
                        {
                            VisitDetailId = 31,
                            Description = "Et quidem nobis architecto voluptate ut. Sapiente hic ut sed omnis. Et suscipit saepe consequatur excepturi ut et minima quaerat. Ex delectus atque minima accusantium quidem harum ipsam minima.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 21, 3, 5, 165, DateTimeKind.Local).AddTicks(7058),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 21, 3, 5, 165, DateTimeKind.Local).AddTicks(7030),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 6,
                            VisitorId = 7
                        },
                        new
                        {
                            VisitDetailId = 32,
                            Description = "Eum ex nisi. Omnis optio minima. Qui architecto est et tempora voluptate nobis consequatur pariatur. Aspernatur sint voluptas maxime quo tempora sed pariatur. A vero vel dignissimos exercitationem reiciendis magnam facere non. Excepturi temporibus et et sapiente quod.",
                            ExpectedEndDate = new DateTime(2024, 9, 27, 21, 3, 5, 165, DateTimeKind.Local).AddTicks(7310),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 26, 21, 3, 5, 165, DateTimeKind.Local).AddTicks(7307),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            Status = true,
                            VisitId = 6,
                            VisitorId = 6
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitProcess", b =>
                {
                    b.Property<int>("VisitProcessId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitProcessId"));

                    b.Property<string>("DaysOfProcess")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpectedEndDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ExpectedEndTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("ExpectedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ExpectedStartTime")
                        .HasColumnType("time");

                    b.Property<int>("ProcessId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VisitId")
                        .HasColumnType("int");

                    b.Property<int>("VisitQuantity")
                        .HasColumnType("int");

                    b.HasKey("VisitProcessId");

                    b.HasIndex("ProcessId");

                    b.HasIndex("VisitId");

                    b.ToTable("VisitProcesses");

                    b.HasData(
                        new
                        {
                            VisitProcessId = 1,
                            DaysOfProcess = "Monday",
                            ExpectedEndDate = new DateTime(2024, 10, 25, 21, 3, 5, 128, DateTimeKind.Local).AddTicks(1747),
                            ExpectedEndTime = new TimeSpan(0, 12, 0, 0, 0),
                            ExpectedStartDate = new DateTime(2024, 9, 25, 21, 3, 5, 128, DateTimeKind.Local).AddTicks(1711),
                            ExpectedStartTime = new TimeSpan(0, 7, 0, 0, 0),
                            ProcessId = 1,
                            Status = "Processing",
                            VisitId = 1,
                            VisitQuantity = 2
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitType", b =>
                {
                    b.Property<int>("VisitTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitTypeId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VisitTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitTypeId");

                    b.ToTable("VisitTypes");

                    b.HasData(
                        new
                        {
                            VisitTypeId = 1,
                            Description = "Process trong tuần",
                            VisitTypeName = "ProcessWeek"
                        },
                        new
                        {
                            VisitTypeId = 2,
                            Description = "Process trong tháng",
                            VisitTypeName = "ProcessMonth"
                        },
                        new
                        {
                            VisitTypeId = 3,
                            Description = "Project",
                            VisitTypeName = "Project"
                        },
                        new
                        {
                            VisitTypeId = 4,
                            Description = "Visit được tạo bởi staff",
                            VisitTypeName = "VisitStaff"
                        },
                        new
                        {
                            VisitTypeId = 5,
                            Description = "Visit được tạo bởi security",
                            VisitTypeName = "VisitSecurity"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.Property<int>("VisitorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorId"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreateById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CredentialCardTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CredentialsCard")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("VisitorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisitorId");

                    b.HasIndex("CreateById");

                    b.HasIndex("CredentialCardTypeId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Visitors");

                    b.HasData(
                        new
                        {
                            VisitorId = 1,
                            CompanyName = "Gulgowski, Williamson and Littel",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 6, 20, 5, 47, 786, DateTimeKind.Unspecified).AddTicks(459),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "tyghrsdbe8",
                            PhoneNumber = "0149291766",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 6, 20, 5, 47, 786, DateTimeKind.Unspecified).AddTicks(459),
                            VisitorName = "Dusty Ebert"
                        },
                        new
                        {
                            VisitorId = 2,
                            CompanyName = "Brown, Ebert and Block",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 14, 6, 41, 53, 740, DateTimeKind.Unspecified).AddTicks(4875),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "yk2nrxhjl6",
                            PhoneNumber = "0442335366",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 14, 6, 41, 53, 740, DateTimeKind.Unspecified).AddTicks(4875),
                            VisitorName = "Clarissa Beer"
                        },
                        new
                        {
                            VisitorId = 3,
                            CompanyName = "Okuneva Inc",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 19, 17, 2, 57, 868, DateTimeKind.Unspecified).AddTicks(296),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "e1i0vw752q",
                            PhoneNumber = "0588954920",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 19, 17, 2, 57, 868, DateTimeKind.Unspecified).AddTicks(296),
                            VisitorName = "Sterling Weber"
                        },
                        new
                        {
                            VisitorId = 4,
                            CompanyName = "Leannon LLC",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 19, 18, 17, 17, 808, DateTimeKind.Unspecified).AddTicks(9273),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "1c9rjdol4u",
                            PhoneNumber = "0250456062",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 19, 18, 17, 17, 808, DateTimeKind.Unspecified).AddTicks(9273),
                            VisitorName = "Jaunita Douglas"
                        },
                        new
                        {
                            VisitorId = 5,
                            CompanyName = "Herman and Sons",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 1, 21, 55, 39, 175, DateTimeKind.Unspecified).AddTicks(839),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "0hfmkql55u",
                            PhoneNumber = "0771976198",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 1, 21, 55, 39, 175, DateTimeKind.Unspecified).AddTicks(839),
                            VisitorName = "Elise Sporer"
                        },
                        new
                        {
                            VisitorId = 6,
                            CompanyName = "Hirthe - Marquardt",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 5, 23, 23, 22, 97, DateTimeKind.Unspecified).AddTicks(4218),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "k2wt33ue4v",
                            PhoneNumber = "0685821577",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 5, 23, 23, 22, 97, DateTimeKind.Unspecified).AddTicks(4218),
                            VisitorName = "Wendy Runte"
                        },
                        new
                        {
                            VisitorId = 7,
                            CompanyName = "Bechtelar - Stokes",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 5, 21, 24, 53, 156, DateTimeKind.Unspecified).AddTicks(6104),
                            CredentialCardTypeId = 1,
                            CredentialsCard = "69w78phbux",
                            PhoneNumber = "0533618354",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 5, 21, 24, 53, 156, DateTimeKind.Unspecified).AddTicks(6104),
                            VisitorName = "Ryan Hermiston"
                        },
                        new
                        {
                            VisitorId = 8,
                            CompanyName = "Stark - Miller",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 14, 10, 2, 56, 98, DateTimeKind.Unspecified).AddTicks(1626),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "aagjlexv92",
                            PhoneNumber = "0162175938",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 14, 10, 2, 56, 98, DateTimeKind.Unspecified).AddTicks(1626),
                            VisitorName = "Abigayle Zieme"
                        },
                        new
                        {
                            VisitorId = 9,
                            CompanyName = "Krajcik, Jacobi and Emmerich",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 20, 21, 30, 30, 713, DateTimeKind.Unspecified).AddTicks(5275),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "b4p6qzmx94",
                            PhoneNumber = "0583766934",
                            Status = false,
                            UpdatedDate = new DateTime(2024, 9, 20, 21, 30, 30, 713, DateTimeKind.Unspecified).AddTicks(5275),
                            VisitorName = "Gianni Volkman"
                        },
                        new
                        {
                            VisitorId = 10,
                            CompanyName = "Reynolds, Toy and Adams",
                            CreateById = 1,
                            CreatedDate = new DateTime(2024, 9, 19, 22, 50, 48, 735, DateTimeKind.Unspecified).AddTicks(8527),
                            CredentialCardTypeId = 2,
                            CredentialsCard = "y8ihw104ow",
                            PhoneNumber = "0191787215",
                            Status = true,
                            UpdatedDate = new DateTime(2024, 9, 19, 22, 50, 48, 735, DateTimeKind.Unspecified).AddTicks(8527),
                            VisitorName = "Jermain O'Hara"
                        });
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.Property<int>("VisitorSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorSessionId"));

                    b.Property<DateTime>("CheckinTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CheckoutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("GateInId")
                        .HasColumnType("int");

                    b.Property<int?>("GateOutId")
                        .HasColumnType("int");

                    b.Property<int>("QRCardId")
                        .HasColumnType("int");

                    b.Property<int>("SecurityInId")
                        .HasColumnType("int");

                    b.Property<int?>("SecurityOutId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitDetailId")
                        .HasColumnType("int");

                    b.HasKey("VisitorSessionId");

                    b.HasIndex("GateInId");

                    b.HasIndex("GateOutId");

                    b.HasIndex("QRCardId");

                    b.HasIndex("SecurityInId");

                    b.HasIndex("SecurityOutId");

                    b.HasIndex("VisitDetailId");

                    b.ToTable("VisitorSessions");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSessionsImage", b =>
                {
                    b.Property<int>("VisitorSessionsImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitorSessionsImageId"));

                    b.Property<string>("ImageType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitorSessionId")
                        .HasColumnType("int");

                    b.HasKey("VisitorSessionsImageId");

                    b.HasIndex("VisitorSessionId");

                    b.ToTable("VisitorSessionsImages");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.NotificationUsers", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Notification", "Notification")
                        .WithMany("NotificationUsers")
                        .HasForeignKey("NotificationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Receiver")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Sender")
                        .WithMany("SentNotifications")
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Process", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.User", "User")
                        .WithMany("Project")
                        .HasForeignKey("CreateBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.VisitType", "VisitType")
                        .WithMany("VisitTypes")
                        .HasForeignKey("VisitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("VisitType");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.QRCardStatus", "QRCardStatus")
                        .WithMany("QRCards")
                        .HasForeignKey("QRCardStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.QRCardType", "QRCardType")
                        .WithMany("QRCards")
                        .HasForeignKey("QRCardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QRCardStatus");

                    b.Navigation("QRCardType");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Role", "Role")
                        .WithMany("User")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.UserDepartment", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Department", "Department")
                        .WithMany("UserDepartment")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "User")
                        .WithMany("UserDepartment")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Gate", "Gate")
                        .WithMany("VehicleSession")
                        .HasForeignKey("GateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "Security")
                        .WithMany("VehicleSession")
                        .HasForeignKey("SecurityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.VisitDetail", "VisitDetail")
                        .WithMany("VehicleSession")
                        .HasForeignKey("VisitDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gate");

                    b.Navigation("Security");

                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSessionImage", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.VehicleSession", "VehicleSession")
                        .WithMany("Images")
                        .HasForeignKey("VehicleSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.User", "CreateBy")
                        .WithMany("CreatedVisits")
                        .HasForeignKey("CreateById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "UpdateBy")
                        .WithMany("UpdatedVisits")
                        .HasForeignKey("UpdateById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreateBy");

                    b.Navigation("UpdateBy");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Visit", "Visit")
                        .WithMany("VisitDetail")
                        .HasForeignKey("VisitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Visitor", "Visitor")
                        .WithMany("VisitDetail")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visit");

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitProcess", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Process", "Process")
                        .WithMany("VisitProject")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Visit", "Visit")
                        .WithMany("VisitProject")
                        .HasForeignKey("VisitId");

                    b.Navigation("Process");

                    b.Navigation("Visit");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.UserDepartment", "UserDepartment")
                        .WithMany("Visitors")
                        .HasForeignKey("CreateById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.CredentialCardType", "CredentialCardType")
                        .WithMany("Visitor")
                        .HasForeignKey("CredentialCardTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "User")
                        .WithOne("Visitor")
                        .HasForeignKey("SecurityGateApv.Domain.Models.Visitor", "UserId");

                    b.Navigation("CredentialCardType");

                    b.Navigation("User");

                    b.Navigation("UserDepartment");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.Gate", "GateIn")
                        .WithMany("VisitorSessionsIn")
                        .HasForeignKey("GateInId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.Gate", "GateOut")
                        .WithMany("VisitorSessionsOut")
                        .HasForeignKey("GateOutId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SecurityGateApv.Domain.Models.QRCard", "QRCard")
                        .WithMany("VisitorSession")
                        .HasForeignKey("QRCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "SecurityIn")
                        .WithMany("SecurityInSessions")
                        .HasForeignKey("SecurityInId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SecurityGateApv.Domain.Models.User", "SecurityOut")
                        .WithMany("SecurityOutSessions")
                        .HasForeignKey("SecurityOutId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SecurityGateApv.Domain.Models.VisitDetail", "VisitDetail")
                        .WithMany("VisitorSession")
                        .HasForeignKey("VisitDetailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GateIn");

                    b.Navigation("GateOut");

                    b.Navigation("QRCard");

                    b.Navigation("SecurityIn");

                    b.Navigation("SecurityOut");

                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSessionsImage", b =>
                {
                    b.HasOne("SecurityGateApv.Domain.Models.VisitorSession", "VisitorSession")
                        .WithMany("Images")
                        .HasForeignKey("VisitorSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.CredentialCardType", b =>
                {
                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Department", b =>
                {
                    b.Navigation("UserDepartment");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Gate", b =>
                {
                    b.Navigation("VehicleSession");

                    b.Navigation("VisitorSessionsIn");

                    b.Navigation("VisitorSessionsOut");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Notification", b =>
                {
                    b.Navigation("NotificationUsers");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Process", b =>
                {
                    b.Navigation("VisitProject");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCard", b =>
                {
                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardStatus", b =>
                {
                    b.Navigation("QRCards");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.QRCardType", b =>
                {
                    b.Navigation("QRCards");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Role", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.User", b =>
                {
                    b.Navigation("CreatedVisits");

                    b.Navigation("Project");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("SecurityInSessions");

                    b.Navigation("SecurityOutSessions");

                    b.Navigation("SentNotifications");

                    b.Navigation("UpdatedVisits");

                    b.Navigation("UserDepartment");

                    b.Navigation("VehicleSession");

                    b.Navigation("Visitor")
                        .IsRequired();
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.UserDepartment", b =>
                {
                    b.Navigation("Visitors");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VehicleSession", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visit", b =>
                {
                    b.Navigation("VisitDetail");

                    b.Navigation("VisitProject");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitDetail", b =>
                {
                    b.Navigation("VehicleSession");

                    b.Navigation("VisitorSession");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitType", b =>
                {
                    b.Navigation("VisitTypes");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.Visitor", b =>
                {
                    b.Navigation("VisitDetail");
                });

            modelBuilder.Entity("SecurityGateApv.Domain.Models.VisitorSession", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
